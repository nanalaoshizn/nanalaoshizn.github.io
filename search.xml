<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>模板</title>
      <link href="/2022/01/28/ckyyiqyiw003sf8ue7uym4lu1/"/>
      <url>/2022/01/28/ckyyiqyiw003sf8ue7uym4lu1/</url>
      
        <content type="html"><![CDATA[<p>盘前交易资格自我审核：</p><p>警惕：一下都是用实打实的金钱亏出来的教训，不能不引起切实的重视。这些规定看似是限制，其实是一种真实的保护。</p><ol><li>盘前吵架禁止交易当节。</li><li>破戒必须隔三个夜盘才能上机。</li><li>单手超损200必须砍。</li><li>如果关键节点介入后未按预期走，或者品种自身异于板块，此时左侧高低点及时止损</li><li>当日超亏5%停机位。</li><li>连续两天停机位，禁止交易一天。</li><li><strong>单边急速行情不介入，在这种行情里亏太多了。</strong></li><li>其他引起盘前身体不舒服，头疼脑涨，反应慢的情况的，禁止当节交易。</li></ol><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 日总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NO.4</title>
      <link href="/2022/01/28/ckyyiqyih0020f8ue8qmbfg3e/"/>
      <url>/2022/01/28/ckyyiqyih0020f8ue8qmbfg3e/</url>
      
        <content type="html"><![CDATA[<p>状态：正常；</p><p>耐心：正常：</p><p>零错误：有两笔错误<span id="more"></span></p><p>周五晚上没做。今天早上开盘主要做了黑色。其实也是每做的太好的。这种大行情我的打法往往在平仓之后还会起一波，但是难把握，也是只能放过去了。盘中两笔动作存在错误：</p><p>1、</p><table><thead><tr><th>hc2110</th><th>卖</th><th>平今</th><th>5739</th><th>6</th><th>9:26:55</th><th>0</th><th>4月26日</th><th>B大破-回调破前K不带预期</th><th>盈</th><th></th><th>动作存在错误</th></tr></thead><tbody><tr><td>hc2110</td><td>买</td><td>开仓</td><td>5739</td><td>6</td><td>9:24:59</td><td>0</td><td>4月26日</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>这一笔开仓之后，39没破，反而出现压单，要知道39是平台口这个位置不破说明这一单要马上平仓处理，不能再拿。但是盘中没有最及时处理。盘中这一单是要砍一跳出来的。</p><p>2、</p><table><thead><tr><th>合约</th><th>买卖</th><th>开平</th><th>成交价格</th><th>成交手数</th><th>成交时间</th><th>平仓盈亏(逐笔)</th><th>日期</th><th>模型</th><th>盈亏</th><th>量合规</th><th>动作存在错误</th></tr></thead><tbody><tr><td>rb2110</td><td>卖</td><td>平今</td><td>5471</td><td>6</td><td>9:55:18</td><td>-120</td><td>4月26日</td><td>A大破-连K破前K</td><td>亏</td><td>量合规</td><td>动作存在错误</td></tr><tr><td>rb2110</td><td>买</td><td>开仓</td><td>5473</td><td>6</td><td>9:55:06</td><td>0</td><td>4月26日</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>这一单打的新高连破前K，微结构上是开仓即到位的，这种情况如果不新高，要马上处理的。</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210426174642.png" alt="image-20210426174642148"></p><p>这一单如果盘中处理再慢一些，必然大亏，后续压的很快的。</p><p>就目前来看，我需要特别留意做好的就是亏损单的处理，原则是：宁可错过不赚也不能打亏。对我目前来说，只要亏损端掌握好，盈利是必然的。</p><p>今天数据</p><table><thead><tr><th>日期</th><th>平仓</th><th>手续费</th><th>惩罚</th><th>次数*10</th><th>累计平仓</th><th>累计手续费</th><th>累计实际权益</th></tr></thead><tbody><tr><td>2021年4月26日</td><td>220</td><td>352</td><td></td><td>100</td><td>860</td><td>1014</td><td>408</td></tr></tbody></table><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210512175325.png" alt="image-20210512175325060"></p>]]></content>
      
      
      <categories>
          
          <category> 日总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NO.3</title>
      <link href="/2022/01/28/ckyyiqyih001yf8uec26qho23/"/>
      <url>/2022/01/28/ckyyiqyih001yf8uec26qho23/</url>
      
        <content type="html"><![CDATA[<p>今天数据</p><table><thead><tr><th>日期</th><th>平仓</th><th>手续费</th><th>惩罚</th><th>次数*10</th><th>累计平仓</th><th>累计手续费</th><th>累计实际权益</th></tr></thead><tbody><tr><td>2021年4月22日</td><td>710</td><td>475</td><td></td><td>270</td><td>640</td><td>662</td><td>364</td></tr></tbody></table><p>状态：正常；</p><p>耐心：正常：</p><p>零错误：无错误<span id="more"></span></p><p>只要守住了零错误，行情来的时候，多少是能赚的。</p><p>我考虑，在有预期的位置，守住负一，可以博一下的。盘中还是要专注的，开持平要干净利索。</p><p>2021年4月25日21:21:55</p><p>十年前从这里离开走向外面的世界，十年后我回到这里。这十年我收获了什么呢？</p>]]></content>
      
      
      <categories>
          
          <category> 日总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NO.2</title>
      <link href="/2022/01/28/ckyyiqyif001vf8uebqgg0d4l/"/>
      <url>/2022/01/28/ckyyiqyif001vf8uebqgg0d4l/</url>
      
        <content type="html"><![CDATA[<p>今天数据</p><table><thead><tr><th>日期</th><th>平仓</th><th>手续费</th><th>惩罚</th><th>次数*10</th><th>累计平仓</th><th>累计手续费</th><th>累计实际权益</th></tr></thead><tbody><tr><td>2021年4月16日</td><td>-80</td><td>55</td><td></td><td>110</td><td>-70</td><td>187</td><td>-108.5</td></tr></tbody></table><p>状态：不好；</p><p>耐心：正常：</p><p>零错误：无错误<span id="more"></span></p><p>今天状态不好，真的很自责，心里难过。早上起来自知状态不佳，就出去跑步了，午饭时间回来，只做了下午盘。不能这样的，尽可能排除其他事情对个人的影响。</p><p>盘中做了的单子都没啥问题，只是行情太狗，感觉盘中的短线资金都是一跳就走人的主。这种行情就只能熬了，少亏吧。</p><p>有一点要注意，对于仓位的把握上，kdj不顺的时候轻仓。一般夜盘开盘十几分钟机会多，仓位适当重一些。</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210512175306.png" alt="image-20210512175306234"></p>]]></content>
      
      
      <categories>
          
          <category> 日总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/01/28/ckyyiqyie001rf8ue8bmecsg8/"/>
      <url>/2022/01/28/ckyyiqyie001rf8ue8bmecsg8/</url>
      
        <content type="html"><![CDATA[<h1 id="预期管理"><a href="#预期管理" class="headerlink" title="预期管理"></a>预期管理</h1><h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><p>1、因素：伦到位；有色到位；沪到位</p><p>2、实际中重点在对沪和有色的K线的细节分析上。多一分不行，少一分不行。</p><h2 id="1117-01"><a href="#1117-01" class="headerlink" title="1117-01"></a>1117-01</h2><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211116234848639.png" alt="image-20211116234848639"></p><h2 id="1117-02"><a href="#1117-02" class="headerlink" title="1117-02"></a>1117-02</h2><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211116235100595.png" alt="image-20211116235100595"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/01/28/ckyyiqyid001pf8uefjw5hebu/"/>
      <url>/2022/01/28/ckyyiqyid001pf8uefjw5hebu/</url>
      
        <content type="html"><![CDATA[<h1 id="10-13"><a href="#10-13" class="headerlink" title="10.13"></a>10.13</h1><h1 id="10-18※"><a href="#10-18※" class="headerlink" title="10.18※"></a>10.18※</h1><blockquote><p>这一天是很典型的节奏混乱&amp;连亏&amp;超亏&amp;笔数过多</p><p>本质来讲，还是分析阶段就出了较大问题，开盘连续7笔事后来看方向性就错了，伦的方向性分析直接就错了。在我的分析系统里主要原则是“以伦定开+三因共振”，第一步就卡伦，卡一个伦的方向。特别是在波动性大的行情里，卡伦尤为关键。</p></blockquote><span id="more"></span><h2 id="01沪结构问题"><a href="#01沪结构问题" class="headerlink" title="01沪结构问题"></a>01沪结构问题</h2><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211124181711063.png" alt="image-20211124181711063"></p><p>伦，就伦来讲，突破大结构之后回落区间顶，是清晰的多头准备，没问题</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211124181923680.png" alt="image-20211124181923680"></p><p>有色，缺失</p><p>沪，就沪来讲，我介入的这个位置很不好，没法给设置一个合理的预期。考虑伦的结构很清晰，这个位置也是破前K，如果打按现在来讲-3必须全砍。这种结构我遇到过三四次，没有一次是成功的。还是不打。</p><p>这个结构坑了我三笔，笔笔超损。</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211124182112088.png" alt="image-20211124182112088"></p><h2 id="02方向分析错误"><a href="#02方向分析错误" class="headerlink" title="02方向分析错误"></a>02方向分析错误</h2><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211124185117957.png" alt="image-20211124185117957"></p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211124185150354.png" alt="image-20211124185150354"></p><p>说了很多次<strong>以伦定开</strong>，这一单伦只能去准备多单，却去做空。盘中做空应该只是基于沪的结构，这是犯了错误啊。</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211124185345312.png" alt="image-20211124185345312"></p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211124185532029.png" alt="image-20211124185532029"></p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211124185725615.png" alt="image-20211124185725615"></p><p>这两笔是犯了同样的错，就不能准备空单的，盘中应该是情绪失控了。</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211124185833464.png" alt="image-20211124185833464"></p><p>这同样的错误。连亏了盘中居然没减仓，也没意识到节奏错了。</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211124185919977.png" alt="image-20211124185919977"></p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211124190106585.png" alt="image-20211124190106585"></p><p>这一天真是一路错到底了。</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211124190227439.png" alt="image-20211124190227439"></p><h1 id="1020"><a href="#1020" class="headerlink" title="1020"></a>1020</h1><h2 id="01方向性分析错误"><a href="#01方向性分析错误" class="headerlink" title="01方向性分析错误"></a>01方向性分析错误</h2><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211124191443912.png" alt="image-20211124191443912"></p><p>伦，开盘后伦迅速破位，此时以伦定开，伦定的是空，只能去准备空单。</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211124191509390.png" alt="image-20211124191509390"></p><p>沪，沪破了左侧大周期结构，结构在空，虽说这一单赚钱，但是这种单子长久来看是要亏大的，特别是在超级大的单边行情里，会亏的连裤衩都没有的。</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211124191651759.png" alt="image-20211124191651759"></p><h1 id="1111"><a href="#1111" class="headerlink" title="1111"></a>1111</h1><h2 id="1111-01错单"><a href="#1111-01错单" class="headerlink" title="1111-01错单"></a>1111-01错单</h2><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211110232952029.png" alt="image-20211110232952029"></p><p>三因分析</p><p>伦铝</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211110234406038.png" alt="image-20211110234406038"></p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211110234457542.png" alt="image-20211110234457542"></p><p>沪铝</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211110234540973.png" alt="image-20211110234540973"></p><p>有色</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211110234625273.png" alt="image-20211110234625273"></p><p>以伦定开</p><p>就tick来说，区间上，是可以介入空单的；就分时来讲，是左侧峰突破了，当前回调。盘中只看到了tick没注意分时，尚且情有可原。</p><p>三因共振？</p><p>就有色来讲，有色日内结构突破，多头，不应该开空，只应该考虑多单。</p><p>就沪来讲，沪铝日内结构区间上边沿，可以空。</p><p>综合来看，伦有质疑，有色不该空，盘中只看到了tick的空和沪的空，忽略了有色的多。</p><p>结论：错单。</p><h2 id="1111-02错单"><a href="#1111-02错单" class="headerlink" title="1111-02错单"></a>1111-02错单</h2><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211110235704008.png" alt="image-20211110235704008"></p><p>沪</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211110235500584.png" alt="image-20211110235500584"></p><p>致错原因同上</p><h2 id="1111-03反应慢-分析错-虚破"><a href="#1111-03反应慢-分析错-虚破" class="headerlink" title="1111-03反应慢+分析错+虚破"></a>1111-03反应慢+分析错+虚破</h2><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211110235757598.png" alt="image-20211110235757598"></p><p>三因分析</p><p>伦</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211111000004449.png" alt="image-20211111000004449"></p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211111000036713.png" alt="image-20211111000036713"></p><p>就伦铝来说，tick区间突破回调是可以做多的，分时一样。</p><p>有色</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211111000232833.png" alt="image-20211111000232833"></p><p>就有色来说，有色多头，回调上冲做多。</p><blockquote><p>分析都错了，这个位置有色强势，要打也是前一根阳线位置打，此时开K不冲就是到位点。2021年11月25日15:30:27</p></blockquote><p>沪</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211111000413967.png" alt="image-20211111000413967"></p><p>就沪来说，区间突破回落区间，回落到节点，可以试多。</p><p>结论：分析没问题，盘口突破打多，但是形态并没有破，此时符合“虚晃当下砍”，盘中确实压的很快，这一单用了8秒反应，可以更快，4秒就可以处理完。应该少亏一些的。</p><h2 id="1111-04虚破-反应慢-不打阳线"><a href="#1111-04虚破-反应慢-不打阳线" class="headerlink" title="1111-04虚破+反应慢+不打阳线"></a>1111-04虚破+反应慢+不打阳线</h2><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211111000828857.png" alt="image-20211111000828857"></p><p>伦同上</p><p>有色同上</p><p>沪</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211111000913444.png" alt="image-20211111000913444"></p><p>25打了之后盘口没破，虚晃当下砍的。应该少亏一些的，但是拿止损了。反应了24秒。其实盘中没第一时间发现是虚破。</p><blockquote><p>现在成交量小了，相比较而言难做了很多，反应速度要跟得上，及时不赚，至少保证别亏。严格执行了“以伦定开+三因共振”以上情况也基本能避免。盘中要多思考，确实是三个都要分析到位才行的。</p></blockquote><h2 id="1111-05错单"><a href="#1111-05错单" class="headerlink" title="1111-05错单"></a>1111-05错单</h2><h2 id="1111-06反应慢"><a href="#1111-06反应慢" class="headerlink" title="1111-06反应慢"></a>1111-06反应慢</h2><p>不要不舍得砍，犹豫之间砍完了就像这样亏超损。今天这种虚破很多我几乎都中招了，亏大的基本都是这种。</p><h2 id="1111-07错单"><a href="#1111-07错单" class="headerlink" title="1111-07错单"></a>1111-07错单</h2><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211113024358197.png" alt="image-20211113024358197"></p><p>伦</p><p>有色</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211113024825063.png" alt="image-20211113024825063"></p><p>就有色来讲，依然保持了强势的多头在区间突破之外</p><p>沪<img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211113024607963.png" alt="image-20211113024607963"></p><p>就沪来讲，日内区间砸到里边，此时不能保持多头思维，虽说不能看空，但是不能看多。</p><h2 id="1112-01结构分析要细致"><a href="#1112-01结构分析要细致" class="headerlink" title="1112-01结构分析要细致"></a>1112-01结构分析要细致</h2><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211111220201311.png" alt="image-20211111220201311"></p><p>伦</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211111230454531.png" alt="image-20211111230454531"></p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211111230726890.png" alt="image-20211111230726890"></p><p>就首因伦来讲，大周期突破回落区间顶，准备多单。</p><p>有色</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211111230925366.png" alt="image-20211111230925366"></p><p>就次因有色来说，日内区间内左侧小波底部两次验证过的位置，可以多。<strong>但是细节是：此次回落之后在37分有一次上冲回来，如果39分的阳线不能突破这个倒阳线是一个危险信号，要格外注意盘口</strong></p><p>沪</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211111231246679.png" alt="image-20211111231246679"></p><p>就第三因来讲，日内是跌势，但是考虑此时是缺口底部且左侧验证过一次，可以介入多。同时格外关注有色当根线的走势和盘口变化。盘中就是突破就急压，此时就算浮亏也马上对价出来。为什么强调对价出来，是因为在流动性不足的时候挂不出来的，连续挂就会挂一个超亏出来。</p><h2 id="1115-01-结构不舒服不清晰"><a href="#1115-01-结构不舒服不清晰" class="headerlink" title="1115-01 结构不舒服不清晰"></a>1115-01 结构不舒服不清晰</h2><p>伦</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211113120921230.png" alt="image-20211113120921230"></p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211113121020810.png" alt="image-20211113121020810"></p><p>就首因伦来讲，分时上是明显的砸进了区间内，这种强势突破回调有两个支撑，左侧分时高点和左侧结构压力转支撑，但是两个都没撑住直接回落区间，这种当时不着急按多处理。</p><blockquote><p>这种为啥不着急按多处理，原因是结构不清晰，如果它仅仅是回落到突破区间的上区间那是清晰的，如果它稍微穿了区间但在分时上及时拉了上去分时看不出来穿了是仅次的可以接受的。现在不仅tick完全明显回落区间，分时也是肉眼可见。这个时候行情走势就有了两种可能性，可以上可以下，就不清晰了。2021年11月25日15:35:07</p></blockquote><p>有色</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211113121454607.png" alt="image-20211113121454607"></p><p>就二因有色来讲，日内形势较为复杂，此时可以多</p><p>沪</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211113121350709.png" alt="image-20211113121350709"></p><p>就三因沪来讲，结构上也是可以多的。但是问题在于，上图是01，主力12在我介入的当时是虚破的。结合经验来讲，成功往往是一起破，一方没破就可能再陷入一次纠缠，本次就是例子，我被止损之后才起。</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211113122131687.png" alt="image-20211113122131687"></p><blockquote><p>经验：必须是同时破前K，有一个不破就要准备砍，这对反应速度提出了新的要求。</p></blockquote><h2 id="1118-01错过"><a href="#1118-01错过" class="headerlink" title="1118-01错过"></a>1118-01错过</h2><p>13：54多</p><p>伦</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211118150730593.png" alt="image-20211118150730593"></p><p>就第一因伦来讲，此处是准备多单的。</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211118150643574.png" alt="image-20211118150643574"></p><p>就第二因有色来讲，当时回落到左侧，但是全是阴线，盘中怯于此犹豫一下，沪那边就直接上了。</p><blockquote><p>但是结构上是到位的，可以期待这个位置有一个反弹的。如果沪此时也可以多，可以先打进去，看一下有色起不起，如果不起，及时止损2021年11月25日15:38:14</p></blockquote><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211118150555052.png" alt="image-20211118150555052"></p><p>就第三因来讲，有色大阴线破结构下杀，沪基本都是小阴线，也保持了结构，这是一种结构上的强势，这一笔怎么说应该打的，打进去之后如果有色那边还是阴线下杀那就及时止损处，最多也就两跳止损。盘中还是应该再果断和注意力集中一些。</p><h2 id="1119-01"><a href="#1119-01" class="headerlink" title="1119-01"></a>1119-01</h2><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211118222256630.png" alt="image-20211118222256630"></p><h1 id="1120"><a href="#1120" class="headerlink" title="1120"></a>1120</h1><h2 id="01被秒"><a href="#01被秒" class="headerlink" title="01被秒"></a>01被秒</h2><p>这一单从伦来说是空的，有色也是可以空的，沪结构类似。问题是盘中盘口实际上55就没破直接网上拉，被秒了。对于这种被秒的情况要追着砍。从预期空间来说，有色左侧低点就是第一预期位置，心里要有数的。</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211127192548788.png" alt="image-20211127192548788"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="1124"><a href="#1124" class="headerlink" title="1124"></a>1124</h1><h2 id="01沪的结构问题-没有可预期空间"><a href="#01沪的结构问题-没有可预期空间" class="headerlink" title="01沪的结构问题+没有可预期空间"></a>01沪的结构问题+没有可预期空间</h2><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211124193816565.png" alt="image-20211124193816565"></p><p>伦，结构震荡，这个位置可以准备多单</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211124193911785.png" alt="image-20211124193911785"></p><p>有色，结构震荡，当前位置可以准备多单</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211124194041763.png" alt="image-20211124194041763"></p><p>沪，日内结构在多，可以准备多单，但是沪这个结构太差了。左侧有两个更小周期的压力位，可预期的空间不好定。考虑三因结构都可以介入，但是介入后如果盘中开仓后能迅速上冲，可以预期到虚线位置，如果始终无法上冲在左侧结构压力位附近挺住，不应该拿-3的。</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211124194159772.png" alt="image-20211124194159772"></p><h2 id="02沪的结构问题-没有可预期空间"><a href="#02沪的结构问题-没有可预期空间" class="headerlink" title="02沪的结构问题+没有可预期空间"></a>02沪的结构问题+没有可预期空间</h2><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211124194710305.png" alt="image-20211124194710305"></p><p>三因共振的，沪这个位置开空，预期在哪里？预期最大在19200附近，但是眼前这个跳空结构应该重视，这个跳空如果以大阴线下穿那可以预期到200，如果在这个位置挺住就没法拿，不应该拿-3止损的。</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211124194648225.png" alt="image-20211124194648225"></p><h1 id="1125"><a href="#1125" class="headerlink" title="1125"></a>1125</h1><h2 id="01错过-大结构突破结构清晰应该追单"><a href="#01错过-大结构突破结构清晰应该追单" class="headerlink" title="01错过+大结构突破结构清晰应该追单"></a>01错过+大结构突破结构清晰应该追单</h2><p>14:09多</p><p>伦，日级别整理区间突破</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211125154135619.png" alt="image-20211125154135619"></p><p>有色，节点强势，突破左侧大结构</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211125154221829.png" alt="image-20211125154221829"></p><p>沪，节点在多。当前也是有效突破。</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211125154050537.png" alt="image-20211125154050537"></p><blockquote><p>这一单完全是自己失误。这么大周期突破，这么清晰的结构，应该追单而且要拿一下。</p></blockquote><h2 id="02未按原则平仓"><a href="#02未按原则平仓" class="headerlink" title="02未按原则平仓"></a>02未按原则平仓</h2><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211125154625904.png" alt="image-20211125154625904"></p><p>伦，</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211125154915805.png" alt="image-20211125154915805"></p><p>有色+沪</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211125154817258.png" alt="image-20211125154817258"></p><p>这一单就沪结构讲也是90可以先走一半，必须拿一半看一下，如果盘口到95再回落到-1（75）砍就是了。有色这么强。</p><h1 id="1127"><a href="#1127" class="headerlink" title="1127"></a>1127</h1><h2 id="01被秒-没当下对价砍"><a href="#01被秒-没当下对价砍" class="headerlink" title="01被秒+没当下对价砍"></a>01被秒+没当下对价砍</h2><h1 id="1130没有可预期的空间"><a href="#1130没有可预期的空间" class="headerlink" title="1130没有可预期的空间"></a>1130没有可预期的空间</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NO.0----始</title>
      <link href="/2022/01/28/ckyyiqyid001mf8ue16sf3pco/"/>
      <url>/2022/01/28/ckyyiqyid001mf8ue16sf3pco/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>当我写这些文字的时候，心里已经做好了准备。这是一次决战，对我而言，这是一次分水岭。</p><p>在战争时期，敌对双方需要一次 大决战来作出最后的胜负，胜负一决，不管是对哪一方，其就完成了自己的历史使命，就可以退出了。</p><p>这一次，是我和我自己持续六年的战争的最后阶段了，进入决战，给自己一个交代。<span id="more"></span></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>年后就已经在做准备了。这两个月，在技术和心里两方面所暴露的问题有很多，一一都是摆在面子上的，是清楚的，解决的办法是有的。</p><h2 id="百日大决战"><a href="#百日大决战" class="headerlink" title="百日大决战"></a>百日大决战</h2><p>昨晚，我梳理了一下涉及的细节，应该说，方法是完备的，漏洞是在执行层面的，这一点是长久来已经经过证明的。针对现有的几个漏洞，有了几点措施，相信只要我执行到位，问题是可以解决的。</p><p>这是我和我自己的决战，要想获取胜利只能一步一步、踏踏实实得来，没有捷径可走。</p><p>加油吧！</p>]]></content>
      
      
      <categories>
          
          <category> 日总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo部署到github</title>
      <link href="/2022/01/28/ckyyiqyi0000gf8uegbur93w3/"/>
      <url>/2022/01/28/ckyyiqyi0000gf8uegbur93w3/</url>
      
        <content type="html"><![CDATA[<p>本文是转载自别人的详细教程：</p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>首先下载稳定版</p><p><a href="https://link.zhihu.com/?target=https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi">Node.jsnodejs.org</a></p><p>我这里给的是64位的。</p><p>安装选项全部默认，一路点击<code>Next</code>。</p><p>最后安装好之后，按<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p><span id="more"></span><h2 id="添加国内镜像源"><a href="#添加国内镜像源" class="headerlink" title="添加国内镜像源"></a>添加国内镜像源</h2><p>如果没有梯子的话，可以使用阿里的国内镜像进行加速。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具————Git</p><p><a href="https://link.zhihu.com/?target=https://git-scm.com/download/win">Git - Downloading Packagegit-scm.com</a></p><p>安装选项还是全部默认，只不过最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了。</p><p>安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功。</p><h2 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h2><p>接下来就去注册一个github账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。</p><p>新建一个项目，如下所示：</p><p><img src="https://pic1.zhimg.com/80/v2-4270b2eec17601922d98aa03ea2c79cc_720w.jpg" alt="img"></p><p>然后如下图所示，输入自己的项目名字，后面一定要加<code>.github.io</code>后缀，README初始化也要勾上。</p><p><img src="https://pic3.zhimg.com/80/v2-d2b3b1ca2bd72e9f221c33c3890e6c32_720w.jpg" alt="img"></p><p>然后项目就建成了，点击<code>Settings</code>，向下拉到最后有个<code>GitHub Pages</code>，点击<code>Choose a theme</code>选择一个主题。然后等一会儿，再回到<code>GitHub Pages</code>，会变成下面这样：</p><p><img src="https://pic3.zhimg.com/80/v2-281f7ca404cbb2b769f09c34794ac5b6_720w.jpg" alt="img"></p><p>点击那个链接，就会出现自己的网页啦，效果如下：</p><p><img src="https://pic1.zhimg.com/80/v2-3a0e46d3a6fa7e5ac9f585158cb76a88_720w.jpg" alt="img"></p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在<code>D:\study\program\blog</code>目录下。</p><p>在该目录下右键点击<code>Git Bash Here</code>，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不要用Windows自带的控制台了。</p><p>定位到该目录下，输入<code>npm i hexo-cli -g</code>安装Hexo。会有几个报错，无视它就行。</p><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><p>然后就要初始化我们的网站，输入<code>hexo init</code>初始化文件夹，接着输入<code>npm install</code>安装必备的组件。</p><p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，然后浏览器打开<a href="https://link.zhihu.com/?target=http://localhost:4000/">http://localhost:4000/</a>，就可以看到我们的博客啦，效果如下：</p><p><img src="https://pic4.zhimg.com/80/v2-7461124ec772f6fe453d07554cb11363_720w.jpg" alt="img"></p><p>按<code>ctrl+c</code>关闭本地服务器。</p><h2 id="连接Github与本地"><a href="#连接Github与本地" class="headerlink" title="连接Github与本地"></a>连接Github与本地</h2><p>首先右键打开git bash，然后输入下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;godweiyang&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;792321264@qq.com&quot;</span></span><br></pre></td></tr></table></figure><p>用户名和邮箱根据你注册github的信息自行修改。</p><p>然后生成密钥SSH key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;792321264@qq.com&quot;</span></span><br></pre></td></tr></table></figure><p>打开<a href="https://link.zhihu.com/?target=http://github.com/">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随便。</p><p>git bash中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>将输出的内容复制到框中，点击确定保存。</p><p>输入<code>ssh -T git@github.com</code>，如果如下图所示，出现你的用户名，那就成功了。</p><p><img src="https://pic2.zhimg.com/80/v2-d2681a4830e54238450b6dc2a57d0c55_720w.jpg" alt="img"></p><p>打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。</p><p>修改最后一行的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/godweiyang/godweiyang.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>repository修改为你自己的github项目地址。</p><h2 id="写文章、发布文章"><a href="#写文章、发布文章" class="headerlink" title="写文章、发布文章"></a>写文章、发布文章</h2><p>首先在博客根目录下右键打开git bash，安装一个扩展<code>npm i hexo-deployer-git</code>。</p><p>然后输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。</p><p>然后打开<code>D:\study\program\blog\source\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p><p>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上。这时打开你的github.io主页就能看到发布的文章啦。</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>现在默认的域名还是<code>xxx.github.io</code>，是不是很没有牌面？想不想也像我一样弄一个专属域名呢，首先你得购买一个域名，xx云都能买，看你个人喜好了。</p><p>以我的百度云为例，如下图所示，添加两条解析记录：</p><p><img src="https://pic4.zhimg.com/80/v2-e11377329d5cef129c0aefd10eaa1607_720w.jpg" alt="img"></p><p>然后打开你的github博客项目，点击<code>settings</code>，拉到下面<code>Custom domain</code>处，填上你自己的域名，保存：</p><p><img src="https://pic4.zhimg.com/80/v2-8125794bbf0055917b820178489c7b0f_720w.jpg" alt="img"></p><p>这时候你的项目根目录应该会出现一个名为<code>CNAME</code>的文件了。如果没有的话，打开你本地博客<code>/source</code>目录，我的是<code>D:\study\program\blog\source</code>，新建<code>CNAME</code>文件，注意没有后缀。然后在里面写上你的域名，保存。最后运行<code>hexo g</code>、<code>hexo d</code>上传到github。</p><h2 id="备份博客源文件"><a href="#备份博客源文件" class="headerlink" title="备份博客源文件"></a>备份博客源文件</h2><p>有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到github上面。</p><p>首先在github博客仓库下新建一个分支<code>hexo</code>，然后<code>git clone</code>到本地，把<code>.git</code>文件夹拿出来，放在博客根目录下。</p><p>然后<code>git branch -b hexo</code>切换到<code>hexo</code>分支，然后<code>git add .</code>，然后<code>git commit -m &quot;xxx&quot;</code>，最后<code>git push origin hexo</code>提交就行了。</p><p>当然我新建了一个仓库存放了源文件，具体效果可以看我的博客源文件仓库：</p><p>大家也可以先用下文hexo安装方法安装完hexo，然后直接<code>git clone git@github.com:godweiyang/hexo-matery-modified.git</code>克隆我的所有源文件，然后这是我修改完的基本没bug的定制化的博客，就可以直接拿来用啦。</p><p><strong>我这个源文件和原来的主题没有什么区别，只是我把插件都安装完了，有些小bug也修复了，所以拿来就能直接用，方便大家。</strong></p><h2 id="博客源代码下载"><a href="#博客源代码下载" class="headerlink" title="博客源代码下载"></a>博客源代码下载</h2><p>如果大家不想这么麻烦的装一堆东西，然后还要自己修改bug，那么只需要做好上面的准备工作，然后下载我的源代码，改改个人配置就行了。</p><p>大家可以直接下载下来使用，修改个人配置信息即可，当然环境要先搭好。</p><p><strong>如果大家下载好了源代码，就可以直接使用了，基本可以跳过文章后面的部分了！喜欢的记得star并fork哦！</strong></p><h2 id="个性化设置（matery主题）"><a href="#个性化设置（matery主题）" class="headerlink" title="个性化设置（matery主题）"></a>个性化设置（matery主题）</h2><p>下面的个性化设置主要针对的是<code>matery</code>主题，如果你想用我现在博客这个主题，可以直接看这个章节。</p><p><strong>更换主题</strong></p><p>这两天花时间将我的博客换了一个主题，现在这个主题看着更加的炫（zhuang）酷（bi），并且响应式更友好，点起来就很舒服，功能也多很多。<a href="https://link.zhihu.com/?target=https://github.com/blinkfox/hexo-theme-matery">https://link.zhihu.com/?target=https%3A//github.com/blinkfox/hexo-theme-matery</a>)</p><p>它的文档写得也非常的详细，还有中英文两个版本，作者回复也很及时。效果图如下，可以看出非常合我的口味</p><p>但是我自己使用起来还是遇到了好几个问题，经过两天的不懈摸鱼，终于基本解决了，这里分享一下。</p><p>首先先按照文档教程安装一遍主题，然后是可以正常打开的，如果你是一般使用的话，基本没啥问题了。但是我是重度强迫症，一点小毛病就看着难受，下面列举一下我遇到的问题以及解决方法。</p><p><strong>文章头设置</strong></p><p>首先为了新建文章方便，建议将<code>/scaffolds/post.md</code>修改为如下代码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">top: <span class="literal">false</span></span><br><span class="line">cover: <span class="literal">false</span></span><br><span class="line">password:</span><br><span class="line">toc: <span class="literal">true</span></span><br><span class="line">mathjax: <span class="literal">true</span></span><br><span class="line">summary:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>这样新建文章后不用你自己补充了，修改信息就行。</p><p><strong>添加404页面</strong></p><p>原来的主题没有404页面，加一个也不是什么难事。首先在<code>/source/</code>目录下新建一个<code>404.md</code>，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: <span class="number">404</span></span><br><span class="line">date: <span class="number">2019</span><span class="number">-07</span><span class="number">-19</span> <span class="number">16</span>:<span class="number">41</span>:<span class="number">10</span></span><br><span class="line">type: <span class="string">&quot;404&quot;</span></span><br><span class="line">layout: <span class="string">&quot;404&quot;</span></span><br><span class="line">description: <span class="string">&quot;你来到了没有知识的荒原 :(&quot;</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>然后在<code>/themes/matery/layout/</code>目录下新建一个<code>404.ejs</code>文件，内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="comment">/* don&#x27;t remove. */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.about-cover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">75vh</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-cover pd-header about-cover&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col s10 offset-s1 m8 offset-m2 l8 offset-l2&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title center-align&quot;</span>&gt;</span></span><br><span class="line">                        404</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;description center-align&quot;</span>&gt;</span></span><br><span class="line">                        &lt;%= page.description %&gt;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 每天切换 banner 图.  Switch banner image every day.</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;.bg-cover&#x27;</span>).css(<span class="string">&#x27;background-image&#x27;</span>, <span class="string">&#x27;url(/medias/banner/&#x27;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getDay() + <span class="string">&#x27;.jpg)&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>“关于”页面增加简历（可选）</strong></p><p>修改<code>/themes/matery/layout/about.ejs</code>，找到<code>&lt;div class=&quot;card&quot;&gt;</code>标签，然后找到它对应的<code>&lt;/div&gt;</code>标签，接在后面新增一个card，语句如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-content article-card-content&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title center-align&quot;</span> <span class="attr">data-aos</span>=<span class="string">&quot;zoom-in-up&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-address-book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>&lt;%- __(&#x27;myCV&#x27;) %&gt;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;articleContent&quot;</span> <span class="attr">data-aos</span>=<span class="string">&quot;fade-up&quot;</span>&gt;</span></span><br><span class="line">                    &lt;%- page.content %&gt;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样就会多出一张card，然后可以在<code>/source/about/index.md</code>下面写上你的简历了，当然这里的位置随你自己设置，你也可以把简历作为第一个card。</p><p><strong>解决mathjax与代码高亮的冲突</strong></p><p>如果你按照教程安装了代码高亮插件<code>hexo-prism-plugin</code>，单独使用是没有问题的，但如果你又使用了mathjax，并且按照网上教程，安装<code>kramed</code>插件并修改了js文件里的正则表达式（为了解决markdown和mathjax的语法冲突），好了，那你的代码就无法高亮了。解决方法很简单，别用<code>kramed</code>插件了，还用原来自带的<code>marked</code>插件，直接改它的正则表达式就行了，改法如下：</p><p>打开<code>D:\study\program\blog\node_modules\marked\lib\marked.js</code> <code>escape:</code>处替换成：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">escape: /^\\([`*\[\]()#$+\-.!_&gt;])/,</span><br></pre></td></tr></table></figure><p><code>em:</code>处替换成：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br></pre></td></tr></table></figure><p>这时在文章里写数学公式基本没有问题了，但是要注意： <strong>数学公式中如果出现了连续两个{，中间一定要加空格！</strong></p><p><strong>增加建站时间</strong></p><p>修改<code>/themes/matery/layout/_partial/footer.ejs</code>文件，在最后加上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=javascript&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">siteTime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.setTimeout(<span class="string">&quot;siteTime()&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">var</span> seconds = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">var</span> minutes = seconds * <span class="number">60</span>;</span><br><span class="line">        <span class="keyword">var</span> hours = minutes * <span class="number">60</span>;</span><br><span class="line">        <span class="keyword">var</span> days = hours * <span class="number">24</span>;</span><br><span class="line">        <span class="keyword">var</span> years = days * <span class="number">365</span>;</span><br><span class="line">        <span class="keyword">var</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">var</span> todayYear = today.getFullYear();</span><br><span class="line">        <span class="keyword">var</span> todayMonth = today.getMonth() + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> todayDate = today.getDate();</span><br><span class="line">        <span class="keyword">var</span> todayHour = today.getHours();</span><br><span class="line">        <span class="keyword">var</span> todayMinute = today.getMinutes();</span><br><span class="line">        <span class="keyword">var</span> todaySecond = today.getSeconds();</span><br><span class="line">        <span class="comment">/* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)</span></span><br><span class="line"><span class="comment">        year - 作为date对象的年份，为4位年份值</span></span><br><span class="line"><span class="comment">        month - 0-11之间的整数，做为date对象的月份</span></span><br><span class="line"><span class="comment">        day - 1-31之间的整数，做为date对象的天数</span></span><br><span class="line"><span class="comment">        hours - 0(午夜24点)-23之间的整数，做为date对象的小时数</span></span><br><span class="line"><span class="comment">        minutes - 0-59之间的整数，做为date对象的分钟数</span></span><br><span class="line"><span class="comment">        seconds - 0-59之间的整数，做为date对象的秒数</span></span><br><span class="line"><span class="comment">        microseconds - 0-999之间的整数，做为date对象的毫秒数 */</span></span><br><span class="line">        <span class="keyword">var</span> t1 = <span class="built_in">Date</span>.UTC(<span class="number">2017</span>, <span class="number">09</span>, <span class="number">11</span>, <span class="number">00</span>, <span class="number">00</span>, <span class="number">00</span>); <span class="comment">//北京时间2018-2-13 00:00:00</span></span><br><span class="line">        <span class="keyword">var</span> t2 = <span class="built_in">Date</span>.UTC(todayYear, todayMonth, todayDate, todayHour, todayMinute, todaySecond);</span><br><span class="line">        <span class="keyword">var</span> diff = t2 - t1;</span><br><span class="line">        <span class="keyword">var</span> diffYears = <span class="built_in">Math</span>.floor(diff / years);</span><br><span class="line">        <span class="keyword">var</span> diffDays = <span class="built_in">Math</span>.floor((diff / days) - diffYears * <span class="number">365</span>);</span><br><span class="line">        <span class="keyword">var</span> diffHours = <span class="built_in">Math</span>.floor((diff - (diffYears * <span class="number">365</span> + diffDays) * days) / hours);</span><br><span class="line">        <span class="keyword">var</span> diffMinutes = <span class="built_in">Math</span>.floor((diff - (diffYears * <span class="number">365</span> + diffDays) * days - diffHours * hours) / minutes);</span><br><span class="line">        <span class="keyword">var</span> diffSeconds = <span class="built_in">Math</span>.floor((diff - (diffYears * <span class="number">365</span> + diffDays) * days - diffHours * hours - diffMinutes * minutes) / seconds);</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;sitetime&quot;</span>).innerHTML = <span class="string">&quot;本站已运行 &quot;</span> +diffYears+<span class="string">&quot; 年 &quot;</span>+diffDays + <span class="string">&quot; 天 &quot;</span> + diffHours + <span class="string">&quot; 小时 &quot;</span> + diffMinutes + <span class="string">&quot; 分钟 &quot;</span> + diffSeconds + <span class="string">&quot; 秒&quot;</span>;</span><br><span class="line">    &#125;<span class="comment">/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/</span></span><br><span class="line">    siteTime();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后在合适的地方（比如copyright声明后面）加上下面的代码就行了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;sitetime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>修改不蒜子初始化计数</strong></p><p>因为不蒜子至今未开放注册，所以没办法在官网修改初始化，只能自己动手了。和上一条一样，在<code>/themes/matery/layout/_partial/footer.ejs</code>文件最后加上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> int = <span class="built_in">setInterval</span>(fixCount, <span class="number">50</span>);  <span class="comment">// 50ms周期检测函数</span></span><br><span class="line">        <span class="keyword">var</span> pvcountOffset = <span class="number">80000</span>;  <span class="comment">// 初始化首次数据</span></span><br><span class="line">        <span class="keyword">var</span> uvcountOffset = <span class="number">20000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fixCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">&quot;busuanzi_container_site_pv&quot;</span>).style.display != <span class="string">&quot;none&quot;</span>) &#123;</span><br><span class="line">                $(<span class="string">&quot;#busuanzi_value_site_pv&quot;</span>).html(<span class="built_in">parseInt</span>($(<span class="string">&quot;#busuanzi_value_site_pv&quot;</span>).html()) + pvcountOffset);</span><br><span class="line">                <span class="built_in">clearInterval</span>(int);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ($(<span class="string">&quot;#busuanzi_container_site_pv&quot;</span>).css(<span class="string">&quot;display&quot;</span>) != <span class="string">&quot;none&quot;</span>) &#123;</span><br><span class="line">                $(<span class="string">&quot;#busuanzi_value_site_uv&quot;</span>).html(<span class="built_in">parseInt</span>($(<span class="string">&quot;#busuanzi_value_site_uv&quot;</span>).html()) + uvcountOffset); <span class="comment">// 加上初始数据 </span></span><br><span class="line">                <span class="built_in">clearInterval</span>(int); <span class="comment">// 停止检测</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后把上面几行有段代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalTraffic) &#123; %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-heart-o&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        本站总访问量 <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span> <span class="attr">class</span>=<span class="string">&quot;white-color&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalNumberOfvisitors) &#123; %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span></span><br><span class="line">        人次,<span class="symbol">&amp;nbsp;</span>访客数 <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span> <span class="attr">class</span>=<span class="string">&quot;white-color&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> 人.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalTraffic) &#123; %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_pv&quot;</span> <span class="attr">style</span>=<span class="string">&#x27;display:none&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-heart-o&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        本站总访问量 <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span> <span class="attr">class</span>=<span class="string">&quot;white-color&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalNumberOfvisitors) &#123; %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_uv&quot;</span> <span class="attr">style</span>=<span class="string">&#x27;display:none&#x27;</span>&gt;</span></span><br><span class="line">        人次,<span class="symbol">&amp;nbsp;</span>访客数 <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span> <span class="attr">class</span>=<span class="string">&quot;white-color&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> 人.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>其实就是增加了两个<code>style=&#39;display:none&#39;</code>而已。</p><p><strong>添加动漫人物</strong></p><p>其实三步就行了，不用像网上有些教程那么复杂。</p><p><strong>第一步：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p><strong>第二步：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install live2d-widget-model-shizuku</span><br></pre></td></tr></table></figure><p><strong>第三步：</strong> 在根目录配置文件中添加如下代码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: <span class="literal">false</span></span><br><span class="line">  log: <span class="literal">false</span></span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-shizuku</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: <span class="number">150</span></span><br><span class="line">    height: <span class="number">300</span></span><br><span class="line">  mobile:</span><br><span class="line">    show: <span class="literal">true</span></span><br><span class="line">  react:</span><br><span class="line">    opacity: <span class="number">0.7</span></span><br></pre></td></tr></table></figure><p>然后<code>hexo g</code>再<code>hexo s</code>就能预览出效果了，但是有个注意的地方，我发现<strong>这个动漫人物最好不要和不蒜子同时使用</strong>，不然不蒜子会显示不出来。</p><p><strong>图片添加水印</strong></p><p>为了防止别人抄袭你文章，可以把所有的图片都加上水印，方法很简单。</p><p>首先在博客根目录下新建一个<code>watermark.py</code>，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageDraw</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageFont</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">watermark</span>(<span class="params">post_name</span>):</span></span><br><span class="line">    <span class="keyword">if</span> post_name == <span class="string">&#x27;all&#x27;</span>:</span><br><span class="line">        post_name = <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    dir_name = <span class="string">&#x27;source/_posts/&#x27;</span> + post_name + <span class="string">&#x27;/*&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> files <span class="keyword">in</span> glob.glob(dir_name):</span><br><span class="line">        im = Image.<span class="built_in">open</span>(files)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(im.getbands()) &lt; <span class="number">3</span>:</span><br><span class="line">            im = im.convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(files)</span><br><span class="line">        font = ImageFont.truetype(<span class="string">&#x27;STSONG.TTF&#x27;</span>, <span class="built_in">max</span>(<span class="number">30</span>, <span class="built_in">int</span>(im.size[<span class="number">1</span>] / <span class="number">20</span>)))</span><br><span class="line">        draw = ImageDraw.Draw(im)</span><br><span class="line">        draw.text((im.size[<span class="number">0</span>] / <span class="number">2</span>, im.size[<span class="number">1</span>] / <span class="number">2</span>),</span><br><span class="line">                  <span class="string">u&#x27;@yourname&#x27;</span>, fill=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), font=font)</span><br><span class="line">        im.save(files)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">2</span>:</span><br><span class="line">        watermark(sys.argv[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[usage] &lt;input&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>字体也放根目录下，自己找字体。然后每次写完一篇文章可以运行<code>python3 watermark.py postname</code>添加水印，如果第一次运行要给所有文章添加水印，可以运行<code>python3 watermark.py all</code>。</p><p><strong>添加网易云音乐BGM</strong></p><p>写文章的时候，想插入一段BGM怎么办？</p><p>首先打开网易云网页版，找到想听的歌曲，然后点击生成外链：</p><p><img src="https://pic1.zhimg.com/80/v2-f0b4d14ccf55209a67c0e059ef72ff2c_720w.jpg" alt="img"></p><p>复制如下代码：</p><p><img src="https://pic3.zhimg.com/80/v2-caa9bfc14aca0213ebba87eae226c76a_720w.jpg" alt="img"></p><p>粘贴到文章里就行了，为了美观，设置一下居中，具体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;middle&quot;</span>&gt;</span>这里粘贴刚刚复制的代码<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>添加百度统计和谷歌统计代码</strong></p><p>打开<code>themes/matery/layout/_partial/head.ejs</code>，修改下面两行：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;baidu-site-verification&quot;</span> <span class="attr">content</span>=<span class="string">&quot;fmlEuI34ir&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;google-site-verification&quot;</span> <span class="attr">content</span>=<span class="string">&quot;yCy2azpds5XSuGZvis6OuA-XIGF5GuGpYRAaGfD6o48&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>content</code>内容改成你自己的就行了。</p><p><strong>修复代码块行号不显示bug</strong></p><p>修改<code>themes/matery/source/css/matery.css</code>第95行左右的<code>pre</code>和<code>code</code>两段改为如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pre &#123;</span><br><span class="line">    <span class="comment">/* padding: 1.5rem !important; */</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1.5rem</span> <span class="number">1.5rem</span> <span class="number">1.5rem</span> <span class="number">3.3rem</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">1rem</span> <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#272822</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0.35rem</span>;</span><br><span class="line">    <span class="attribute">tab-size</span>: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1px</span> <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: Inconsolata, Monaco, Consolas, <span class="string">&#x27;Courier New&#x27;</span>, Courier, monospace;</span><br><span class="line">    <span class="comment">/* font-size: 0.91rem; */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#e96900</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f8f8f8</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在根目录的<code>_config.yml</code>中设置<code>prism_plugin.line_number</code>为<code>true</code>。</p><p><strong>优化文章url路径</strong></p><p>有教程认为，将博客目录结构改为如下，就能减少层级，有利于搜索引擎的SEO。其实不然，网站内容的层级是按照从首页开始点击几次能到达你的文章来算的，所以你改不改都是两层就到达了，不在首页的也可以通过<code>index-archives-post</code>到达，跟文章url长度没有任何关系，所以如下操作作废，你想改也行，不改也行。但是建议已经建站一段时间的同学千万别改，不然会产生很多死链，并且评论issue全部会清空，很麻烦。</p><p><del>seo搜索引擎优化认为，网站的最佳结构是用户从首页点击三次就可以到达任何一个页面，但是我们使用hexo编译的站点打开文章的url是：<code>sitename/year/mounth/day/title</code>四层的结构，这样的url结构很不利于seo，爬虫就会经常爬不到我们的文章，于是，我们可以将url直接改成<code>sitename/title</code>的形式，并且title最好是用英文，在根目录的<code>_config.yml</code>文件下修改permalink如下：</del></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># permalink: :year/:month/:day/:title/</span><br><span class="line">permalink: :title/</span><br></pre></td></tr></table></figure><h2 id="常见问题及解答（FAQ）"><a href="#常见问题及解答（FAQ）" class="headerlink" title="常见问题及解答（FAQ）"></a><strong>常见问题及解答（FAQ）</strong></h2><p>这个章节主要更新许多同学在搭建博客的过程中咨询我的一些问题。</p><p><strong>为什么本地生成完ssh key之后没有.ssh文件夹？</strong></p><p>这是我没有想到会遇到的问题，但是很多人还是遇到了，主要问题就是在输入完<code>ssh-keygen -t rsa -C &quot;792321264@qq.com&quot;</code>之后，很多同学没有按照提示继续输入，而是就这么结束了，然后报错了也没有发现。正确做法是按照提示，一路按回车就行了。</p><p><strong>为什么代码块显示有问题？</strong></p><p>代码要显示正确，要注意以下几个点： 根目录<code>_config.yml</code>文件下的<code>highlight</code>中的<code>line_number</code>要设置为<code>false</code>，因为暂时行号暂时有bug，还没有修复。 不要按照网上教程安装<code>kramed</code>插件，已经装了的卸载掉。 * 修改<code>node_modules/marked/lib/marked.js</code>文件中的<code>escape</code>和<code>em</code>两行（在538行左右），改成下面：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">escape: /^\\([`*\[\]()#$+\-.!_&gt;])/,</span><br><span class="line">em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br></pre></td></tr></table></figure><p><strong>为什么博客本地预览没问题，push到github上就显示不正常？</strong></p><p>这个问题可能原因有很多，我暂时列举遇到的情况： * github博客的仓库名称一定要和你的github名字完全一样，比如你github名字叫<code>abc</code>，那么仓库名字一定要是<code>abc.github.io</code>。这是大多数人会犯的错误，会导致显示不正常。</p><p><strong>更换主题之后，配置文件是修改根目录下的还是主题目录下的？</strong></p><p>这个其实都要修改，一般也不会出现重复的属性。具体使用哪个，要看主题的源代码，如果是<code>config.xxx</code>那就是用的根目录配置文件，如果是<code>theme.xxx</code>那就用的是主题目录的配置文件。</p><p><strong>在哪建立github分支？</strong></p><p>点击仓库的<code>settings-branches</code>，右边点击<code>add new branch</code>即可。</p><h2 id="个性化设置（beantech主题，已停更）"><a href="#个性化设置（beantech主题，已停更）" class="headerlink" title="个性化设置（beantech主题，已停更）"></a>个性化设置（beantech主题，已停更）</h2><p><strong>下面的个性化设置主要针对的是我之前使用的<code>beantech</code>主题，当然如果你想用我现在博客这个主题，可以不看这部分。这部分已经停止更新，今后我只会更新<code>matery</code>主题的各种配置。</strong></p><p><strong>更换主题</strong></p><p>网上大多数主题都是github排名第一的<code>Next</code>主题，但是我个人不是很喜欢，我更喜欢<code>beantech</code>主题，地址在<a href="https://link.zhihu.com/?target=https://github.com/YenYuHsuan/hexo-theme-beantech">传送门</a>。</p><p>首先要注意的是，<strong>这个github项目不仅包含了主题文件，还包含了hexo的各种文件</strong>。</p><p>所以首先下载下来这个项目，然后推荐将下图所有文件全部替换你原本博客根目录下的文件：</p><p><img src="https://pic3.zhimg.com/80/v2-c40a774df6d3f46f6e93728a03d9734a_720w.jpg" alt="img"></p><p>当然一般的主题和这个主题有点不一样，只含有主题文件夹，所以把整个文件夹丢到<code>theme</code>下就行了。</p><p>然后运行<code>hexo clean</code>清空所有生成的网页缓存，<code>hexo g</code>、<code>hexo d</code>。这时候新的主题网页就生成好了，博客根目录的情况应该大致如下：</p><p><img src="https://pic1.zhimg.com/80/v2-ad0c8f12a14a883e35f166a193d2e3d8_720w.jpg" alt="img"></p><p><strong>博客目录构成介绍</strong></p><p>从上图可以看出，博客的目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- node_modules</span><br><span class="line">- public</span><br><span class="line">- scaffolds</span><br><span class="line">- source</span><br><span class="line">    - _posts</span><br><span class="line">    - about</span><br><span class="line">    - archive</span><br><span class="line">    - img</span><br><span class="line">    - tags</span><br><span class="line">- themes</span><br></pre></td></tr></table></figure><p><code>node_modules</code>是node.js各种库的目录，<code>public</code>是生成的网页文件目录，<code>scaffolds</code>里面就三个文件，存储着新文章和新页面的初始设置，<code>source</code>是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件，<code>themes</code>存放着主题文件，一般也用不到。</p><p>我们平时写文章只需要关注<code>source/_posts</code>这个文件夹就行了。</p><p>网站图片都保存在<code>D:\study\program\blog\source\img</code>目录下，可以修改成自己的图片。</p><p><strong>修复文档分类bug</strong></p><p>这个主题文档分类功能有个bug，一直没有得到解决，直到最近，我才发现是源文件的单词拼错了。。。</p><p>打开<code>D:\study\program\blog\scaffolds\post.md</code>，单词<code>catagories</code>改为<code>categories</code>。</p><p><strong>添加畅言评论插件</strong></p><p>主题自带了多说评论插件，但是多说已经关闭了，所以我换成了畅言评论插件。</p><p>首先你得注册一个畅言账号，</p><p><a href="https://link.zhihu.com/?target=http://changyan.kuaizhan.com/">云评论 - 专业的社会化评论系统changyan.kuaizhan.com</a></p><p>然后打开如下页面，复制该段代码：</p><p><img src="https://pic3.zhimg.com/80/v2-6d7e684dc9967595521840684f2ea0da_720w.jpg" alt="img"></p><p>打开<code>D:\study\program\blog\themes\beantech\layout\post.ejs</code>，将代码粘贴到如下位置：</p><p><img src="https://pic4.zhimg.com/80/v2-f30b0d3f2251801204f414c6ec9ab383_720w.jpg" alt="img"></p><p>然后重新生成一下网页，可以看到效果图如下：</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03序列</title>
      <link href="/2022/01/28/ckyyiqyhx000bf8uegf6v5fx4/"/>
      <url>/2022/01/28/ckyyiqyhx000bf8uegf6v5fx4/</url>
      
        <content type="html"><![CDATA[<h1 id="列表List"><a href="#列表List" class="headerlink" title="列表List"></a>列表List</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h3><p>可创建一个整数列表，一般用在 for 循环中。</p><p>返回：返回的是一个可迭代对象（类型是对象），而不是列表类型， 所以打印的时候不会打印列表，<span id="more"></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">range</span>(start, stop,[step])</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>start: 计数从 start 开始。默认是从 0 开始。例如range（5）等价于range（0， 5）;</li><li>top: 计数到 stop 结束，但不包括 stop。例如：range（0， 5） 是[0, 1, 2, 3, 4]没有5；</li><li>step：步长，默认为1。例如：range（0， 5） 等价于 range(0, 5, 1)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">big_num =[]</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span>  <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    num = num**<span class="number">2</span></span><br><span class="line">    big_num.append(num)</span><br><span class="line"><span class="built_in">print</span>(big_num)</span><br><span class="line"></span><br><span class="line">返回</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line">这个例子可以用列表解析进行简化</span><br><span class="line">big_num =[num**<span class="number">2</span> <span class="keyword">for</span> num <span class="keyword">in</span>  <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line"><span class="built_in">print</span>(big_num)</span><br><span class="line">返回 同</span><br></pre></td></tr></table></figure><p><em>注意</em>：range()并不直接创建一个数字列表，需要用函数list()将range()的结果转换为列表。</p><h3 id="list"><a href="#list" class="headerlink" title="list()"></a>list()</h3><p>ist() 函数用于将元组转换为列表。</p><p>注：<strong>元组</strong>与列表是非常类似的，区别在于元组的元素值不能修改的、是不可变的，元组是放在括号中，列表是放于方括号中。一般来说，不可变的列表叫元组。元组可以像列表一样通过索引来访问。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list( tuple )</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>tuple – 要转换为列表的元组。</li></ul><p>返回：列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num  = list(range(5))</span><br><span class="line">print(num)</span><br><span class="line"></span><br><span class="line">返回</span><br><span class="line">[0, 1, 2, 3, 4]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num = list(&#x27;word&#x27;)</span><br><span class="line">print(num)</span><br><span class="line"></span><br><span class="line">返回</span><br><span class="line">[&#x27;w&#x27;, &#x27;o&#x27;, &#x27;r&#x27;, &#x27;d&#x27;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = list(&#x27;843613101&#x27;)</span><br><span class="line">print(list1)</span><br><span class="line">输出</span><br><span class="line">[&#x27;8&#x27;, &#x27;4&#x27;, &#x27;3&#x27;, &#x27;6&#x27;, &#x27;1&#x27;, &#x27;3&#x27;, &#x27;1&#x27;, &#x27;0&#x27;, &#x27;1&#x27;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tuple = (1,2,3,4,3,4,5,6)</span><br><span class="line">list1 = list(tuple)</span><br><span class="line">print(list1)</span><br><span class="line">输出</span><br><span class="line">[1, 2, 3, 4, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure><h3 id="min-max-sum"><a href="#min-max-sum" class="headerlink" title="min() max() sum()"></a>min() max() sum()</h3><p>对<strong>数字列表</strong>执行简单的统计计算</p><p>括号内是列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">big_num =[]</span><br><span class="line">for num in  range(1,1000001):</span><br><span class="line">    big_num.append(num)</span><br><span class="line"></span><br><span class="line">print(max(big_num))</span><br><span class="line">print(min(big_num))</span><br><span class="line">print(sum(big_num))</span><br><span class="line"></span><br><span class="line">返回</span><br><span class="line">1000000</span><br><span class="line">1</span><br><span class="line">500000500000</span><br></pre></td></tr></table></figure><h3 id="len"><a href="#len" class="headerlink" title="len()"></a>len()</h3><p>统计列表中元素的个数，括号内是列表或元组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">food =(&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;)</span><br><span class="line">print(len(food))</span><br><span class="line">或</span><br><span class="line">food =[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;]</span><br><span class="line">print(len(food))</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="dir"><a href="#dir" class="headerlink" title="dir()"></a>dir()</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1 = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;]</span><br><span class="line">print(dir(list1))</span><br><span class="line">输出</span><br><span class="line">[&#x27;__add__&#x27;, &#x27;__class__&#x27;, &#x27;__class_getitem__&#x27;, &#x27;__contains__&#x27;, &#x27;__delattr__&#x27;, &#x27;__delitem__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__getitem__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__iadd__&#x27;, &#x27;__imul__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__iter__&#x27;, &#x27;__le__&#x27;, &#x27;__len__&#x27;, &#x27;__lt__&#x27;, &#x27;__mul__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__reversed__&#x27;, &#x27;__rmul__&#x27;, &#x27;__setattr__&#x27;, &#x27;__setitem__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;append&#x27;, &#x27;clear&#x27;, &#x27;copy&#x27;, &#x27;count&#x27;, &#x27;extend&#x27;, &#x27;index&#x27;, &#x27;insert&#x27;, &#x27;pop&#x27;, &#x27;remove&#x27;, &#x27;reverse&#x27;, &#x27;sort&#x27;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate()"></a>enumerate()</h3><p>通过<code>enumerate</code>处理后的列表在循环遍历时会返回取到一个二元组，解包之后第一个值是索引，第二个值是元素，下面是一个简单的对比。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list1 = <span class="built_in">list</span>(<span class="string">&#x27;843613101&#x27;</span>)</span><br><span class="line">list2 = <span class="built_in">enumerate</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line">list3 = <span class="built_in">list</span>(<span class="built_in">enumerate</span>(list1))</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">&lt;<span class="built_in">enumerate</span> <span class="built_in">object</span> at <span class="number">0x000001EF1C6C8C80</span>&gt;</span><br><span class="line">[(<span class="number">0</span>, <span class="string">&#x27;8&#x27;</span>), (<span class="number">1</span>, <span class="string">&#x27;4&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;6&#x27;</span>), (<span class="number">4</span>, <span class="string">&#x27;1&#x27;</span>), (<span class="number">5</span>, <span class="string">&#x27;3&#x27;</span>), (<span class="number">6</span>, <span class="string">&#x27;1&#x27;</span>), (<span class="number">7</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="number">8</span>, <span class="string">&#x27;1&#x27;</span>)]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">items = [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>, <span class="string">&#x27;Swift&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(items)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;index&#125;</span>: <span class="subst">&#123;items[index]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(items):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;index&#125;</span>: <span class="subst">&#123;item&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list1 = [1,23,4,5,6,7,8,9,0]</span><br><span class="line">list2 = [4,5,6,7,8,5]</span><br><span class="line">list3 = zip(list1,list2)</span><br><span class="line">print(list3)</span><br><span class="line">list4 = list(list3)</span><br><span class="line">print(list4)</span><br><span class="line">输出</span><br><span class="line">&lt;zip object at 0x0000013D9C478B40&gt;</span><br><span class="line">[(1, 4), (23, 5), (4, 6), (5, 7), (6, 8), (7, 5)]</span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="count"><a href="#count" class="headerlink" title=".count()"></a>.count()</h3><p>统计列表中某元素出现的次数，括号内是指定的某个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>, <span class="string">&#x27;Kotlin&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找元素出现的次数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>.count(<span class="string">&#x27;Python&#x27;</span>))    <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>.count(<span class="string">&#x27;Go&#x27;</span>))        <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>.count(<span class="string">&#x27;Swfit&#x27;</span>))     <span class="comment"># 0</span></span><br></pre></td></tr></table></figure><h3 id="append"><a href="#append" class="headerlink" title=".append()"></a>.append()</h3><p>.append(obj)末尾添加一个</p><p>往列表的最后一个位置插入操作，括号内是插入的元素,但是<strong>只能添加一个元素进去，加两个就得报错，加两个得用extend（）</strong></p><p>返回：无，会修改列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;school&quot;]</span><br><span class="line">num.append(&#x27;love&#x27;)</span><br><span class="line">print(num)</span><br></pre></td></tr></table></figure><h3 id="extend-或-相加"><a href="#extend-或-相加" class="headerlink" title=".extend()  或  +相加"></a>.extend()  或  +相加</h3><p>可以”+“号 来实现列表的相加。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num_1 = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br><span class="line">num_2 = [&#x27;teacher&#x27;,&quot;school&quot;]</span><br><span class="line">num = num_1 + num_2</span><br><span class="line">print(num)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;]</span><br></pre></td></tr></table></figure><p>.extend（）末尾添加一列</p><p>列表A.extend(列表B)链接两个列表，将列表B接到A的最后边，形成一个新的列表A，A列表已经变化。也就是说extend可以添加两个以上的元素进去。注意，添加的方法：多个元素要放在方括号里，即extend（）的参数是一个列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num_1 = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br><span class="line">num_2 = [&#x27;teacher&#x27;,&quot;school&quot;]</span><br><span class="line">num_1.extend(num_2)</span><br><span class="line"></span><br><span class="line">num = num_1[:]</span><br><span class="line">print(num)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [ &#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;]</span><br><span class="line">a.extend(&#x27;4&#x27;)</span><br><span class="line">a.extend([&#x27;5&#x27;,&#x27;6&#x27;])</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">[&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;]</span><br></pre></td></tr></table></figure><p><strong>注意</strong>  两个列表谨慎用 =  连接，一旦连接，两个列表作一个看。上边</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num = num_1[:]</span><br></pre></td></tr></table></figure><p>是把新的列表A复制一个副本给列表num。</p><h3 id="insert"><a href="#insert" class="headerlink" title=".insert()"></a>.insert()</h3><p>list.insert(index, obj),该方法用于将指定对象插入裂变的指定位置。</p><p>参数说明</p><ul><li>index 索引</li><li>obj 对象，该对象可以是一个数字或字符串，也可以是一个列表的某一个索引值。但是，OBJ如果是列表，只能是列表的某一个索引“列表[2]“，如果把一段切片如列表[0,2]，那么结果是把这一段切片带方括号插进指定位置了。说简单点，inset（）只能插入一个，这一个还必须得是数字或字符串，列表也能插，只是就成了嵌套的。再简单点，只能插入一个，给啥插啥。</li></ul><p>返回：无</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">num_1 = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;]</span><br><span class="line">num_1.insert(2,567)</span><br><span class="line">print(num_1)</span><br><span class="line">num_2 = [&#x27;i&#x27;,&#x27;love&#x27;,&#x27;U&#x27;]</span><br><span class="line">num_1.insert(2,num_2[0])</span><br><span class="line">print(num_1)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, 567, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;]</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;i&#x27;, 567, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [ &#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;]</span><br><span class="line">a.insert(1,[&#x27;5&#x27;,&#x27;6&#x27;])</span><br><span class="line">print(a)</span><br><span class="line">输出</span><br><span class="line">[&#x27;1&#x27;, [&#x27;5&#x27;, &#x27;6&#x27;], &#x27;2&#x27;, &#x27;3&#x27;]</span><br></pre></td></tr></table></figure><h3 id="pop"><a href="#pop" class="headerlink" title=".pop()"></a>.pop()</h3><p>.pop(index)</p><p><strong>弹出</strong>列表中指定索引的元素并返回删除的元素，原列表将失去该元素。不指明索引，默认弹出最后一位。</p><blockquote><p>在使用<code>pop</code>方法删除元素时，如果索引的值超出了范围，会引发<code>IndexError</code>异常，错误消息是：<code>pop index out of range</code>。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;]</span><br><span class="line">poped_num = num.pop()</span><br><span class="line">print(num)</span><br><span class="line">print(poped_num)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;teacher&#x27;]</span><br><span class="line">school</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;]</span><br><span class="line">poped_num = num.pop(3)</span><br><span class="line">print(num)</span><br><span class="line">print(poped_num)</span><br><span class="line">输出</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;school&#x27;]</span><br><span class="line">teacher</span><br></pre></td></tr></table></figure><h3 id="remove-obj"><a href="#remove-obj" class="headerlink" title=".remove(obj)"></a>.remove(obj)</h3><p>list.remove(obj)，移除列表中符合某个值得第一个匹配项</p><p>返回：无。没有返回值就不存在赋值。</p><blockquote><p>在使用<code>remove</code>方法删除元素时，如果要删除的元素并不在列表中，会引发<code>ValueError</code>异常，错误消息是：<code>list.remove(x): x not in list</code>。</p></blockquote><h3 id="del语句"><a href="#del语句" class="headerlink" title="del语句"></a>del语句</h3><p>del list[1]</p><blockquote><p>使用Python中的<code>del</code>关键字后面跟要删除的元素，这种做法跟使用<code>pop</code>方法指定索引删除元素没有实质性的区别，但后者会返回删除的元素，前者在性能上略优</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [ &#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;]</span><br><span class="line">del a[1]</span><br><span class="line">print(a)</span><br><span class="line">输出</span><br><span class="line">[&#x27;1&#x27;, &#x27;3&#x27;]</span><br></pre></td></tr></table></figure><p>del list 删除整个列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [ &#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;]</span><br><span class="line">del a</span><br><span class="line">print(a)</span><br><span class="line">输出</span><br><span class="line">NameError: name &#x27;a&#x27; is not defined</span><br></pre></td></tr></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title=".sort()"></a>.sort()</h3><p>**list.sort(cmp=None, key=None, reverse=False)**，默认升序</p><p>参数</p><p>cmp</p><p>key</p><p>reverse:翻转，reverse = True 降序， reverse = False升序（默认）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1 = list(&#x27;843613101&#x27;)</span><br><span class="line">list1.sort() #等同于list1.sort(reverse = False)</span><br><span class="line">print(list1)</span><br><span class="line">输出</span><br><span class="line">[&#x27;0&#x27;, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;3&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;6&#x27;, &#x27;8&#x27;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1 = list(&#x27;843613101&#x27;)</span><br><span class="line">list1.sort(reverse = True) #等同于list1.reverse</span><br><span class="line">print(list1)</span><br><span class="line">输出</span><br><span class="line">[&#x27;8&#x27;, &#x27;6&#x27;, &#x27;4&#x27;, &#x27;3&#x27;, &#x27;3&#x27;, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;0&#x27;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">list = [(2, 2), (3, 4), (4, 1), (1, 3)]</span><br><span class="line"># 获取列表的第二个元素</span><br><span class="line">def takeSecond(elem):</span><br><span class="line">    return elem[1]</span><br><span class="line"># 指定第二个元素排序</span><br><span class="line">list.sort(key=takeSecond)</span><br><span class="line">print(list)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">[(4, 1), (2, 2), (1, 3), (3, 4)]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list = [&#x27;a&#x27;,&#x27;bb&#x27;,&#x27;ccc&#x27;]</span><br><span class="line">list.sort(key = len)</span><br><span class="line">print(list)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">[&#x27;a&#x27;, &#x27;bb&#x27;, &#x27;ccc&#x27;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list = [&#x27;a&#x27;,&#x27;bb&#x27;,&#x27;ccc&#x27;]</span><br><span class="line">list.sort(key = len, reverse=True)</span><br><span class="line">print(list)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">[&#x27;ccc&#x27;, &#x27;bb&#x27;, &#x27;a&#x27;]</span><br></pre></td></tr></table></figure><p>2021年3月17日16:18:40</p><h3 id="reverse（）"><a href="#reverse（）" class="headerlink" title=".reverse（）"></a>.reverse（）</h3><p>翻转列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1 = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;]</span><br><span class="line">list1.reverse()</span><br><span class="line">print(list1)</span><br><span class="line">输出</span><br><span class="line">[&#x27;school&#x27;, &#x27;teacher&#x27;, &#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27;]</span><br></pre></td></tr></table></figure><h3 id="index（）"><a href="#index（）" class="headerlink" title=".index（）"></a>.index（）</h3><p><strong>list.index(object，起始索引，结束索引)</strong>:索引一下内容为object在列表中的位置，如果要确定在列表中某一个范围内的，需要指定范围。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;]</span><br><span class="line">print(list1.index(&#x27;school&#x27;))</span><br><span class="line">输出</span><br><span class="line">4</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;,&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;,&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;]</span><br><span class="line">print(list1.index(&#x27;school&#x27;,6,10))</span><br><span class="line">输出</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>2021年3月23日13:54:53</p><h2 id="列表的拷贝"><a href="#列表的拷贝" class="headerlink" title="列表的拷贝"></a>列表的拷贝</h2><blockquote><p><strong>注意</strong> 两个列表谨慎用 =  连接，一旦连接，两个列表作一个看。</p></blockquote><p>真确操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list2 = list1[:]</span><br></pre></td></tr></table></figure><p>是把列表1复制一个副本给列表2，同时并不影响列表1，修改列表2的同时列表1没变化。但是如果采用 <code>list2 = list1</code>   那就不一样了，视作同一个列表，修改列表2的同时列表1随之修改</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><blockquote><p>注意：由于列表是可变类型，所以通过索引操作既可以获取列表中的元素，也可以更新列表中的元素。对列表做索引操作一样要注意索引越界的问题，对于有<code>N</code>个元素的列表，正向索引的范围是<code>0</code>到<code>N-1</code>，负向索引的范围是<code>-1</code>到<code>-N</code>，如果超出这个范围，将引发<code>IndexError</code>异常，错误信息为：<code>list index out of range</code>。</p></blockquote><h2 id="列表的生成式"><a href="#列表的生成式" class="headerlink" title="列表的生成式"></a>列表的生成式</h2><p>在Python中，列表还可以通过一种特殊的字面量语法来创建，这种语法叫做生成式。我们给出两段代码，大家可以做一个对比，看看哪一种方式更加简单优雅。</p><p>通过<code>for</code>循环为空列表添加元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个由1到9的数字构成的列表</span></span><br><span class="line">list1 = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    list1.append(x)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个由&#x27;hello world&#x27;中除空格和元音字母外的字符构成的列表</span></span><br><span class="line">list2 = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;hello world&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27; aeiou&#x27;</span>:</span><br><span class="line">        list2.append(x)</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个由个两个字符串中字符的笛卡尔积构成的列表</span></span><br><span class="line">list3 = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="string">&#x27;12&#x27;</span>:</span><br><span class="line">        list3.append(x + y)</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br></pre></td></tr></table></figure><p>通过生成式创建列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个由1到9的数字构成的列表</span></span><br><span class="line">list1 = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(list1)    <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个由&#x27;hello world&#x27;中除空格和元音字母外的字符构成的列表</span></span><br><span class="line">list2 = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;hello world&#x27;</span> <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27; aeiou&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(list2)    <span class="comment"># [&#x27;h&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;w&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;d&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个由个两个字符串中字符的笛卡尔积构成的列表</span></span><br><span class="line">list3 = [x + y <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span> <span class="keyword">for</span> y <span class="keyword">in</span> <span class="string">&#x27;12&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(list3)    <span class="comment"># [&#x27;A1&#x27;, &#x27;A2&#x27;, &#x27;B1&#x27;, &#x27;B2&#x27;, &#x27;C1&#x27;, &#x27;C2&#x27;]</span></span><br></pre></td></tr></table></figure><p>下面这种方式不仅代码简单优雅，而且性能也优于上面使用<code>for</code>循环和<code>append</code>方法向空列表中追加元素的方式。可以简单跟大家交待下为什么生成式拥有更好的性能，那是因为Python解释器的字节码指令中有专门针对生成式的指令（<code>LIST_APPEND</code>指令）；而<code>for</code>循环是通过方法调用（<code>LOAD_METHOD</code>和<code>CALL_METHOD</code>指令）的方式为列表添加元素，方法调用本身就是一个相对耗时的操作。对这一点不理解也没有关系，记住“<strong>强烈建议用生成式语法来创建列表</strong>”这个结论就可以了。</p><h1 id="元组tuple"><a href="#元组tuple" class="headerlink" title="元组tuple"></a>元组tuple</h1><p>是一个不可改变的对象，这是它不同于列表的最大特殊之处，一旦创建就不可改变。可以说是戴上枷锁的列表。具有列表的基本操作方式。</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/20210323141724.png"></p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/20210323142018.png"></p><blockquote><p><strong>注意</strong>一个元组中如果有两个元素，我们就称之为二元组；一个元组中如果五个元素，我们就称之为五元组。需要提醒大家注意的是，<code>()</code>表示空元组，但是如果元组中只有一个元素，需要加上一个逗号，否则<code>()</code>就不是代表元组的字面量语法，而是改变运算优先级的圆括号，所以<code>(&#39;hello&#39;, )</code>和<code>(100, )</code>才是一元组，而<code>(&#39;hello&#39;)</code>和<code>(100)</code>只是字符串和整数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 空元组</span></span><br><span class="line">a = ()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))    <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 不是元组</span></span><br><span class="line">b = (<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))    <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line">c = (<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(c))    <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 一元组</span></span><br><span class="line">d = (<span class="string">&#x27;hello&#x27;</span>, )</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(d))    <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line">e = (<span class="number">100</span>, )</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(e))    <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="元组的应用场景"><a href="#元组的应用场景" class="headerlink" title="元组的应用场景"></a>元组的应用场景</h3><p>讲到这里，相信大家一定迫切的想知道元组有哪些应用场景，我们给大家举几个例子。</p><h4 id="例子1：打包和解包操作。"><a href="#例子1：打包和解包操作。" class="headerlink" title="例子1：打包和解包操作。"></a>例子1：打包和解包操作。</h4><p>当我们把多个用逗号分隔的值赋给一个变量时，多个值会打包成一个元组类型；当我们把一个元组赋值给多个变量时，元组会解包成多个值然后分别赋给对应的变量，如下面的代码所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包</span></span><br><span class="line">a = <span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a), a)    <span class="comment"># &lt;class &#x27;tuple&#x27;&gt; (1, 10, 100)</span></span><br><span class="line"><span class="comment"># 解包</span></span><br><span class="line">i, j, k = a</span><br><span class="line"><span class="built_in">print</span>(i, j, k)       <span class="comment"># 1 10 100</span></span><br></pre></td></tr></table></figure><p>在解包时，如果解包出来的元素个数和变量个数不对应，会引发<code>ValueError</code>异常，错误信息为：<code>too many values to unpack</code>（解包的值太多）或<code>not enough values to unpack</code>（解包的值不足）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span></span><br><span class="line"><span class="comment"># i, j, k = a             # ValueError: too many values to unpack (expected 3)</span></span><br><span class="line"><span class="comment"># i, j, k, l, m, n = a    # ValueError: not enough values to unpack (expected 6, got 4)</span></span><br></pre></td></tr></table></figure><p>有一种解决变量个数少于元素的个数方法，就是使用星号表达式，我们之前讲函数的可变参数时使用过星号表达式。有了星号表达式，我们就可以让一个变量接收多个值，代码如下所示。需要注意的是，用星号表达式修饰的变量会变成一个列表，列表中有0个或多个元素。还有在解包语法中，星号表达式只能出现一次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span></span><br><span class="line">i, j, *k = a</span><br><span class="line"><span class="built_in">print</span>(i, j, k)          <span class="comment"># 1 10 [100, 1000]</span></span><br><span class="line">i, *j, k = a</span><br><span class="line"><span class="built_in">print</span>(i, j, k)          <span class="comment"># 1 [10, 100] 1000</span></span><br><span class="line">*i, j, k = a</span><br><span class="line"><span class="built_in">print</span>(i, j, k)          <span class="comment"># [1, 10] 100 1000</span></span><br><span class="line">*i, j = a</span><br><span class="line"><span class="built_in">print</span>(i, j)             <span class="comment"># [1, 10, 100] 1000</span></span><br><span class="line">i, *j = a</span><br><span class="line"><span class="built_in">print</span>(i, j)             <span class="comment"># 1 [10, 100, 1000]</span></span><br><span class="line">i, j, k, *l = a</span><br><span class="line"><span class="built_in">print</span>(i, j, k, l)       <span class="comment"># 1 10 100 [1000]</span></span><br><span class="line">i, j, k, l, *m = a</span><br><span class="line"><span class="built_in">print</span>(i, j, k, l, m)    <span class="comment"># 1 10 100 1000 []</span></span><br></pre></td></tr></table></figure><p>需要说明一点，解包语法对所有的序列都成立，这就意味着对字符串、列表以及我们之前讲到的<code>range</code>函数返回的范围序列都可以使用解包语法。大家可以尝试运行下面的代码，看看会出现怎样的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a, b, *c = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br><span class="line">a, b, c = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br><span class="line">a, *b, c = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br></pre></td></tr></table></figure><p>现在我们可以反过来思考一下函数的可变参数，可变参数其实就是将多个参数打包成了一个元组，可以通过下面的代码来证明这一点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(args), args)</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> args:</span><br><span class="line">        total += val</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">10</span>, <span class="number">20</span>)        <span class="comment"># &lt;class &#x27;tuple&#x27;&gt; (1, 10, 20)</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)    <span class="comment"># &lt;class &#x27;tuple&#x27;&gt; (1, 2, 3, 4, 5)</span></span><br></pre></td></tr></table></figure><h4 id="例子2：交换两个变量的值。"><a href="#例子2：交换两个变量的值。" class="headerlink" title="例子2：交换两个变量的值。"></a>例子2：交换两个变量的值。</h4><p>交换两个变量的值是编程语言中的一个经典案例，在很多编程语言中，交换两个变量的值都需要借助一个中间变量才能做到，如果不用中间变量就需要使用比较晦涩的位运算来实现。在Python中，交换两个变量<code>a</code>和<code>b</code>的值只需要使用如下所示的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure><p>同理，如果要将三个变量<code>a</code>、<code>b</code>、<code>c</code>的值互换，即<code>b</code>赋给<code>a</code>，<code>c</code>赋给<code>b</code>，<code>a</code>赋给<code>c</code>，也可以如法炮制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = b, c, a</span><br></pre></td></tr></table></figure><p>需要说明的是，上面并没有用到打包和解包语法，Python的字节码指令中有<code>ROT_TWO</code>和<code>ROT_THREE</code>这样的指令可以实现这个操作，效率是非常高的。但是如果有多于三个变量的值要依次互换，这个时候没有直接可用的字节码指令，执行的原理就是我们上面讲解的打包和解包操作。</p><h4 id="例子3：让函数返回多个值。"><a href="#例子3：让函数返回多个值。" class="headerlink" title="例子3：让函数返回多个值。"></a>例子3：让函数返回多个值。</h4><p>有的时候一个函数执行完成后可能需要返回多个值，这个时候元组类型应该是比较方便的选择。例如，编写一个找出列表中最大值和最小的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_max_and_min</span>(<span class="params">items</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;找出列表中最大和最小的元素</span></span><br><span class="line"><span class="string">    :param items: 列表</span></span><br><span class="line"><span class="string">    :return: 最大和最小元素构成的二元组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    max_one, min_one = items[<span class="number">0</span>], items[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">if</span> item &gt; max_one:</span><br><span class="line">            max_one = item</span><br><span class="line">        <span class="keyword">elif</span> item &lt; min_one:</span><br><span class="line">            min_one = item</span><br><span class="line">    <span class="keyword">return</span> max_one, min_one</span><br></pre></td></tr></table></figure><p>上面函数的<code>return</code>语句中有两个值，这两个值会组装成一个二元组然后返回。所以调用<code>find_max_and_min</code>函数会得到这个二元组，如果愿意也可以通过解包语法将二元组中的两个值分别赋给两个变量。</p><h2 id="元组和列表的比较"><a href="#元组和列表的比较" class="headerlink" title="元组和列表的比较"></a>元组和列表的比较</h2><p>这里还有一个非常值得探讨的问题，Python中已经有了列表类型，为什么还需要元组这样的类型呢？这个问题对于初学者来说似乎有点困难，不过没有关系，我们先抛出观点，大家可以一边学习一边慢慢体会。</p><ol><li><p>元组是不可变类型，<strong>不可变类型更适合多线程环境</strong>，因为它降低了并发访问变量的同步化开销。关于这一点，我们会在后面讲解多线程的时候为大家详细论述。</p></li><li><p>元组是不可变类型，通常<strong>不可变类型在创建时间和占用空间上面都优于对应的可变类型</strong>。我们可以使用<code>sys</code>模块的<code>getsizeof</code>函数来检查保存相同元素的元组和列表各自占用了多少内存空间。我们也可以使用<code>timeit</code>模块的<code>timeit</code>函数来看看创建保存相同元素的元组和列表各自花费的时间，代码如下所示。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">100000</span>))</span><br><span class="line">b = <span class="built_in">tuple</span>(<span class="built_in">range</span>(<span class="number">100000</span>))</span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(a), sys.getsizeof(b))    <span class="comment"># 900120 800056</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(timeit.timeit(<span class="string">&#x27;[1, 2, 3, 4, 5, 6, 7, 8, 9]&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(timeit.timeit(<span class="string">&#x27;(1, 2, 3, 4, 5, 6, 7, 8, 9)&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>Python中的元组和列表是可以相互转换的，我们可以通过下面的代码来做到。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将元组转换成列表</span></span><br><span class="line">info = (<span class="string">&#x27;骆昊&#x27;</span>, <span class="number">175</span>, <span class="literal">True</span>, <span class="string">&#x27;四川成都&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(info))       <span class="comment"># [&#x27;骆昊&#x27;, 175, True, &#x27;四川成都&#x27;]</span></span><br><span class="line"><span class="comment"># 将列表转换成元组</span></span><br><span class="line">fruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(fruits))    <span class="comment"># (&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;orange&#x27;)</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="列表和元祖的经典案例"><a href="#列表和元祖的经典案例" class="headerlink" title="列表和元祖的经典案例"></a>列表和元祖的经典案例</h1><h2 id="案例1：成绩表和平均分统计"><a href="#案例1：成绩表和平均分统计" class="headerlink" title="案例1：成绩表和平均分统计"></a>案例1：成绩表和平均分统计</h2><blockquote><p><strong>说明</strong>：录入5个学生3门课程的考试成绩，计算每个学生的平均分和每门课的平均分。</p></blockquote><p><strong>我写的解决办法是</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">录入5个学生3门课程的考试成绩</span></span><br><span class="line"><span class="string">计算每个学生的平均分和每门课的平均分</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># students_name = [&#x27;张三&#x27;,&#x27;李四&#x27;,&#x27;王五&#x27;,&#x27;赵钱&#x27;,&#x27;孙俪&#x27;]</span></span><br><span class="line"><span class="comment"># course = [&#x27;数学&#x27;,&#x27;语文&#x27;,&#x27;英语&#x27;]</span></span><br><span class="line"></span><br><span class="line">students_name = [<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>]</span><br><span class="line">course = [<span class="string">&#x27;数学&#x27;</span>,<span class="string">&#x27;语文&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建了一个储藏五个学生成绩的列表</span></span><br><span class="line">scores = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(students_name)):</span><br><span class="line">    scores.append([<span class="number">0</span>]*<span class="built_in">len</span>(course))</span><br><span class="line"><span class="comment">#收集数据</span></span><br><span class="line"><span class="keyword">for</span> i,x_name <span class="keyword">in</span> <span class="built_in">enumerate</span>(students_name) :</span><br><span class="line">    <span class="keyword">for</span> j,y_course <span class="keyword">in</span> <span class="built_in">enumerate</span>(course):</span><br><span class="line">        score = <span class="built_in">input</span>(<span class="string">f&#x27;请输入<span class="subst">&#123;x_name&#125;</span>的<span class="subst">&#123;y_course&#125;</span>的成绩：&#x27;</span>)</span><br><span class="line">        scores[i][j] = <span class="built_in">int</span>(score)</span><br><span class="line"><span class="built_in">print</span>(scores)</span><br><span class="line"><span class="comment">#计算每个学生的平均分</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(students_name)):</span><br><span class="line">    name_total_score = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(course)):</span><br><span class="line">        name_total_score += scores[i][j]</span><br><span class="line">    pjcj = name_total_score/(<span class="built_in">len</span>(course))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;students_name[i]&#125;</span>的平均成绩是：<span class="subst">&#123;pjcj&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算每门课的平均分</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(course)):</span><br><span class="line">    course_total_score = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(students_name)):</span><br><span class="line">        course_total_score += scores[i][j]</span><br><span class="line">    pjcj = course_total_score/(<span class="built_in">len</span>(students_name))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;course[i]&#125;</span>的平均成绩是：<span class="subst">&#123;pjcj&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>大佬的解决办法是</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">录入5个学生3门课程的考试成绩</span></span><br><span class="line"><span class="string">计算每个学生的平均分和每门课的平均分</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">names = [<span class="string">&#x27;关羽&#x27;</span>, <span class="string">&#x27;张飞&#x27;</span>, <span class="string">&#x27;赵云&#x27;</span>, <span class="string">&#x27;马超&#x27;</span>, <span class="string">&#x27;黄忠&#x27;</span>]</span><br><span class="line">courses = [<span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>]</span><br><span class="line"><span class="comment"># 用生成式创建嵌套的列表保存5个学生3门课程的成绩</span></span><br><span class="line">scores = [[<span class="number">0</span>] * <span class="built_in">len</span>(courses) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(names))]</span><br><span class="line"><span class="comment"># 录入数据</span></span><br><span class="line"><span class="keyword">for</span> i, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(names):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;请输入<span class="subst">&#123;name&#125;</span>的成绩 ===&gt;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> j, course <span class="keyword">in</span> <span class="built_in">enumerate</span>(courses):</span><br><span class="line">        scores[i][j] = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">f&#x27;<span class="subst">&#123;course&#125;</span>: &#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">5</span>, <span class="string">&#x27;学生平均成绩&#x27;</span>, <span class="string">&#x27;-&#x27;</span> * <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 计算每个人的平均成绩</span></span><br><span class="line"><span class="keyword">for</span> index, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(names):</span><br><span class="line">    avg_score = <span class="built_in">sum</span>(scores[index]) / <span class="built_in">len</span>(courses)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>的平均成绩为: <span class="subst">&#123;avg_score:<span class="number">.1</span>f&#125;</span>分&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">5</span>, <span class="string">&#x27;课程平均成绩&#x27;</span>, <span class="string">&#x27;-&#x27;</span> * <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 计算每门课的平均成绩</span></span><br><span class="line"><span class="keyword">for</span> index, course <span class="keyword">in</span> <span class="built_in">enumerate</span>(courses):</span><br><span class="line">    <span class="comment"># 用生成式从scores中取出指定的列创建新列表</span></span><br><span class="line">    curr_course_scores = [score[index] <span class="keyword">for</span> score <span class="keyword">in</span> scores]</span><br><span class="line">    avg_score = <span class="built_in">sum</span>(curr_course_scores) / <span class="built_in">len</span>(names)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;course&#125;</span>的平均成绩为：<span class="subst">&#123;avg_score:<span class="number">.1</span>f&#125;</span>分&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="案例2：设计一个函数返回指定日期是这一年的第几天。"><a href="#案例2：设计一个函数返回指定日期是这一年的第几天。" class="headerlink" title="案例2：设计一个函数返回指定日期是这一年的第几天。"></a>案例2：设计一个函数返回指定日期是这一年的第几天。</h2><blockquote><p><strong>说明</strong>：这个案例源于著名的<em>The C Programming Language</em>上的例子。</p></blockquote><p><strong>我写的办法是</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">设计一个函数返回指定日期是这一年的第几天。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">day_dic = &#123;</span><br><span class="line">        <span class="string">&#x27;1&#x27;</span>:<span class="number">31</span>,</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span>:<span class="number">29</span>,</span><br><span class="line">        <span class="string">&#x27;3&#x27;</span>:<span class="number">31</span>,</span><br><span class="line">        <span class="string">&#x27;4&#x27;</span>:<span class="number">30</span>,</span><br><span class="line">        <span class="string">&#x27;5&#x27;</span>:<span class="number">31</span>,</span><br><span class="line">        <span class="string">&#x27;6&#x27;</span>:<span class="number">30</span>,</span><br><span class="line">        <span class="string">&#x27;7&#x27;</span>:<span class="number">31</span>,</span><br><span class="line">        <span class="string">&#x27;8&#x27;</span>:<span class="number">31</span>,</span><br><span class="line">        <span class="string">&#x27;9&#x27;</span>:<span class="number">30</span>,</span><br><span class="line">        <span class="string">&#x27;10&#x27;</span>:<span class="number">31</span>,</span><br><span class="line">        <span class="string">&#x27;11&#x27;</span>:<span class="number">30</span>,</span><br><span class="line">        <span class="string">&#x27;12&#x27;</span>:<span class="number">31</span>,</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_function</span>():</span></span><br><span class="line">    year = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入您想确认的年份：&#x27;</span>))</span><br><span class="line">    month = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入您想确认的日期的月份：&#x27;</span>))</span><br><span class="line">    day = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">f&#x27;请输入您想确认的<span class="subst">&#123;month&#125;</span>月的几号：&#x27;</span>))</span><br><span class="line">    <span class="comment">#判断闰年</span></span><br><span class="line">    <span class="keyword">if</span> year/<span class="number">4</span> != <span class="number">0</span> <span class="keyword">and</span> year/<span class="number">400</span>!=<span class="number">0</span>:</span><br><span class="line">        day_dic[<span class="string">&#x27;2&#x27;</span>] = <span class="number">28</span></span><br><span class="line">    <span class="comment">#计算数据</span></span><br><span class="line">    which_day = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,month):</span><br><span class="line">        which_day += <span class="built_in">int</span>(day_dic[<span class="built_in">str</span>(x)])</span><br><span class="line">    which_day += day</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;year&#125;</span>年<span class="subst">&#123;month&#125;</span>月<span class="subst">&#123;day&#125;</span>号是一年当中的第<span class="subst">&#123;which_day&#125;</span>天&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    a_function()</span><br></pre></td></tr></table></figure><p><strong>大佬写的办法是</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_leap_year</span>(<span class="params">year</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;判断指定的年份是不是闰年，平年返回False，闰年返回True&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">which_day</span>(<span class="params">year, month, date</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算传入的日期是这一年的第几天</span></span><br><span class="line"><span class="string">    :param year: 年</span></span><br><span class="line"><span class="string">    :param month: 月</span></span><br><span class="line"><span class="string">    :param date: 日</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 用嵌套的列表保存平年和闰年每个月的天数</span></span><br><span class="line">    days_of_month = [</span><br><span class="line">        [<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">        [<span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>]</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment"># 布尔值False和True可以转换成整数0和1，因此</span></span><br><span class="line">    <span class="comment"># 平年会选中嵌套列表中的第一个列表(2月是28天)</span></span><br><span class="line">    <span class="comment"># 闰年会选中嵌套列表中的第二个列表(2月是29天)</span></span><br><span class="line">    days = days_of_month[is_leap_year(year)]</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(month - <span class="number">1</span>):</span><br><span class="line">        total += days[index]</span><br><span class="line">    <span class="keyword">return</span> total + date</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(which_day(<span class="number">1980</span>, <span class="number">11</span>, <span class="number">28</span>))    <span class="comment"># 333</span></span><br><span class="line"><span class="built_in">print</span>(which_day(<span class="number">1981</span>, <span class="number">12</span>, <span class="number">31</span>))    <span class="comment"># 365</span></span><br><span class="line"><span class="built_in">print</span>(which_day(<span class="number">2018</span>, <span class="number">1</span>, <span class="number">1</span>))      <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(which_day(<span class="number">2016</span>, <span class="number">3</span>, <span class="number">1</span>))      <span class="comment"># 61</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="案例3：实现双色球随机选号。"><a href="#案例3：实现双色球随机选号。" class="headerlink" title="案例3：实现双色球随机选号。"></a>案例3：实现双色球随机选号。</h2><blockquote><p><strong>说明</strong>：双色球属乐透型彩票范畴，由中国福利彩票发行管理中心统一组织发行，在全国范围内销售。红球号码范围为01～33，蓝球号码范围为01～16。双色球每期从33个红球中开出6个号码，从16个蓝球中开出1个号码作为中奖号码，双色球玩法即是竞猜开奖号码的6个红球号码和1个蓝球号码。</p></blockquote><p><strong>我的写法是</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">实现双色球随机选号。</span></span><br><span class="line"><span class="string">红球号码范围为01～33，蓝球号码范围为01～16。</span></span><br><span class="line"><span class="string">双色球每期从33个红球中开出6个号码，从16个蓝球中开出1个号码作为中奖号码，双色球玩法即是竞猜开奖号码的6个红球号码和1个蓝球号码。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">red_boll = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">34</span>)]</span><br><span class="line">blue_boll = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">17</span>)]</span><br><span class="line"><span class="comment"># 开红球</span></span><br><span class="line">red_choice = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    a = random.randint(<span class="number">1</span>,<span class="built_in">len</span>(red_boll))</span><br><span class="line">    choice_boll = red_boll[a]</span><br><span class="line"></span><br><span class="line">    red_choice.append(choice_boll)</span><br><span class="line">    red_boll.remove(choice_boll)</span><br><span class="line"><span class="comment"># print(red_choice)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line"><span class="comment"># a = random.randint(1,len(red_boll))</span></span><br><span class="line"><span class="comment"># print(a)</span></span><br><span class="line"><span class="comment"># red_choice.append(a)</span></span><br><span class="line"><span class="comment"># red_boll.remove(a)</span></span><br><span class="line"><span class="comment"># print(red_boll)</span></span><br><span class="line"><span class="comment"># print(red_choice)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#开蓝球</span></span><br><span class="line">blue_choice= random.randint(<span class="number">1</span>,<span class="built_in">len</span>(blue_boll))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;机选的结果是:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> red_choice:</span><br><span class="line">    <span class="built_in">print</span>(x,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;| &#x27;</span> + <span class="built_in">str</span>(blue_choice))</span><br></pre></td></tr></table></figure><p><strong>大佬的写法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">双色球随机选号</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint, sample</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">balls</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;输出列表中的双色球号码&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> index, ball <span class="keyword">in</span> <span class="built_in">enumerate</span>(balls):</span><br><span class="line">        <span class="keyword">if</span> index == <span class="built_in">len</span>(balls) - <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;|&#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;ball:<span class="number">0</span>&gt;2d&#125;</span>&#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_select</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;随机选择一组号码&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 用生成式生成1到33号的红色球</span></span><br><span class="line">    red_balls = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">34</span>)]</span><br><span class="line">    <span class="comment"># 通过无放回随机抽样的方式选中6个红色球</span></span><br><span class="line">    selected_balls = sample(red_balls, <span class="number">6</span>)</span><br><span class="line">    <span class="comment"># 对红色球进行排序</span></span><br><span class="line">    selected_balls.sort()</span><br><span class="line">    <span class="comment"># 用1到16的随机数表示选中的蓝色球并追加到列表中</span></span><br><span class="line">    selected_balls.append(randint(<span class="number">1</span>, <span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> selected_balls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;机选几注: &#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    display(random_select())</span><br></pre></td></tr></table></figure><h1 id="集合SET"><a href="#集合SET" class="headerlink" title="集合SET"></a>集合SET</h1><p>大佬的集合解释很详细。</p><blockquote><p>50课基础里边</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python基础系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 列表 </tag>
            
            <tag> 元组 </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/28/ckyyiqyh50001f8ue1j6z0qud/"/>
      <url>/2022/01/28/ckyyiqyh50001f8ue1j6z0qud/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>wolai教程</title>
      <link href="/2021/12/18/ckyyiqyh80003f8ue1h5z66hz/"/>
      <url>/2021/12/18/ckyyiqyh80003f8ue1h5z66hz/</url>
      
        <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>阅读内容，你能获知</p><ul><li>我对一些软件的瞎评论（个人看法）</li><li>寒舟事件的瓜</li><li>Wolai相关 <strong>关于内容，并非原创，主要搬运知乎</strong> <strong>图片来源App Store、对应官网、少数派</strong></li></ul><h2 id="笔记类软件"><a href="#笔记类软件" class="headerlink" title="笔记类软件"></a><strong>笔记类软件</strong></h2><h3 id="Onenote"><a href="#Onenote" class="headerlink" title="Onenote"></a><strong>Onenote</strong></h3><p><img src="https://cdn.sspai.com/2020/08/21/article/b81861d699d009dd5a1b717245254c73?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="Wolai我来-一款国产笔记软件（吐槽Onenote、印象笔记-等软件）"></p><h3 id="印象笔记"><a href="#印象笔记" class="headerlink" title="印象笔记"></a><strong>印象笔记</strong></h3><p><img src="https://cdn.sspai.com/2020/08/21/article/828810697c5f7a31c62cd31aaf06b2af?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="Wolai我来-一款国产笔记软件（吐槽Onenote、印象笔记-等软件）"></p><h3 id="聊一下老牌的OneNote、印象笔记"><a href="#聊一下老牌的OneNote、印象笔记" class="headerlink" title="聊一下老牌的OneNote、印象笔记"></a><strong>聊一下老牌的OneNote、印象笔记</strong></h3><p>之所以先聊这个，可能是因为OneNote和EverNote太经典了</p><p><img src="https://cdn.sspai.com/2020/08/21/article/eb83825879415ad9406b4191695e9b2a?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="Wolai我来-一款国产笔记软件（吐槽Onenote、印象笔记-等软件）"></p><p>图片来源<a href="https://www.jianshu.com/p/7d38e3435978%E8%AF%B4%E8%AF%B4%E4%B8%AA%E4%BA%BA%E7%9C%8B%E6%B3%95%E5%90%A7%EF%BC%8C%E6%88%91%E5%B9%B6%E6%B2%A1%E6%9C%89%E6%B7%B1%E5%85%A5%E4%BD%BF%E7%94%A8%E8%BF%87%E8%BF%99%E4%B8%A4%E6%AC%BE%E8%BD%AF%E4%BB%B6%EF%BC%88%E4%BD%BF%E7%94%A8%E6%97%B6%E9%97%B4%E5%8F%AF%E8%83%BD%E4%B8%8D%E8%B6%85%E8%BF%87%E4%B8%80%E5%B0%8F%E6%97%B6%EF%BC%89">https://www.jianshu.com/p/7d38e3435978说说个人看法吧，我并没有深入使用过这两款软件（使用时间可能不超过一小时）</a></p><h4 id="Onenote同步存在问题"><a href="#Onenote同步存在问题" class="headerlink" title="Onenote同步存在问题"></a><strong>Onenote同步存在问题</strong></h4><p>这一点应该是一直存在的我单独在iPad上并没有明显的察觉到（能察觉到个鬼）但网友一直吐槽这个问题</p><h4 id="Onenote没有Markdown功能，好像印象笔记也没有"><a href="#Onenote没有Markdown功能，好像印象笔记也没有" class="headerlink" title="Onenote没有Markdown功能，好像印象笔记也没有"></a><strong>Onenote没有Markdown功能，好像印象笔记也没有</strong></h4><p>Markdown功能我是在纯纯笔记之后才了解到觉得写笔记非常的方便，这篇文章也是用了Markdown</p><h4 id="Onenote自由度高"><a href="#Onenote自由度高" class="headerlink" title="Onenote自由度高"></a><strong>Onenote自由度高</strong></h4><p>自由度高对于一些人是好事，这样可以将Onenote做得更好看但是对于强迫症的我来说，简直是灭顶之灾更改标题后，点击下面的文本框，点哪输入哪还得非常纠结的点击标题下面。。。</p><h4 id="印象笔记的剪藏功能"><a href="#印象笔记的剪藏功能" class="headerlink" title="印象笔记的剪藏功能"></a><strong>印象笔记的剪藏功能</strong></h4><p>我在MarginNote群里看见几位群友的讨论他们都说，印象笔记现在更像是一个网盘+搜索软件剪藏功能也非常的好用</p><h4 id="界面"><a href="#界面" class="headerlink" title="界面"></a><strong>界面</strong></h4><p>Onenote的笔记本非常的清晰，做笔记也方便查找印象笔记只有标签，不算特别方便然后印象笔记给我的感觉就是非常臃肿</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/2ef9b8d193bf24f9c50f5f31e522ae51" alt="Wolai我来-一款国产笔记软件（吐槽Onenote、印象笔记-等软件）"></p><p>这类似Apple的备忘录软件但备忘录更加干净</p><p><img src="https://cdn.sspai.com/2020/08/21/article/eb0efce1dca8fbe637b4129801198bf4?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="Wolai我来-一款国产笔记软件（吐槽Onenote、印象笔记-等软件）"></p><h4 id="印象笔记抢注Notion"><a href="#印象笔记抢注Notion" class="headerlink" title="印象笔记抢注Notion"></a><strong>印象笔记抢注Notion</strong></h4><p>这应该是算恶性竞争了最近关于超级笔记，印象也开始做活动不知道各位下手了没有</p><h3 id="Bear"><a href="#Bear" class="headerlink" title="Bear"></a><strong>Bear</strong></h3><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/9db8e036d4d74cfea47fec700ca29624" alt="Wolai我来-一款国产笔记软件（吐槽Onenote、印象笔记-等软件）"></p><p>我没用过的软件</p><h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a><strong>Typora</strong></h3><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/ab7bb02f5370e55df3384fb4ce564f6b" alt="Wolai我来-一款国产笔记软件（吐槽Onenote、印象笔记-等软件）"></p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/f80a9f9816ff415e7570ec0b10284601" alt="Wolai我来-一款国产笔记软件（吐槽Onenote、印象笔记-等软件）"></p><p>我未来会使用的软件</p><h3 id="Bear和Typora"><a href="#Bear和Typora" class="headerlink" title="Bear和Typora"></a><strong>Bear和Typora</strong></h3><h4 id="Bear-1"><a href="#Bear-1" class="headerlink" title="Bear"></a><strong>Bear</strong></h4><p>这里需要引用青桔皮儿 关于效率类软件的文章<a href="https://zhuanlan.zhihu.com/p/156042742Bear%E5%9C%A8%E9%9D%92%E6%A1%94%E7%9A%AE%E5%84%BF%E7%9C%BC%E9%87%8C%EF%BC%8C%E6%98%AF%E4%B8%80%E6%AC%BE%E4%B8%8D%E9%94%99%E7%9A%84Markdown%E5%A4%87%E5%BF%98%E5%BD%95%E8%BD%AF%E4%BB%B6%E6%BC%82%E4%BA%AE%E7%AE%80%E6%B4%81%E8%BD%BB%E9%87%8F%E4%BD%86%E6%98%AFBear%E6%98%AF%E8%8B%B9%E6%9E%9C%E5%B9%B3%E5%8F%B0%E7%8B%AC%E5%8D%A0%E8%BF%99%E9%87%8C%E5%81%9A%E4%B8%AA%E8%BD%AF%E6%8E%A8%E5%B9%BF-%E8%AE%B0%E6%97%B6%E5%85%89">https://zhuanlan.zhihu.com/p/156042742Bear在青桔皮儿眼里，是一款不错的Markdown备忘录软件漂亮简洁轻量但是Bear是苹果平台独占这里做个软推广-记时光</a></p><blockquote><p>这是我在酷安发现的一款软件，现在已经支持ios和android，未来可期，永久价格便宜，同步坚果云或者Onedrive可能一般人（例如我），苹果的备忘录已经够用了</p></blockquote><h4 id="TYpora"><a href="#TYpora" class="headerlink" title="TYpora"></a>TYpora</h4><blockquote><p>可能是一款不错的Markdown软件</p></blockquote><h4 id="简单BB"><a href="#简单BB" class="headerlink" title="简单BB"></a>简单BB</h4><blockquote><p>青桔皮儿里面提到了Latex编辑器，比较专业的软件我用不上所以不提了，就像Typora一样，没用过的都不好多评论然后MarginNote是一款不错的阅读器GoodNotes和Notability是不错的手写笔记软件</p></blockquote><h3 id="MWeb"><a href="#MWeb" class="headerlink" title="MWeb"></a>MWeb</h3><p>怎么说吧，个人还是挺依赖这款软件的但我知道Markdown（名字就是这个）有双栏的时候，瞬间就不香了最早在iPad选择笔记类软件<a href="https://zhuanlan.zhihu.com/p/148076887%E4%B8%BB%E8%A6%81%E6%98%AF%E5%9B%A0%E4%B8%BAMWeb%E6%94%AF%E6%8C%81%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%9B%B4%E5%A4%9A%E5%90%8C%E6%97%B6%E8%83%BD%E5%A4%9F%E5%8F%91%E5%B8%83%E5%88%B0%E8%AF%AD%E9%9B%80%E3%80%81%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0">https://zhuanlan.zhihu.com/p/148076887主要是因为MWeb支持的快捷键更多同时能够发布到语雀、印象笔记</a></p><h3 id="Notion"><a href="#Notion" class="headerlink" title="Notion"></a><strong>Notion</strong></h3><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/eea09f48ae9b43568dd884aecf59f372" alt="Wolai我来-一款国产笔记软件（吐槽Onenote、印象笔记-等软件）"></p><p>我在iPad上使用的，客户端经常掉线，得用浏览器打开在iPad的Safari里，并不支持拖拽功能分栏功能同时是国外的服务器，连接确实存在问题还有就是没有汉化，对我这种英语渣渣非常的不友好功能多，上手难MarginNote也有人说难使用，emmmm….</p><h3 id="RoamResearch"><a href="#RoamResearch" class="headerlink" title="RoamResearch"></a><strong>RoamResearch</strong></h3><p>听过但是没用过¥15/mouth望而却步MarginNote和Wolai都有对应的双向链接的功能</p><h3 id="寒舟事件"><a href="#寒舟事件" class="headerlink" title="寒舟事件"></a><strong>寒舟事件</strong></h3><p>在吹Wolai之前，我觉得可以说说寒舟事件<a href="https://v2ex.com/t/674611#reply61">https://v2ex.com/t/674611#reply61</a></p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/e692c8d60a011f287167af657dbfa361" alt="Wolai我来-一款国产笔记软件（吐槽Onenote、印象笔记-等软件）"></p><p><img src="https://cdn.sspai.com/2020/08/21/article/335d634fbe3a74c308b1f2f8f9094a4a?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="Wolai我来-一款国产笔记软件（吐槽Onenote、印象笔记-等软件）"></p><p>寒舟这一款软件像素级抄袭，最后倒在舆论中而Wolai这款和Notion及其相像的软件又如何呢？<a href="https://www.zhihu.com/question/407132273/answer/1352638849%E8%BF%99%E6%98%AF%E4%BD%9C%E8%80%85%E5%9C%A8%E7%9F%A5%E4%B9%8E%E4%B8%8A%EF%BC%8C%E5%AF%B9%E2%80%9C%E5%A6%82%E4%BD%95%E8%AF%84%E4%BB%B7%E3%80%8C%E6%88%91%E6%9D%A5">https://www.zhihu.com/question/407132273/answer/1352638849这是作者在知乎上，对“如何评价「我来</a> wolai.com」这个产品？”问题的回答其他回答和这篇内容一样并没有多少营养可看可不看</p><hr><h2 id="Wolai"><a href="#Wolai" class="headerlink" title="Wolai"></a><strong>Wolai</strong></h2><h3 id="创始人的百度百科"><a href="#创始人的百度百科" class="headerlink" title="创始人的百度百科"></a><strong>创始人的百度百科</strong></h3><p><img src="https://cdn.sspai.com/2020/08/21/article/648cae527c0d83d5c88ff367f7b38c81?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="Wolai我来-一款国产笔记软件（吐槽Onenote、印象笔记-等软件）"></p><p>我最早的时候和小群众一样担心Wolai是否靠谱是否会卷铺盖走人，而我看着丢失的数据大哭但是看到创始人的词条，就觉得应该不是孤立无援的个人开发者</p><h3 id="数据安全"><a href="#数据安全" class="headerlink" title="数据安全"></a><strong>数据安全</strong></h3><p>虽然我看不懂但应该没什么问题吧</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/53bed8d2a35de68780cd0056977dab25" alt="Wolai我来-一款国产笔记软件（吐槽Onenote、印象笔记-等软件）"></p><h3 id="是否侵权"><a href="#是否侵权" class="headerlink" title="是否侵权"></a><strong>是否侵权</strong></h3><p>有人扒过前端，应该是没什么问题，而寒舟那样像素级抄袭，呸至于功能上Moba类游戏Dota和LOL我个人感觉是，一些火热的软件功能相近并没有什么不妥就像是最近的双向链接而印象抢占Notion图标（是这个吗），发出超级笔记功能，呸</p><h3 id="界面-1"><a href="#界面-1" class="headerlink" title="界面"></a><strong>界面</strong></h3><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/677d81777f3b8c3da9806f7c8af7259b.png" alt="img"></p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/b9fd6eb4ec32321460cfa2c24e01da68.png" alt="img"></p><p><img src="https://cdn.sspai.com/2020/08/21/9e7aad6e91d8b0fbed316006e258c1c4.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/fd281a88eff8374cc51023d1dac8a981.png" alt="img"></p><p>Wolai也是有着无限层级这个是非常方便的但是目前还有有db功能，似乎还没有提上日程但对我来说，目前已经够用了</p><h3 id="页面关系图"><a href="#页面关系图" class="headerlink" title="页面关系图"></a>页面关系图</h3><p><img src="https://cdn.sspai.com/2020/08/21/ec757a27ae598433bdda20a865899854.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/e499dfdd582e44412d5e74fc2b9177a4.png" alt="img"></p><p>页面关系图</p><h3 id="惊人的更新速度"><a href="#惊人的更新速度" class="headerlink" title="惊人的更新速度"></a><strong>惊人的更新速度</strong></h3><p><img src="https://cdn.sspai.com/2020/08/21/bc95241a4e256e7ab728bb54efa52680.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>我是7月20日注册，见证了21日绑定邮箱功能和22日密码功能在内测的时候，这样应该能增加用户黏性，保持着期待</p><p>现在已经更新了<strong>黑夜模式、双向链接、数学公式、移动端</strong></p><h3 id="我觉得的不足"><a href="#我觉得的不足" class="headerlink" title="我觉得的不足"></a><strong>我觉得的不足</strong></h3><p>大概是db功能还没有开发、移动端还不完善（Notion的移动端太差劲了）群里提到UI的问题（我觉得现阶段应该是优先功能和bug）</p><h3 id="我的界面"><a href="#我的界面" class="headerlink" title="我的界面"></a><strong>我的界面</strong></h3><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/fa9c72819887d38822700c778c538b2e.png" alt="img"></p><p><strong>我觉得不错的地方</strong></p><ul><li>悬浮目录（大纲）</li><li>国内服务器（打开、导入导出都比较方便）</li><li>是国内的软件（意味着能离开发团队更近，有什么想法都容易沟通</li></ul><h3 id="我的期待"><a href="#我的期待" class="headerlink" title="我的期待"></a>我的期待</h3><p>可能是关于“分享”这一功能<br>其实我的内容应该补上语句，但是忘了<br>语雀的方便之处就是，游客可以很轻松的看到我分享的内容<br>而Notion好像得是用户才能打开<br>Wolai（分享、导出功能还没有开发</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wolai </tag>
            
            <tag> 软件教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>弹力带训练</title>
      <link href="/2021/12/11/ckyyiqyhm0005f8ue6cvm6kd6/"/>
      <url>/2021/12/11/ckyyiqyhm0005f8ue6cvm6kd6/</url>
      
        <content type="html"><![CDATA[<h2 id="弹力带背部训练"><a href="#弹力带背部训练" class="headerlink" title="弹力带背部训练"></a>弹力带背部训练</h2><h3 id="动作一"><a href="#动作一" class="headerlink" title="动作一"></a>动作一</h3><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211211232411212.png" alt="image-20211211232411212"></p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211211232419852.png" alt="image-20211211232419852"></p><span id="more"></span><h3 id="动作二"><a href="#动作二" class="headerlink" title="动作二"></a>动作二</h3><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211211232525612.png" alt="image-20211211232525612"></p><h3 id="动作三"><a href="#动作三" class="headerlink" title="动作三"></a>动作三</h3><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211211232609677.png" alt="image-20211211232609677"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 健身 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文华财经公式——多头排列和空头排列</title>
      <link href="/2021/12/11/ckyyiqyhw0009f8uebdey24yu/"/>
      <url>/2021/12/11/ckyyiqyhw0009f8uebdey24yu/</url>
      
        <content type="html"><![CDATA[<p>MA5:MA(CLOSE,5);<br>MA10:MA(CLOSE,10);<br>MA20:MA(CLOSE,20);<br>//MA4:MA(CLOSE,N4);<br>//MA5:MA(CLOSE,N5);<br>//MA6:MA(CLOSE,N6);</p><p>//价格多头排列，5周期10周期线用红色填充<br>FILLRGN(MA10&gt;MA20&amp;&amp;MA5&gt;MA10,MA5,MA10,COLORRED);<br>//空头<br>FILLRGN(MA10&lt;MA20&amp;&amp;MA5&lt;MA10,MA5,MA10, COLORGREEN);</p><p>双均线交叉变色</p><p>MA5:MA(C,5);<br>MA15:MA(C,15);<br>DRAWCOLORLINE(MA5&gt;MA15,MA5,COLORMAGENTA,COLORGREEN);<br>DRAWCOLORLINE(MA5&gt;MA15,MA15,COLORMAGENTA,COLORGREEN);</p><span id="more"></span><p>文华7预警公式</p><p>MA5:MA(CLOSE,5);<br>MA10:MA(CLOSE,10);<br>MA20:MA(CLOSE,20);<br>//MA4:MA(CLOSE,N4);<br>//MA5:MA(CLOSE,N5);<br>//MA6:MA(CLOSE,N6);</p><p>//多头预警<br>MA10&gt;MA20&amp;&amp;MA5&gt;MA10,NOTICE;</p><p>MA5:MA(CLOSE,5);<br>MA10:MA(CLOSE,10);<br>MA20:MA(CLOSE,20);<br>//空头预警<br>MA10&lt;MA20&amp;&amp;MA5&lt;MA10,NOTICE;</p>]]></content>
      
      
      
        <tags>
            
            <tag> 文华财经公式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人生前35年的个人发展方法论</title>
      <link href="/2021/12/08/ckyyiqyiy003zf8uedpuh3qhz/"/>
      <url>/2021/12/08/ckyyiqyiy003zf8uedpuh3qhz/</url>
      
        <content type="html"><![CDATA[<h2 id="人生前35年的个人发展方法论"><a href="#人生前35年的个人发展方法论" class="headerlink" title="人生前35年的个人发展方法论"></a>人生前35年的个人发展方法论</h2><p>原创 镇长本人 大树乡长  </p><p>这一篇要付费，两个原因：</p><p>\1. 法不轻传：小镇不仅总结自己前35年经历，还请教了十几位在各方面有所成就的朋友，有省市高考状元顺利走下来的，也有二本逆袭的，还有辞去公职快财富自由的。</p><p>\2. 少一些无谓争吵：愿意付费就说明信得过小镇，对其中一些争议性和敏感问题，小镇就可以说得更为直白。</p><p>这一篇的有效信息密度，可能比近期文章加起来还高，且还没有车轱辘的废话。相信这一篇长文，哪怕再过10年，也会对大家有所帮助。</p><p>为什么要专门讲前35年，小镇觉得，无论从职业发展还是个人成长来说，前35年都是至关重要的，然而又是最迷茫的阶段。等撞得头破血流、想明白了，岁月一去不复返了。</p><p>这就是家庭传承的重要性，少走弯路甚至比有钱有权更加重要。</p><span id="more"></span><p>小镇出生于某个乡镇普通家庭，初中才随父母进城，由村小镇小起步直至清华，工作十几年经历颇多，小镇的发展早就超过了父母的预期，从上大学开始就没人指点，自己摸索着走了很多弯路。</p><p>写这一篇，不仅是为了即将走入大学、走入社会，或是在社会中迷惘迷失的读者朋友们，也是为了纪念当年不知所措的自己。</p><p>关注小镇的朋友们60%年龄在18岁到35岁，还有40%的朋友孩子应该正处于35岁前的阶段。所以，小镇更觉得今天的分享是有价值的。</p><p>随着社会发展、每个人能力的进步，社会竞争必然越来越激烈，人与人也一定会更加分化，分析中国社会未来竞争多么难、为什么难没什么价值，总不能因为难就放弃吧。</p><p>作为个人需要做的就是强大自己，不要浪费时间在愤世嫉俗或哀叹后悔上。小镇也因此开门见山，直接把重点放在怎么办上。</p><p>本文大概包括几部分：</p><p>\1. 一些典型的认知误区</p><p>\2. 选错专业、学校不好，该如何在大学和社会做补救</p><p>\3. 影响一生的35岁前分阶段个人发展指南，家长该怎么做？超过35岁又该怎么办？</p><p>4.一些个人持续成长的基本方法</p><p>以下是正文：</p><p>一、一些认知误区</p><p>小镇更新大树乡长两个多月，回复的读者留言大几千条，更不用说看到没回复的，大概明白一些认知的误区，这些误区严重干扰了我们个人发展。</p><p>第一个：不要把个人发展寄托在国家身上</p><p>很多人总把希望寄托在国家身上，说白了就是缺乏自我解放的勇气，就想着天上掉救世主，想着国家拉平贫富差距、压低房价最好免费给房子、把工作给安排好，但是可能吗？</p><p>中国多少人口，资源有多少，好的机会又有多少？更何况互联网时代我们比较的对象已经不是同村的富户，而是整个中国最顶尖的一小撮人，无论如何不会满足。国家的一切努力仅仅是延缓差距扩大、把下限提高一点。</p><p>还有的朋友想着要为国家做贡献，担心如果自己不去学某某专业，国家怎么发展。先照顾好自己就行。现在的中国已经过了人才匮乏的时候，科技进步也更多靠集体、资金投入来实现，个人的影响微乎其微。</p><p>无论是期盼国家来拯救、还是觉得国家需要自己来拯救，这都是自我想法而已。</p><p>每个人都发展好自己，国家自然强盛了。但是切记，这里说的发展自己，不是不择手段，这不光光是作为中国人的底线，更是警告，毕竟无论叛国还是违法犯罪，未来都将难逃法网。</p><p>第二个，是认清国家和个人思考角度的不同</p><p>这是一个非常普遍的误区，很多人觉得国家怎么能这样呢？事实上，国家思考角度和个人是不一样的。</p><p>比如关于大学前教育。对国家来说，作用就两个：基本的现代素养教育和筛选。</p><p>前者其实很容易，高考及格就合格了；更重要的是筛选，国家希望选择更有潜力的人去接受高等教育。</p><p>但是这里就出现了一个问题，学习能力相对低的人可以通过消耗更多时间取得跟学习能力强的人类似的成绩，校外培训等加剧了这种现象，这也是国家打击互联网进入校外培训的原因之一。</p><p>大学以前的知识密度非常低，高中就算人人考满分也毫无价值，反而消耗了国民持续学习的潜力。对国家而言，最理想的是，大家每天都只学6小时，就看谁同样时间学习更好。但是对个人和家长是绝不甘心的，这就是矛盾所在。</p><p>国家和个人认知的不同，大家一定要多多思考，个人是不可能逆势而为的，摆脱个人思考的局限性，理解清楚国家是怎么思考的，这样才能更好的发展自己。</p><p>谩骂解决不了问题，如果只愿意相信自己希望的，那只能祝好运了。</p><p>第三个，是非常残酷的事实：人和人差距极大。</p><p>比如上面所说的，在学习上，有的人就是用更少的时间就能拿到不错的成绩，有的则需要2倍甚至更多的时间。</p><p>其实这种2倍时间差距还是刚刚开始，大学以前，学习的东西就那么点，几十年的教育有太多的方法总结，考试难度又不断下降，在这种情况下，从小学到高中差距都越来越大了，何况进入大学、开始工作呢？</p><p>在小学，一天的学习内容对于能力强的可能就需要2个小时，那差一点的花4个小时，也没多累；</p><p>到了初中，能力强的需要4小时，差一点的8个小时，已经有些吃力了；</p><p>到了高中，经过多轮筛选，家长压力、社会压力巨大，即使能力强的也需要一天8个小时，差一点的还能有16个小时吗？</p><p>这就是为什么很多孩子一上初中、高中成绩就直线下降的原因，核心就是小学基础没打好。</p><p>九年义务教育，除非像北上之类需要进入好的初中，否则小学的成绩没有意义，关键是好的学习习惯和方法。如果家长在孩子小学的时候不注意孩子学习方法和效率的培养，危机就在一张张满分后面越逼越近。</p><p>家长们尽快调整心态吧，千万不要觉得自家孩子幼儿园、小学都是满分，就对孩子报以过高的期待，甚至觉得是学校教得不好。得看看自家孩子花了多长时间。</p><p>上了大学，知识的浓度更大，知识也不再像大学以前就那么点，而是无限广博甚至可以达到人类认识的最边缘。到了这时候，就会深刻的感觉到，都是985，但就是有人一小时解决的问题，其他人花一天都未必能行。</p><p>从大学前的有限，到大学接触无限的世界，从被动到主动，18岁后的几年就是关键的转折，很多人心态就在这里崩了。小镇看过一个数据，在这个阶段，很多人心理健康出现了严重问题，如果处理不好，就很难迎接漫长的人生。</p><p>工作以后的差距就更别提了。</p><p>这个世界就是这么残酷，越来越丰富、方便的信息获取，以及高速发达的辅助工具，进一步拉大了人与人之间的差距。</p><p>在这背后，认知能力成为更为根本的差距。智力、思维、效率、方法、对工具的利用、对信息的筛选等等，这样的差距需要早点认清，更需要尽快弥补。</p><p>但是也不用太紧张，作为普通人只需要超过同样普通的大多数人就可以了，更何况很多人是不愿意正视自己、拒绝改变的，这就是愿意改变人的宝贵机会。</p><p>而小镇自认无论是思维还是方法乃至效率都不差，对大家也算对得起自己的良心，不糊弄大家，一起交流成长，终归会有收获。</p><p>第四个，是时代加速变化，老经验靠不住了。</p><p>长辈一定要尊重孩子，多跟孩子交流，向孩子学习。时代变化太快了，老经验不行了，更不用说大多数老一辈根本不具备指导孩子的能力。</p><p>尤其现在已经进入数字时代，变化远比过去快太多了。</p><p>比如电子书，十几年了大家还是喜欢实体书，但是这几年大都用手机看书了；又比如银行卡、信用卡一直没能替代纸币，然而这才2、3年，电子支付就成了主流，大家已经多久没碰纸币？</p><p>这就是时代的变化，过去不接受时代的改变，不会涉及到根本的生存与发展；但是现在不接受改变试试？</p><p>开个小店，如果连个二维码都没有，客人吃完饭都不好收钱，人家下次就不来了；去年疫情，没有健康码，出行该多么不便；更不要说数字化对个人效率的巨大加成。</p><p>当然可以批评数字化对一些群体不利，国家也确实应该做好，但是相比让国家调整，我们自己努力不更容易吗？就算年纪大一点，真的就搞不明白一部手机吗？</p><p>不要低估自己的潜力，更不要把时间浪费在自怨自艾，我们面临的是一个必须终身学习、学习到死的新时代。</p><p>古代可以一辈子不学习，爷爷辈可以10年不学习，父母辈可以3年不学习。现在，一年不学习、一个月不学习就可能被明显的拉开差距。</p><p>怎敢不学习，怎敢不适应变化？</p><p>第五，精力、意志力是有限的，不要高估自己</p><p>很多人应该都有经历，比如背单词，规划挺好，一百天3千单词每天30个，后来变成每天50个、100个、200个，最后考试了，还是停在第一个单词。</p><p>人的精力是有限的，这就决定了每天有效学习、工作时间是有限的。万万不能想着把很多事压在一天，而是要分散开，每天都做一点。</p><p>精力和意志力总量很难提升，过期自动作废。今天不用，第二天也不会多一点，今天用了，第二天也不会少。</p><p>更不要学那些骗人的天天4点起床，每天学习、工作还锻炼16小时的所谓励志，人家拍段子骗培训费呢，怎么能真信呢？</p><p>比如小镇，被同事认为爆发状态能一个人顶几个处，在工作强度很高的地方，都是被公认的“卷王”，小镇甚至可以做到连续几年每天睡5个小时照样精力充沛。</p><p>但是，就算小镇，也做不到那种离谱的、机械的工作安排，让一个人每天强迫性的按日程表完成是不可能的，这需要消耗最宝贵的意志力，而意志力需要靠休息、放松恢复，所以不必因为娱乐而愧疚，松紧结合才是正确的。</p><p>切记，不要高估自己，每天适度，尽量不突击。就比如小镇写大树乡长，每天半小时就够了，但是如果集中到一天，谁都受不了。就像上周末，小镇大树乡长3篇加上工作的整整写了3万字，哪能周周这么干。</p><p>二、选错专业、学校不好，该如何在大学和社会做补救</p><p>开门一句话：不要把时间浪费在沉默成本里，后悔有什么用？</p><p>考上二本，后悔高中没好好学习，然后转头沉迷游戏，虚度时间；等到勉强毕业，又后悔大学期间没好好实习，结果找不到好工作；找不到好工作，自暴自弃，等到30岁看到当年自己一样境遇的买车买房又后悔过去没努力，再然后35岁危机到来。</p><p>难道一辈子就沉迷在后悔里出不来了吗？</p><p>人一辈子长着呢，区区高考失利算得了什么，更大的挫折还在后面呢，摔了一跤就应该醒悟过来赶紧强健身体，否则下一个更大的坑更跳不过去。</p><p>过去失利了就好好对照接下来的35岁人生指南，对照下自己在这个年龄应该具有什么样的能力和层次，自己为什么没达到，然后往前翻，逐一对照，然后抓紧弥补。</p><p>所以在下一部分，小镇格外强调作为家长一定要在孩子上高中之前培养孩子自信自强的承受力，敢于正面挫折与挑战，才是最重要的。</p><p>这个世界，专业不好、学校不好、甚至没考上大学、开始的工作也不好的人才是大多数，这就是常说的普通人啊。</p><p>但是普通人也是可以幸福、可以进步的，没有必要跟顶尖的人比，我们需要的是跟自己比，每天进步一点。人生的改变很多是偶然的，但是必然事件就是自己是否努力。</p><p>谁也不知道自己未来如何，比如小镇30多年前在村小上学的时候，哪里想的到能来北京上学、甚至走进清华。当小镇在乡镇里开着胎线都快磨没的面包车走村串户的时候，又怎么能想到会进入中央国家机关？小镇哪怕2年前，也没想到真能有这么多读者愿意看小镇的唠叨，更想不到小镇还真的能2个月写了这么多。</p><p>小镇说的不是鸡汤，而是真正的现实。</p><p>选错专业了？学校不好？</p><p>那就时刻关注先进生产力发展，自学更有用的技能，外语、计算机甚至视频剪辑、写作文案等等都行。</p><p>现在大学转专业没那么难，转专业或者努力考研去喜欢的专业、更好的学校就是了。实在不行考公务员，公务员考试没那么难，说白了就是高一难度，能考上大学就有机会。</p><p>没考上大学？去了专科、职业学校？</p><p>国家绝不会禁止复读，即然失败了，绝大多数人家都不至于不能供一个孩子再读一年高中，真的生活困难，去找政府。高中那点东西，只要够拼，一年时间足够考上二本。专科、职业学校也一样，专升本的路子一直开着，高级技术工人照样年入几十万。</p><p>大学没努力，已经毕业了，工作不好？</p><p>抓紧调整啊，多去面试，看看人家HR打击的是哪一点，去弥补，学历不行考个非全日制硕士，管什么认不认可，总比二本强吧。</p><p>人没斗志、脸色不好、身材被歧视？那就去锻炼、去跑步、去读书，去改变。</p><p>工作搞不懂、没人教？那就加班努力学啊，总不能不会就不学了吧，都是成年人了，不能耍小孩子脾气。</p><p>总之一句话，不要陷进沉没成本，一定要勇敢的面对困难，只要现在开始努力，最多3年一定截然不同。</p><p>如果不努力，神仙都救不了，何况小镇这个凡人。</p><p>三、影响一生的35岁前分阶段个人发展指南</p><p>如果按照小镇说的尽量去做，不用全部实现，只要差不多，什么高考、35岁危机不是难事。6岁以前，每个家庭差别太大，不展开了，核心就是健康成长、适度教育就行。</p><p>就算超过35岁也不要紧，查漏补缺，照样有用，实在不行还可以用在自己孩子身上。</p><p>最核心的：每个阶段要求都不同，每个阶段要比上个阶段有明显提升，要完成基本的目标，一定要有明显超越上个阶段的能力，这就要求必须提前筹划。</p><p>6个阶段，以专科以上展开，读研或者其他参照。</p><p>学习三阶段：</p><p>6-15岁：义务教育，养成习惯和方法；</p><p>15-18岁：高中，在此一搏；</p><p>18-22岁：大学，提前筹备就业；</p><p>18岁前是父母主导，18-22岁则是父母放手、孩子独立走向社会的关键过渡。</p><p>工作三阶段：</p><p>前3年（23-25）：专业能力</p><p>中5年（26-30岁）：能力升级、复合化</p><p>后5年（31-35岁）：个人品牌、稀缺能力</p><p>小镇还在经历35到40的阶段，就不多说35岁以后的事了，何况最关键、最迷茫的就是前35年，以后各有各的际遇、也应该活明白了，就无须小镇多言了。</p><p>1.6-15岁的义务教育阶段</p><p>培养好的学习方法和思维方式最重要，一定要提高效率，正如前面所说，小学和初中知识密度太低了，多花时间也能差不多，但是一旦上了高中就没法增加时间投入，就会拉开很大。</p><p>这个时候，孩子还在成长，无论多早熟都没有稳定的观念，这时候父母的作用是最大的，也是孩子一生中，父母最能影响孩子、指导孩子的时期。</p><p>这一阶段，孩子的学习成绩重要，但不应该是家长抓的主线，学习成绩是果、不是因，我们要抓根本。</p><p>我们每一个人都要想清楚，一个人最漫长的岁月一定是靠自己独立走过的，现代社会的急速发展直接导致大多数上一代越来越没有能力指导下一代。</p><p>因此，作为父母，为子女负责，就必须在15岁前，着重培养孩子自立能力，简单地说就4项：有感情、自学、自信、自由。</p><p>有感情：要有正确的价值观，要有是非观念，明白对错善恶，能够感受到爱、能够勇敢的被爱。这是很多成年人都缺乏的，一个充满感情的成长环境，孩子不会差的。</p><p>自学：不多说了，我们面临的是学习到死的时代，18岁以后没有任何人监督学习，唯有自我监督，一旦松懈，没人在乎。</p><p>自信：不胆怯、敢于挑战一切，失败也能再次站起来，这也是很多人匮乏的，很多人各种后悔过去，就是没有勇气正面当前的困难，就算穿越回过去，就真能行吗？</p><p>自由：就是要掌控自己，没有约束不是自由，很多孩子上了大学、毕业后走上歧路，就是缺乏自由的意识，对自己丧失掌控。</p><p>按照上面4个为核心目标引导、培养孩子，成绩不会差，就算小学、初中比不上一些疯狂应试的也没关系。</p><p>怎么做？相信作为成年人，结合自己的经历大概能有个模糊的想法，就按照心里的想法去思考，核心做三件事：</p><p>第一，打好基础，养成好习惯，给孩子支持：</p><p>211以上的父母对孩子的投入远高于平均，因为他们很明白未来竞争的残酷，希望所有的父母一定要重视。孩子到这个阶段，父母未来基本可以预期了，而孩子一生才刚刚开始，建议调整精力和资金分配，把重心放在孩子身上。</p><p>第二，注重思维方式方法：</p><p>不要盲目加压。千万注意不要损耗孩子潜力，盲目加压只有反效果，要适度放松。</p><p>第三，以身作则：</p><p>父母才是孩子最关键的老师，什么叫以身作则，就不必多言了。</p><p>再次强调，家长一定不能沉迷于孩子考的不错就行了，一定要搞清楚孩子怎么考好的，是靠时间还是效率？</p><p>最关键的，别信什么快乐教育，都上过学，小学初中孩子们还是很单纯的，学习不好的孩子真的快乐吗？</p><p>这一阶段最终目标：养成良好的学习习惯、健康的价值观，能够独立学习，有比较好的学习方法，提高学习效率，身体健康。</p><p>这一段核心就是父母，也是给孩子奠定一生的基础。只要这里做好了，后面当父母的会很轻松，会感受到什么叫孩子带来的惊喜。</p><p>如果已经离开这一阶段，也可以对照下，看看自己当年缺在哪里，孩子的身体、大脑以及思维需要十几年慢慢提升，但是这些事成年人一两年就足够了。</p><p>2.15-18岁高中</p><p>这里绝大多数家长就要放手了，作为一个准成年人就要开始掌控自己。</p><p>对家长而言，时刻注意孩子的情绪和身体，做好心理疏导，多了解下社会就业环境，做好兜底准备，最好亲自去目标城市和学校考察下。</p><p>另一方面需要跟孩子坦诚的交流，让孩子深刻的明白考上好大学的重要性，要孩子发自内心的认同。也别说什么考上大学就可以玩的荒唐话，考上大学才是真正无差别竞争的开始。</p><p>经过上个阶段的培养，这时候的孩子已经比一般成年人还要强大，有足够的理解能力和承受能力，能够自主的进行判断，只要认可了考上好大学的价值，凭自主学习就够了。</p><p>到了高中，绝大多数的家长就放弃给孩子答疑吧，虽然校外培训受限制，虽然培训对国家不是啥好事，但是这可是自己的孩子，砸钱找好老师吧。</p><p>这里家长以及正在求学的朋友们需要注意的是：高中尽可能别学文，除非孩子真的很厉害，比如选啥都是全市前几百名，那文理随意。高中那点东西是基础的基础，理综考200没那么难，在这里偷懒，以后有的是苦头。</p><p>这个阶段目标就一个：全力学习，高考分数越高越好，目标211以上，最低本科，这种模式下出来的孩子考上本科是理所当然的。</p><p>3.18-22岁大学阶段</p><p>恭喜成年了，从现在开始，挑战将越来越高、越来越急，如果提升不够快，那只会越来越吃力，准备迎接挑战吧。</p><p>大学仅仅是惨烈竞争的开始，作为父母除了做好兜底，建议在孩子进入大学前一定要跟孩子做一次沟通，坦诚的讲讲自己的遗憾，经过上面培养的孩子有足够的感情去理解，也有足够的自信去承担压力。</p><p>一定要明白无论去任何大学，尤其是越不好的大学，绝不能荒废，现在的就业一年比一年严酷。如果自己就在上大学，从看到这篇开始就赶紧清醒过来，就业环境比你听到的更残酷的多，哪怕985也一样，毕竟更好的学校想要竞争的工作一定更好，竞争激烈程度都差不多。</p><p>朋友曾经跟我说过，他那一家才几十亿美元市值的中型互联网公司，招聘一个在校生实习岗，仅仅1天就有两百多人投简历，甚至还有世界排名前百的名校学生。更别说应届生简历，一年比一年强，远超小镇当年。</p><p>最迟大二就要决定未来方向，就业还是继续升学，但无论哪条路，去招聘现场亲身体验下现实的打击都是必要的。</p><p>大学实在太复杂，简单说下需要做的事：</p><p>大一：好好学习，熟悉大学生活，养成好的习惯，多听讲座，多体会美好的大学生活，别急着谈恋爱。提醒下上面说的意志力和精力。</p><p>大二：钻研专业，开始向校外拓展，比如参加社会调查，去实习学技能，考证可以开始了，做一下乡野调查，接接地气。</p><p>大二可以适度谈恋爱，但是整个大学期间最好不要超过2次，女孩子尤为建议最好只谈1次，谈恋爱对女孩子影响太大了，除非想清楚了在大学期间结婚否则一定注意不能怀孕，更绝对不能走邪路。建议家长多给孩子生活费，这点钱不要省，但也别浪费，经过前面教育的孩子不至于花钱无度。</p><p>大三：每个寒暑假都要去实习，攒实习经验，最好毕业的时候能有1年的工作经验。去参加志愿活动、参加竞赛，在期刊上发论文，确定就业方向，考研的话也要开始了，提前准备毕业论文，别让宝贵的大四在论文上花太多时间。</p><p>考公务员或者准备选调的话，需要关注了。</p><p>大四：顺理成章的去做，就业、考研、考公，前面做的好的话，应该不至于迷茫了。</p><p>几个事：</p><p>学生会：</p><p>别去学生会，除非211以上学生会主席、副主席，否则尽早放弃。学生会履历无论在公司还是体制内都不是加分项。名校选调另说，但是选调进来的学生干部也是一身官僚病，一时半会这个问题解决不了。当然如果自己特别擅长、喜欢这种氛围，能够有利于留校，像这类人精应该不至于迷茫。</p><p>考研：</p><p>除了必须本硕（甚至本硕博）连读的专业，本科应该能想明白自己适不适合研究，如果不想一直读到博士，干脆就业；有些专业确实需要到硕士，那就读到硕士，总之缩短读书时间，不要逃避就业，书读不了一辈子，终归要面对现实。</p><p>打工：</p><p>可以实习，但不要做传单、家教之类只为了钱的，就算家境不好，也尽量别去，除非就准备毕业从事教师等职业。</p><p>复合型成长：</p><p>这个最为关键，也是35岁前必须实现的，需要在大学就开始培养，怎么做呢？正式的比如双学位，又或者结合自己的专业做拓展，比如说“计算机+法律”，很多互联网公司特别需要这样的处理网络安全和信息安全的人才，又或者“法律+财税”等等。</p><p>总之，多看看岗位要求，学好本专业，再丰富维度，这才有更强的竞争力。</p><p>4.工作前3年</p><p>去好公司、大平台，去学习系统、专业的能力，尤其是只有大平台、好公司，才有更多的机会碰到真正牛的人，才能有更大的视野。</p><p>前三年尽可能去大城市，因为好的公司和专业平台基本都在大城市。北上广深最好经历下，实在不行退到新一线，但是尽量别再退了，除非个人情况不同，回家更好。</p><p>这三年真的别去管收入高低，也别总抱怨比谁谁辛苦，重要的是跟对人、做对事，如果能碰到好的前辈就再好不过了，如果没有就更得自己努力。</p><p>千万别为了钱去小平台，应届生的宝贵就是可以犯错，应届生的劣势就是一张白纸，如果走了弯路，那就难了。</p><p>更关键的是，工作中5年，想找好的机会特别看中前三年的履历，如果没有大平台的背景，会更难。</p><p>怎么去？</p><p>最好是考上好大学，如果大学差了，那更要努力，靠大学实习、多认识人、多参加活动等等。</p><p>这就是为什么小镇强烈建议大学尽可能去大城市，只有大城市才有足够好的实习机会，不必因为距离太远受到限制。</p><p>更重要的是在校期间是成本最低的感受大城市生活的机会，有大学提供试错机会、便宜的住宿、足够的闲暇，这时候去感受大城市的竞争压力，培养相对紧张、高效的节奏是非常必要的，比毕业后再到陌生的大城市心里有底气的多，以后去次一级的城市也得心应手，大城市见到的东西，很可能次一级城市过1-2年才有，这就是机会。</p><p>5.工作中5年</p><p>依靠前三年的积累，要么去更大的平台，要么带团队，又或者后期可以考虑创业，但是创业一定要谨慎。</p><p>在这个阶段，专业能力培养仍然是重要的，但是需要强化复合能力尤其是管理能力，开始打造个人形象，说白了就是口碑和周围人的认知，才方便跳槽、创业、找到靠谱的人。</p><p>好的个人口碑和个人发展，才有资格拓展人脉，这将是跨越35岁危机的重要依靠。</p><p>6.工作后5年</p><p>35岁危机事实存在，但是没那么难跨越，很多人毫无感觉的就度过了。</p><p>为了跨越危机，一定要在35岁前有明显超越30岁的能力，这就需要在30岁最迟33岁就要开始准备，很多好的岗位潜在要求就是33岁，这跟企业合同期3年有关。</p><p>超越30岁，那就一定要有稀缺能力，这个阶段将是分化极为明显的阶段，做得好的可以冲击百万年收入；做不好的，尤其能力跟30岁没有明显区别的，那一定竞争不过30岁的人。</p><p>比如最有名的35岁危机职业程序员，程序员的技能更新换代很快，如果到了35岁还是只会那点东西，工资又比30岁高太多，那肯定会被淘汰。如果即懂程序、又会管理，甚至还懂业务、懂法律、懂政府，还有人脉，丰富的人生经验将远远凌驾于30岁，35岁后反而会收入暴增，体制内也是一样的。</p><p>在这个阶段，就要把个人形象打造提高到打造个人品牌了，说白了有知名度。这不是自媒体说的IP，而是泛指业内认知、个人形象，这个做得好，就算一时波折也能再起。</p><p>打造自己的品牌，也是打造个人认知，一定要终身学习，而且要学对的，别被忽悠，更别成了别人的流量，时间和认知最宝贵。</p><p>这个阶段，一定要通过反复实践摸清楚适合自己的持续成长模式。</p><p>需要更大比例的把精力调整到复合型、管理型能力上，专业能力的提升更多体现在认知能力和引导他人上。</p><p>至于35岁以后，通过上面养成好习惯的，后面的路不必多说，自己就能走明白。超过35也可以查漏补缺，能补一点是一点，起码好好教导孩子。</p><p>注意，相由心生，35岁前看父母，35岁之后，看自己。</p><p>五、一些个人持续成长的建议</p><p>\1. 养成主动学习、终身学习的习惯和能力。</p><p>学习是自己的事，以后不会有人再盯着了，会不会是自己的事，没有人会手把手的教。</p><p>\2. 坚持锻炼身体。</p><p>身体是一切的根本，简单的锻炼就会获得一生的宝贵财富，还会养成特别积极的心态，好的身体是高效率工作的前提。为什么小镇工作这么忙，还能稳定更新公众号，就是因为效率高，根本是小镇身体好，精力充沛。</p><p>不知道做什么好、迷茫的时候，那就去健身、读书吧，身体健康就是最简单的升值方式。</p><p>\3. 不断强化独立思考和判断的总体能力的培养，而不是获取特定的知识。</p><p>思考力是好东西，把问题扔给大脑，大脑会去探索，不断给出答案，而好奇心同样是个好东西，它会不断找各种各样的问题扔给大脑。这两者可以说是绝配。</p><p>可惜的是很多人把好奇心给了明星八卦、鸡毛蒜皮，把思考力给了简单背诵和参考答案，让好奇心变得和老年人一样，思考力则大致保持儿童，又如何成长？</p><p>\4. 掌握一项可以拿得出手的技能。</p><p>针对性的学习也可以给迷茫的时候找一个确定的方向。必要的时候培养第二职业能力，可以不去开拓，但是一定要有底气。</p><p>能说的很多，暂且到这吧。</p><p>人生路漫漫，交流的机会有很多，记住一点：改变自己的未来，要比一个国家容易不知多少亿倍。</p><p>小镇的话，只说给听得进去的人，也只能帮到听得进、还愿意努力的人。无论结果如何，只要十几年后回忆时不后悔就够了。</p><p>上周末正是清华大学2021年毕业典礼，小镇用作了封面。祝大家：自强不息、厚德载物。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恸</title>
      <link href="/2021/08/21/ckyyiqyj00046f8ue7bmggesn/"/>
      <url>/2021/08/21/ckyyiqyj00046f8ue7bmggesn/</url>
      
        <content type="html"><![CDATA[<p>​    感觉好难过，难过到一定程度心是真的会疼的。</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>认识规律，尊重规律，严守规律</title>
      <link href="/2021/08/13/ckyyiqyiz0043f8ue3av9htlj/"/>
      <url>/2021/08/13/ckyyiqyiz0043f8ue3av9htlj/</url>
      
        <content type="html"><![CDATA[<p>初高中的时候学习的哲学知识现在来看是精华中的精华。只可惜它如珍宝一样的东西，在那个年级里并不能深入理解和实践。</p><p>规律，一切事物发展所会遵循的东西。一切事物，自然是涵盖一切，包括人的、非人的。认识规律的过程是理性的。</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规律 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观《扫黑风暴》</title>
      <link href="/2021/08/13/ckyyiqyj2004jf8ue8ceycsmf/"/>
      <url>/2021/08/13/ckyyiqyj2004jf8ue8ceycsmf/</url>
      
        <content type="html"><![CDATA[<p>这两天有个剧很火，《扫黑风暴》，追着看了。剧情的冲击力很大。</p><p>前几年国家一直在搞扫黑除恶净化社会风气。我们一般可能感受不到国家都付出了哪些个努力，以及那些个黑恶势力有多么的张狂。这个剧能给大家一个科普。</p><p>黑恶势力是经济发展到一定阶段在某些特定环境下的畸形的产物，它们追求暴力追求特权，自然而然会腐化干部染指经济项目。像墨西哥的毒枭产业已经深入渗透到政商两界，而其政府已经没有自我矫正的能力；想德法意的黑手党也是深入政商界，日内的山口组等也是一样。</p><p>但是，在社会主义国家，黑恶势力就不能像资本主义国家那样嚣张，更不能允许它们深入腐化党政机关的干部。党的初心、党的使命就决定了它们不能长久存在，它们破坏的是党的事业、也是人民的事业。现如今国家在大力扶贫、大力发展乡村振兴，整个过程中国家会投入天量的资金和人力成本去建设，伴随的必须是把黑恶势力打掉，不然这些个资金不会流向老乡的口袋，会流向与贪官污吏河流的商人手中。</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>8.1</title>
      <link href="/2021/08/10/ckyyiqyii0023f8ue7mlh7fez/"/>
      <url>/2021/08/10/ckyyiqyii0023f8ue7mlh7fez/</url>
      
        <content type="html"><![CDATA[<h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><p>状态：佳，早上感觉头胀，就没做，一直睡到脑子清醒才做；<br>耐心：佳：<br>零错误：无；</p><span id="more"></span><h2 id="今日数据"><a href="#今日数据" class="headerlink" title="今日数据"></a>今日数据</h2><table><thead><tr><th></th><th>买卖</th><th>开平</th><th>成交手数</th><th>平仓盈亏(逐笔)</th><th>成交价格</th><th>成交时间</th></tr></thead><tbody><tr><td></td><td>卖</td><td>平今</td><td>3</td><td>75</td><td>22425</td><td>14:49:36</td></tr><tr><td></td><td>买</td><td>开仓</td><td>3</td><td>0</td><td>22420</td><td>14:49:18</td></tr><tr><td></td><td>卖</td><td>平今</td><td>1</td><td>0</td><td>22425</td><td>14:44:14</td></tr><tr><td></td><td>买</td><td>开仓</td><td>1</td><td>0</td><td>22425</td><td>14:43:54</td></tr><tr><td></td><td>卖</td><td>平今</td><td>2</td><td>50</td><td>22430</td><td>14:43:09</td></tr><tr><td></td><td>买</td><td>开仓</td><td>2</td><td>0</td><td>22425</td><td>14:42:47</td></tr><tr><td></td><td>卖</td><td>平今</td><td>1</td><td>100</td><td>22445</td><td>14:31:40</td></tr><tr><td></td><td>卖</td><td>平今</td><td>1</td><td>25</td><td>22430</td><td>14:28:24</td></tr><tr><td></td><td>卖</td><td>平今</td><td>1</td><td>50</td><td>22435</td><td>14:28:15</td></tr><tr><td></td><td>买</td><td>开仓</td><td>3</td><td>0</td><td>22425</td><td>14:27:15</td></tr><tr><td></td><td>卖</td><td>平今</td><td>2</td><td>0</td><td>22425</td><td>14:26:53</td></tr><tr><td></td><td>买</td><td>开仓</td><td>2</td><td>0</td><td>22425</td><td>14:26:29</td></tr><tr><td></td><td>卖</td><td>平今</td><td>3</td><td>0</td><td>22410</td><td>14:18:00</td></tr><tr><td></td><td>买</td><td>开仓</td><td>3</td><td>0</td><td>22410</td><td>14:17:15</td></tr><tr><td></td><td>卖</td><td>平今</td><td>3</td><td>-75</td><td>22405</td><td>14:16:45</td></tr><tr><td></td><td>买</td><td>开仓</td><td>3</td><td>0</td><td>22410</td><td>14:15:19</td></tr><tr><td></td><td>卖</td><td>平今</td><td>1</td><td>75</td><td>22410</td><td>13:55:01</td></tr><tr><td></td><td>卖</td><td>平今</td><td>1</td><td>75</td><td>22410</td><td>13:54:21</td></tr><tr><td>02</td><td>卖</td><td>平今</td><td>1</td><td>50</td><td>22405</td><td>13:53:05</td></tr><tr><td>02</td><td>买</td><td>开仓</td><td>3</td><td>0</td><td>22395</td><td>13:52:15</td></tr><tr><td>01</td><td>买</td><td>平今</td><td>3</td><td>-150</td><td>22395</td><td>13:41:07</td></tr><tr><td>01</td><td>卖</td><td>开仓</td><td>3</td><td>0</td><td>22385</td><td>13:37:23</td></tr></tbody></table><h3 id="01"><a href="#01" class="headerlink" title="01"></a>01</h3><p>操作无问题。</p><p>在伦锌结构左侧压力位和沪锌左侧压力位同时到位开空。在伦锌新高止损。</p><h3 id="02"><a href="#02" class="headerlink" title="02"></a>02</h3>]]></content>
      
      
      <categories>
          
          <category> 日总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NO.41</title>
      <link href="/2021/07/03/ckyyiqyiq0034f8ue96ls0f5b/"/>
      <url>/2021/07/03/ckyyiqyiq0034f8ue96ls0f5b/</url>
      
        <content type="html"><![CDATA[<p>周五夜盘大盈，应该是七连赢了。很开心。</p><p>我知道我终于可以成了。</p><p>往后，继续加油吧。</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 日总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>picgo设置新</title>
      <link href="/2021/07/03/ckyyiqyir0036f8ueenmd62q4/"/>
      <url>/2021/07/03/ckyyiqyir0036f8ueenmd62q4/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/image-20211111223153707.png" alt="image-20211111223153707"></p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> picgo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NO.33</title>
      <link href="/2021/06/23/ckyyiqyiq0031f8ueexn5e4yk/"/>
      <url>/2021/06/23/ckyyiqyiq0031f8ueexn5e4yk/</url>
      
        <content type="html"><![CDATA[<h2 id="盘前交易资格自我审核："><a href="#盘前交易资格自我审核：" class="headerlink" title="盘前交易资格自我审核："></a>盘前交易资格自我审核：</h2><p>警惕：以下都是用实打实的金钱亏出来的教训，不能不引起切实的重视。这些规定看似是限制，其实是一种真实的保护。</p><ol><li>盘前吵架禁止交易当节。</li><li>破戒必须隔三个夜盘才能上机。</li><li>单手超损200必须砍。</li><li>如果关键节点介入后未按预期走，或者品种自身异于板块，此时左侧高低点及时止损</li><li>当日超亏5%停机位。</li><li>连续两天停机位，禁止交易一天。</li><li><strong>单边急速行情不介入，在这种行情里亏太多了。</strong></li><li>其他引起盘前身体不舒服，头疼脑涨，反应慢的情况的，禁止当节交易。</li></ol><span id="more"></span><h2 id="当日重要区间边界"><a href="#当日重要区间边界" class="headerlink" title="当日重要区间边界"></a>当日重要区间边界</h2><p>黑色：</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210623002820.png" alt="image-20210623002820203"></p><p>有色</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210623002841.png" alt="image-20210623002840927"></p><p>实际操作情况：</p>]]></content>
      
      
      <categories>
          
          <category> 日总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何正确地分析区间的真正的有效边界</title>
      <link href="/2021/06/23/ckyyiqyiu003mf8ue1wxz46bq/"/>
      <url>/2021/06/23/ckyyiqyiu003mf8ue1wxz46bq/</url>
      
        <content type="html"><![CDATA[<p>正确分析震荡区间的真正的有效边界，这个命题真是太重要了。</p><span id="more"></span><h2 id="例子01"><a href="#例子01" class="headerlink" title="例子01"></a>例子01</h2><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210623001508.png" alt="image-20210623001508104"></p><p>前期的低点①170.32是重要的区间低点，后期②再170.34弹起是一次确认，③弹起失败，但是有收回的动作，见下图：</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210623002106.png" alt="image-20210623002106537"></p><p>170.03破了172.32，从而走出原大区间。170.03的小幅整理是对172.32的回应。之后169.48继续新低，回调的170.01是对上一个大震荡区间的最后回应。至此，170.01作为之后区间的高点。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>模板</title>
      <link href="/2021/06/19/ckyyiqyip002zf8ueehnz0khh/"/>
      <url>/2021/06/19/ckyyiqyip002zf8ueehnz0khh/</url>
      
        <content type="html"><![CDATA[<p>还是太着急了，耐心不够。我常说，不到位置不介入，你想要的价格一定会给你，到了位置不要犹豫，除了问题及时处理。但是，我没很好的做到这些啊。</p><p>着急了就会频繁开仓，机会哪能那么多，做的多错的多，就算赚钱的都做到了，亏钱的也会磨平利润。以急跌之后的行情来说：</p><p>急跌过程中，一般是去找有色左侧重要的可靠的关键位置以及伦锌左侧的关键位置。如果急跌到这些位置，沪锌自身也到关键位置，那是可以介入试探的，新低止损。如果急跌过程中在一个不知名的位置反弹了，那是没法去介入的。</p><p>接着，市场会在之前急跌之后反弹一下，形成一个低点和高点，此时，我就有了参考，等再次运行到低点的时候尝试去找共振的多单，等再次运行到高点的时候尝试去找共振的空单。在这两个点之间的行情不要参与。</p><span id="more"></span><p>今晚把这个月的所有单子都过了一遍，直觉上给我一种想法：废单太多，就是严格意义上的单子不做的那种。两百五十八笔，只有十八笔是严格意义上完全符合的，当然还有一些严格意义上的机会是我没做进去的。这十八笔是必然会赚钱的。其他的也分情况：和严格意义上的要求是高度相似而不完全符合的，这部分我没有统计，明天再统计一下。真正意义上要排除的是完全和要求不一样的单子，比如板块要求多，实际上空的。这两种明天要重点统计一下。</p><p>按严格意义和高度相似来看，机会也是不多的，一天完全没有那么多要做的，有时候一节里一单机会都没有。我现在要把那部分似是而非的单子剔除出去，这部分单子是癌症。</p><p>再次更详细地过了一遍。是有点自己把自己搞复杂了，什么单边震荡的。这个方法最初的样子就是在重要区间位置去搏反弹。有色大结构的高低点构成的区间上去介入。有时候嵌套了一个明显的高低点区间的也是可以介入的。</p><p>统计了一下，严格意义上的机会每天4单左右，有的时候甚至一个没有的。所以，即使从盘后来看，频率也不应该那么高的。</p>]]></content>
      
      
      <categories>
          
          <category> 日总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 重要总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NO.30</title>
      <link href="/2021/06/18/ckyyiqyio002wf8uefb3e1qk4/"/>
      <url>/2021/06/18/ckyyiqyio002wf8uefb3e1qk4/</url>
      
        <content type="html"><![CDATA[<p>盘前交易资格自我审核：</p><p>警惕：一下都是用实打实的金钱亏出来的教训，不能不引起切实的重视。这些规定看似是限制，其实是一种真实的保护。</p><ol><li>盘前吵架禁止交易当节。</li><li>破戒必须隔三个夜盘才能上机。</li><li>单手超损200必须砍。</li><li>当日超亏5%停机位。</li><li>连续两天停机位，禁止交易一天。</li><li><strong>单边急速行情不介入，在这种行情里亏太多了。</strong></li><li>其他引起盘前身体不舒服，头疼脑涨，反应慢的情况的，禁止当节交易。</li></ol><span id="more"></span><p>我突然意识到一个重要的事情。事情是这样的，今晚开盘做的挺好的，十一点之后打了一会儿，发现节奏不对，但是依然在做。直到收盘我才意识到问题的所在。</p><p>我是做共振的。但是十一点之后做了很多非共振的单子，十一点之前做的单子都非常不错的。</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210618013336.png" alt="image-20210618013336168"></p><p>也就是从 有色的角度来说，十一点十分之后已经走出震荡，开始走单边跌势了。这个大前提下，严格来讲，沪锌和沪铝是一笔多单不能做的，只能去找空的共振机会的。当时的实际情况是这样的：</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210618013643.png" alt="image-20210618013643199"></p><p>沪铝并没有伴随有色走出震荡，沪锌是早就跌势了。在这个实际情况下，我打了不少沪铝震荡的多单，是只考虑了沪铝自身结构没充分考虑有色大板块的走势。</p><p>正确的处理应该是：有色已经走出跌势，沪锌已经是跌势，沪铝在震荡。此时，应该选择沪锌，去找沪锌和有色共振的空的机会。如果按照这个思路今晚不会出现沪铝超损的那两笔，反而会大赚的。所以啊，考虑充分一点。</p><p>始终首先以有色为分析的大前提，其次分析品种，再次找共振。不能把这个顺序搞反了。想来最近亏大的都是把这个顺序搞反了。昨天空的沪锌，当时有色已经走出震荡走向单边了（下图），此时不能按沪锌的结构去打了，应该找al和zn里强的那一个去找多的机会。</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210618014353.png" alt="image-20210618014353193"></p><p>最开始的时候，我是按共振结构打对向单，这个方法在震荡里（有色和品种都处于震荡）的时候胜率高。但是正如今晚犯的错误，这种时候我还按照沪铝的结构打对向单，反而亏了不少。</p><p>那么，考虑多种情况。现在来讲，我把规则就定下来了。</p><ol><li>有色震荡—-&gt;找沪铝沪锌里震荡结构最好的那一个打对向单</li><li>有色单边多—-&gt;找沪铝沪锌里最强的已经走出单边多的，找多单共振机会</li><li>有色单边空—-&gt;找沪铝沪锌里最弱的已经走出单边空的，找空单共振机会</li></ol><p>一切以有色为大前提，这个得记住。其他的看不懂的、混乱的，就不要去做了，空仓看着就好。</p>]]></content>
      
      
      <categories>
          
          <category> 日总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 重要总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NO.28</title>
      <link href="/2021/06/16/ckyyiqyio002tf8ue17iz07dq/"/>
      <url>/2021/06/16/ckyyiqyio002tf8ue17iz07dq/</url>
      
        <content type="html"><![CDATA[<p>有时候我们自己掌握了规律，却还去寻求圣杯。抱着珠宝找芝麻。这个时候，需要做的知识排除干扰，相信自己。</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 日总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NO.25</title>
      <link href="/2021/06/11/ckyyiqyin002qf8ue1bz8gokw/"/>
      <url>/2021/06/11/ckyyiqyin002qf8ue1bz8gokw/</url>
      
        <content type="html"><![CDATA[<h2 id="卡位和卡时机"><a href="#卡位和卡时机" class="headerlink" title="卡位和卡时机"></a>卡位和卡时机</h2><p>卡位，卡的是价位。</p><p>卡时机，卡的是沪锌和有色和文华和伦锌的共振时机。</p><span id="more"></span><p>这一套方法换个角度来看也就是这两句话了。</p>]]></content>
      
      
      <categories>
          
          <category> 日总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>药方</title>
      <link href="/2021/06/06/ckyyiqyj1004ff8uecapa50w1/"/>
      <url>/2021/06/06/ckyyiqyj1004ff8uecapa50w1/</url>
      
        <content type="html"><![CDATA[<h2 id="脑梗（语言受影响）中药药方"><a href="#脑梗（语言受影响）中药药方" class="headerlink" title="脑梗（语言受影响）中药药方"></a>脑梗（语言受影响）中药药方</h2><h2 id="失眠中药药方"><a href="#失眠中药药方" class="headerlink" title="失眠中药药方"></a>失眠中药药方</h2><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NO.17</title>
      <link href="/2021/06/01/ckyyiqyin002nf8ue5y4q8bs7/"/>
      <url>/2021/06/01/ckyyiqyin002nf8ue5y4q8bs7/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>夜盘打了打十一点后边的行情，没想到这么顺利。一段稳定的横盘，和有色同步的行情，做起来很顺利。我这个方法的赢利点就是在震荡里，如果发现走势不在震荡里，那就要停手，亏钱的概率是很大的。这一点要有深刻的认识，就我目前的单子来看，亏损大的都是在单边里亏的。</p>]]></content>
      
      
      <categories>
          
          <category> 日总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>周总结5.24-5.29</title>
      <link href="/2021/05/29/ckyyiqyit003kf8uehbe06htp/"/>
      <url>/2021/05/29/ckyyiqyit003kf8uehbe06htp/</url>
      
        <content type="html"><![CDATA[<p>上周妹妹婚礼结束，这周正经只做了两天实盘。这两天都做的不好。思考了一下问题所在，感觉是这样的：就像打游戏，以前打的副本都熟悉了，打法也都会，但是突然出现一个不怎么熟悉的副本，应对就会有点凌乱，结果也不好。这两天行情都是以前遇见的少的情形，这是客观因素；主观上，出现一些事后也看不懂的单子，属于盘中根据一个小的因素就开仓了，把短线拿成了小波段，小止损拿成了超亏。</p><span id="more"></span><p>基于对过往经验的认识和现在问题的分析，应对：</p><ol><li>舍弃对文华的参考，只关注有色和沪锌的对比参考。这样能更专注一些，决策能更快一些。</li><li>一旦发现沪锌和有色不同步，沪锌有自己的想法节奏，这个时候要留心。<ol><li>此时，沪锌和有色在肉眼可见的震荡中，按震荡打，仓位不能重</li><li>此时，沪锌或有色有进入单边的，弃之。（这周大的亏损就发生在这种情况下，我的能力还无法驾驭出现单边之后的情形，单边中市场情绪激烈，盘口可能随意跳动四五点都不一定是有意义的，但是足以让我短暂止损出局。既然无法驾驭，就放弃等市场企稳，找介入点。）</li></ol></li></ol><p>必须清楚的是，这一套方法在应对震荡的时候是稳定能赚钱的，但是在应对单边的时候，目前来看是亏损多的。我必须去等，等一个系统内的介入点，一个胜率高的点。事实上周五晚上我就在按这个思路去调整了一下，效果也是好的。以前做波段是放弃震荡等大周期突破，现在相反，放弃突破等企稳震荡。就结果来看，一天只要抓住四五次震荡的完美介入点，十几个点的盈利是有的，不要随意介入被反噬。下一周在这个基础上坚持看看。</p>]]></content>
      
      
      <categories>
          
          <category> 周总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>饭菜</title>
      <link href="/2021/05/28/ckyyiqyj4004sf8ue5adwcnmm/"/>
      <url>/2021/05/28/ckyyiqyj4004sf8ue5adwcnmm/</url>
      
        <content type="html"><![CDATA[<h2 id="炒菜"><a href="#炒菜" class="headerlink" title="炒菜"></a>炒菜</h2><h3 id="香酥鸡柳"><a href="#香酥鸡柳" class="headerlink" title="香酥鸡柳"></a>香酥鸡柳</h3><p>食材准备</p><p>做法</p><h3 id="灵魂炒蛋"><a href="#灵魂炒蛋" class="headerlink" title="灵魂炒蛋"></a>灵魂炒蛋</h3><p>食材准备</p><p>做法</p><h3 id="荷塘小炒"><a href="#荷塘小炒" class="headerlink" title="荷塘小炒"></a>荷塘小炒</h3><p>食材准备</p><p>做法</p><h3 id="小炒黄牛肉"><a href="#小炒黄牛肉" class="headerlink" title="小炒黄牛肉"></a>小炒黄牛肉</h3><h2 id="腌制品"><a href="#腌制品" class="headerlink" title="腌制品"></a>腌制品</h2><h3 id="糖蒜"><a href="#糖蒜" class="headerlink" title="糖蒜"></a>糖蒜</h3><p>食材准备</p><p>做法</p><span id="more"></span>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>交易的种子花开繁盛</title>
      <link href="/2021/05/28/ckyyiqyj5004zf8uedmeiektw/"/>
      <url>/2021/05/28/ckyyiqyj5004zf8uedmeiektw/</url>
      
        <content type="html"><![CDATA[<p>本文摘录自沪上十二少的公众号，收录以便查用。</p> <span id="more"></span><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210528230859.jpg" alt="微信图片_20210528230837" style="zoom:50%;" /><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210528230906.jpg" alt="微信图片_20210528230843" style="zoom:50%;" /><p>我从05年开始进入到期货行业，风雨兼程走过了漫漫16年的交易之路，经历了许多次生死抉择，踩过荆棘跨过泥潭，深陷绝望又一次次凤凰涅槃……，这其中的艰辛磨难无以言表。看到学生的邮件，我非常感慨。他是极有天赋的，同时也是非常幸运的，没有经历太多的弯路，走在正确的路上，很快就领悟到了投机市场的核心逻辑。</p><p>今天我和大家聊的可能对很多人来说，是比较务虚的。我知道许多交易者希望听到的都是“现在行情怎么看？”“做多还是做空？”之类的“交易之术”。但是，我今天不讲这些，因为我已经讲的太多了。通过我公众号里的文章就可以悟到交易应该怎么做。小红圈能帮助的是处在迷茫当中的交易者，“做正确的事”和“把事情做正确”需要的能力是不一样的。</p><p> 我的学生在小红圈里学习了一年，就开始了赢家之旅，然而，圈子里依然有很多学生处在迷茫之中，我经常收到各种邮件和提问。我相信圈子里的每一个同学们都很努力、很刻苦，但同一个老师教出来的学生，依然会有很大的差距，为什么呢？我认为关键在于“觉悟”。</p><p>每一个生命它都是具有先天天赋的，只不过这个天赋会在不同的层面或者说在不同的角度上被展现出来。很多小孩子一出生以后，家长没有好好顺着孩子的天赋去引导，最终使得孩子成为了一个平庸的人。大部分家长会认为孩子不会读书就是很笨，很没有天赋，其实不然。比如在交易领域，很多成功的交易员并没有很高的学历，仅仅从知识层面来评判，他们的知识储备或许无法和985毕业的学生们比，但他们的天赋在于对人性的洞察，对市场的敏锐，对自我的认识。从培养交易员的角度，老师应该顺着学生本身的天赋而来的那些优势给予充分的训练。所以对交易员的训练是需要体系化的，如果大家吸收的都是零散的、碎片化的知识，那么很有可能你会辜负了你自己的天赋。</p><p> 交易中的技术只是一个交易员武装的一部分。我们当然是需要训练一个交易员对这些交易工具有一个良好的使用能力。但是，技术解决的只是知识的问题，交易从更深层次来看，它反应的不完全是一个技术的问题，它讲的其实是一个底层世界观的问题。</p><p> 我们知道洛伦兹提出的一个很著名的概念叫做“蝴蝶效应”，意思是在亚马逊森林里的一只蝴蝶扇动了一下翅膀，却引起了太平洋上刮了一阵龙卷风。指向就是在时间和空间都非常遥远的一个地方的微弱变化可以对另外一个很宏观很全局的事物产生巨大的影响。而交易恰恰就是如此！学习技术分析就是要学会从细微的市场变化中推导出即将甚至未来将要发生的事情。</p><p> 我们在交易的初期一直都是认为未来市场是不确定的。许多的教科书、前辈们都是把“市场的不确定性”当成一个警示性的语句。通过技术分析，交易员很难去预测一年、一个月，甚至一个星期以后，市场会发生？而基本面研究的则是一个长期的趋势，研究员很难去预测今天、明天，甚至一个星期以后，市场会如何？</p><p> 基本面研究的路径是直达结果，过程不重要，只要最终那个多还是空的结果是对的就可以了。比如某证券大V天天喊多（空），但这个最终的结果可能一年甚至几年后才出来，这也不妨碍他依然以大师自称，虽然这个过程中听了他的话而操作的人死了一茬又一茬，当最终那个结果出来后，他依然会洋洋得意说：我早就说了会涨（跌）的，你看，现在不是涨（跌）了吗？</p><p> 当然，牛X的基本面研究肯定也是要考虑路径的。但是从路径这个角度，基本面研究为什么看不上技术分析呢？我就听过基本面大佬在演讲时用薛定谔的猫实验来形容技术分析。实验大致意思为：在一个封闭的盒子里，有一只猫，还有一瓶毒药，装毒药的瓶子上有一个锤子，这个锤子受一个开关控制，这个开关又受到放射性原子的控制，只要原子衰变，就会触动开关，锤子就会落下，砸碎瓶子，猫就必死无疑。但因为原子的衰变时间是随机的，盒子外的人根本就无法知道放射性元素准确的衰变时间，因此也无法知道锤子是不是落下了，盒子里的猫是死还是活。他的意思我很明白，就是认为技术分析是瞎蒙的，换句话说，趋势没出来之前，技术分析是不知道应该做多还是做空，等到盒子打开，趋势已经结束了。</p><p> 但事上的确如此吗？当然不是！这是对技术分析极大的误解。技术分析的确不是唯结果论的科学，它是从无序的混乱状态中找到有序确定性规律的高级艺术。</p><p>热力学中有一个词叫“熵”，通俗的理解就是“混乱状态”，混乱就意味着无序。投机市场大部分时间是处在一个熵增的状态，就是高度无序，乱七八糟，根本看不清楚方向，也不知道市场接下来将发生什么。但市场不会一直无序，从高无序转变成低有序的趋势就是熵减的原理。</p><p> 如何才能在市场无序的状态中找到确定性，而且还能够去复制呢？这才是技术分析真正要解决的问题。我们知道，在微观上看任何一个东西它都有可能是无序的，所以才有一叶障目不见泰山之说，但是如果你在宏观上看，你有可能会看到一个有序的趋势。而技术分析恰恰就能做到从无序的微观现象中发现通往宏观判断的路径。</p><p> 大家都知道“不确定性”是市场的主题，然而，它却不是交易的本质。随着我们对市场的运行理解越来越深刻，最终会发现，其实在交易的世界里隐藏着一种对无序的世界规律的操控能力，这种能力并不完全属于技术范畴。</p><p> 技术分析的“术”只是表象，期货市场技术分析的手法有很多种，但万变不离其中，万法归一，最终都要落实到交易之“道”上去。说到“道”似乎是很玄乎的东西，但“道”是存在的，只是每个人悟到的、理解到的“道”不一样。像我的这个学生，他在进入圈子之前也有过好几年的迷茫期，但最终他悟到了他自己的“道”：“怀着希望，有所追求，同时享受等待，享受交易过程，看淡交易的得失，内心清澈而明净，淡然而幸福。”</p><p> 交易的过程就是一个修炼的过程。交易重要的不在于“怎么做”，而是“怎么想”。“思考”、“思想”、“思维”，都有一个“思”字，“思”的意思就是“心上之田”。每一个人都应该有一个属于自己的“心上之田”，这是属于你自己的心灵空间，你得在学习交易的过程中构筑这样一个内在的空间，所谓“内观”就是你时时要进入到这个空间去观照，看看自己的想法、行为是否正确。学习交易如果仅仅理解为“怎么做交易”，那是大错特错的。优秀的老师应该要教会自己的学生“怎么思考交易”。做交易其实是“心上思，做上练”。“做”这个动作只是在验证你的“想法”，修炼你的“行为”，真正根子上的东西是你的“思”。</p><p> 在做交易的过程中不断修炼你的内心，不断验证你的思想，一点点浸染在里面，你的交易层次就上来了，你就能逐渐悟到“道”。你仅仅知道没有用，得入乎其中，得到“道”中去，到最后，是你在驾驭交易，而不是交易驾驭你。</p><p> 比如把你放到一个大草甸子里，因为草比人高，你要准确地找到出路是很困难的，你有可能一直在原地打转，就是出不去。但如果这时候有一架飞机在草甸子的上空，那驾驶员就可以很准确地指挥你走出来，因为他是从天空俯视你的，他有了高度，所以他看的很清楚。交易的修炼也是一样，如果你不能把自己拔高一个维度，你就不可能解决出路的问题。你无时无刻修炼的就是要构建一个自己的高纬度空间，这个空间我们也可以称之为“境界”。一个生活在二维世界的人，是很难理解三维世界的，更毋谈更高纬度了。</p><p> 人生的状态其实是由你的精神状态、你的三观来决定的；交易的结果则是由你的思想维度、价值体系来决定的。很多人每天在市场里忙进忙出，他是在做交易还是交易在做他？这个问题你们有答案吗？</p><p> 交易要解决的核心问题是“欲望”、“情绪”、“习性”。“欲望”靠价值体系来解决，“情绪”靠系统来解决，“习性”靠自省来解决。交易中的大成之道，应该是在修炼“术”的过程中，融入其中，出乎其外，驭乎其上。通过自觉、自律、自省，构建清澈澄明的内心世界，清楚地知道自我的局限，市场的本质，扬长避短。于水流婉转处能耐住寂寞，临波涛惊骇时可跃于其上。这就是交易的最高境界。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 沪上十二少 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些杂乱的生活感受</title>
      <link href="/2021/05/28/ckyyiqyix003vf8ue1gkh1gv7/"/>
      <url>/2021/05/28/ckyyiqyix003vf8ue1gkh1gv7/</url>
      
        <content type="html"><![CDATA[<p>2021年5月28日22:31:49<br>        以前课本里说，做一件事需要天时、地利、人和，否则在条件不具备的情况下贸然行事或逆事物发展的规律，最终是要吃苦头的。</p><p>2021年6月6日10:04:19</p><p>​        今天早上六点半就醒来了，心里很开心。这近四五年时间我没有在这个点如此清醒舒适地醒来了。昨晚是十点出头就上床睡觉了，没成想四五分钟可能就睡着了，一觉到天亮。身体休息好，个人感觉都好。<span id="more"></span></p><p>2021年6月7日08:09:22</p><p>​        今天早上依然在六点半就自然醒来了，考虑今天要干活就再睡了个回笼觉，直到七点半才起床。昨晚也是十点半洗完澡就睡了，没想到倒头十分钟左右就睡着了。这种体验对已经受失眠困扰近两年的我来说真是一种神奇的体验了。以前身体其实挺好，滑板和平板支撑都能玩起来，现在就胆怯了。睡眠好了，白天一整天都能在状态上。</p><p>2021年6月23日23:10:14</p><p>​        我感觉很难受，躺在床上，身体都是木的，感觉血液停滞了，脑袋像木头一样。有人喊我，我以为是做梦，直到喊我的那个人失去耐心摇了摇我，我才知道那不是梦。但是身体依然还是木的，要一会儿才好。</p><p>2021年7月27日22:01:49</p><p>​    好烦躁啊</p><p>2021年12月21日03:13:59</p><p>青少年时期接受了祖国的九年义务教育，它传授给我们马克思哲学的辩证法和唯物论。<br>毕业冲入社会，杂染霓虹，激荡人心，如小舟泛大海，世事艰难。才猛然意识到学校教育传授了完整的理论却没涉及结合实践学习方法论，这如同给了倚天剑却没给剑谱和心经。如此冲入社会，少不了四处碰壁。</p><p>如大海淘沙，社会也在洗淘我们这些初出茅庐的小娃。三五年时间，运气+努力+天份，少一个都走不出这个困局。而我就是那个三五年也没走出来的人群中的一个。</p><p>悟，一个字，但是一个量变到质变的过程，具体到量变到质变的那个时间点，可能就是一刹那，想到了，明白了，便能一举打破桎梏。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NO.15</title>
      <link href="/2021/05/26/ckyyiqyil002kf8ue08cc8bwd/"/>
      <url>/2021/05/26/ckyyiqyil002kf8ue08cc8bwd/</url>
      
        <content type="html"><![CDATA[<p>夜盘沪锌、有色、文华是三个节奏，应该讲是最近比较难做的行情，我也是连亏好几笔。这种异常行情出现的不多，应该多关注、分析、了解。盘中很难找到三者顺风的行情，有两个相对顺的位置挂单没有进去，另外轻仓尝试了有色到位和文华到位的行情也都是多以失败平仓。<br>这种行情能不亏或者少亏，以及少做就是一种能力了。就是一种主动发现风险、控制风险的能力。</p><span id="more"></span><p>沪锌形态完全不具有参考价值，在有色和文华的关键位置介入，有色和文华依然顺风，但是沪锌自己逆风而动，造成三笔大的亏损。</p><p>今天的行情就是不顺风，全天不顺风，在沪锌不知道怎么介入的时候，打有色的介入，介入后沪锌盘口逆风，这个时候砍仓得及时不然亏起来真的很伤啊。反应力感觉差了一些。</p><h2 id="亏单"><a href="#亏单" class="headerlink" title="亏单"></a>亏单</h2><table><thead><tr><th>zn2107</th><th>买</th><th>平今</th><th>22220</th><th>1</th><th>普通成交</th><th>22:30:51</th><th>-125</th></tr></thead><tbody><tr><td>zn2107</td><td>卖</td><td>开仓</td><td>22195</td><td>1</td><td>普通成交</td><td>22:29:07</td><td>0</td></tr></tbody></table><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210527151015.png" alt="沪锌" style="zoom:50%;" /><p>这一单是完全没看沪锌走势按有色打的。</p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210527151201.png" alt="有色" style="zoom:50%;" /><p>当时考虑是有色到达日内高点，考虑一波回调。没成想开仓之后沪锌和有色都拉起来了。开仓后考虑有色左侧高点依然有效，稍微一拿就亏大了。这一单轻仓介入是可以的，开仓后如果有色没有尽快顺风就得平仓，何况开仓后还是逆风。</p><table><thead><tr><th>zn2107</th><th>卖</th><th>平今</th><th>22260</th><th>1</th><th>普通成交</th><th>9:27:00</th><th>-100</th></tr></thead><tbody><tr><td>zn2107</td><td>买</td><td>开仓</td><td>22280</td><td>1</td><td>普通成交</td><td>9:25:45</td><td>0</td></tr></tbody></table><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210527151613.png" alt="沪锌" style="zoom:50%;" /><p>单看沪锌是无法介入的啊。</p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210527151755.png" alt="image-20210527151754933" style="zoom:50%;" /><p>单看有色，这个位置也没必要介入多单啊，盘中怎么想的？</p><p>真是没有严格遵循交易系统啊！这亏的一点意义都没有啊</p><table><thead><tr><th>zn2107</th><th>买</th><th>平今</th><th>22425</th><th>1</th><th>普通成交</th><th>11:14:33</th><th>-225</th></tr></thead><tbody><tr><td>zn2107</td><td>卖</td><td>开仓</td><td>22380</td><td>1</td><td>普通成交</td><td>10:52:22</td><td>0</td></tr></tbody></table><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210527152207.png" alt="image-20210527152207696"></p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210527152300.png" alt="image-20210527152300580" style="zoom:50%;" /><p>这一单介入没问题，开仓之后有色还在顺风，但是沪锌却拉阳线，没及时止损，这个时候我就应该知道沪锌当下比有色强，我去空了一个强的，开仓后如果没有转弱就要留心了止损啊！</p><table><thead><tr><th>zn2107</th><th>卖</th><th>平今</th><th>22375</th><th>1</th><th>普通成交</th><th>11:20:24</th><th>-150</th></tr></thead><tbody><tr><td>zn2107</td><td>买</td><td>开仓</td><td>22405</td><td>1</td><td>普通成交</td><td>11:19:08</td><td>0</td></tr></tbody></table><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210527152645.png" alt="image-20210527152645873" style="zoom:50%;" /><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210527152802.png" alt="image-20210527152755558" style="zoom:50%;" /><p>这一单也是个糊涂账啊，完全不懂盘中怎么考虑的呢</p><table><thead><tr><th>zn2107</th><th>买</th><th>平今</th><th>22645</th><th>1</th><th>普通成交</th><th>13:57:13</th><th>-350</th></tr></thead><tbody><tr><td>zn2107</td><td>卖</td><td>开仓</td><td>22575</td><td>1</td><td>普通成交</td><td>13:50:13</td><td>0</td></tr></tbody></table><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210527153000.png" alt="image-20210527153000746" style="zoom:50%;" /><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210527153031.png" alt="image-20210527153031749" style="zoom:50%;" /><p>这一单打的是有色到位，开仓后有色继续拉阳线，沪锌没有及时止损导致。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>今天的亏损问题</p><ol><li>止损管理，即使介入是对的，止损也要及时砍；</li><li>介入点管理。不能瞎做啊。</li><li>行情分析。就我以往的经历来看，沪锌、有色、文华三者顺风是最顺畅的，也是胜率最高的。次一等也要是有色或文华有一个顺风。</li></ol><h2 id="教训"><a href="#教训" class="headerlink" title="教训"></a>教训</h2><p>今天的亏损固然来看是行情确实难做，但是也有不少自己的原因。在行情介入上存在不完善的地方。我打的是沪锌，为了提高胜率才参考有色和文华，自然第一要分析好的是沪锌，所以，在沪锌结构上没有介入的可能，即使有色和文华有一定机会也暂时忽略。把沪锌的分析放第一位。</p>]]></content>
      
      
      <categories>
          
          <category> 日总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行情异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迪士尼攻略</title>
      <link href="/2021/05/25/ckyyiqyj3004lf8ue2mb777js/"/>
      <url>/2021/05/25/ckyyiqyj3004lf8ue2mb777js/</url>
      
        <content type="html"><![CDATA[<h1 id="行前准备"><a href="#行前准备" class="headerlink" title="行前准备"></a>行前准备</h1><p>1、随申码，需要申请上海随申码（随申办里）<br>2、预约，受疫情影响，现在迪士尼限流，需要提前准备预约码，申领步骤： 手机打开<a href="https://shdr.cn/df">https://shdr.cn/df</a> 获取预约码。排队入园的时候需要扫码进入。<a href="http://sh.bendibao.com/tour/202058/222837.shtm">预约流程点击</a><br>3，门票迪士尼门票，入园刷身份证兑换门票<span id="more"></span><br>4，迪士尼app，下载迪士尼度假区app，获取预约等候卡，节约排队时间。关于预约等候卡的使用，入园后，凭身份证兑换门票，在 app中绑定门票号后，即可获取预约等候卡，目前下午的项目不获取预约卡是无法排队游玩的</p><p>5、游玩雷鸣山漂流的游客需要准备好雨衣和鞋套，不然衣服鞋子肯定会被淋湿。项目入口有售卖雨衣，10元/个，鞋套没有卖，要自己准备好。</p><p>6、自带一个水杯。</p><h1 id="出行"><a href="#出行" class="headerlink" title="出行"></a>出行</h1><p>现在迪士尼取消了早享卡，不能提早入园了，所以尽可能早起去排队，去得越早，玩的越好，排队的路上可以一路小跑，跑步五分钟，少排一小时。<br>我们是早上6:30从民宿出发，6：45左右到的，7：30园区开始检票入园。我们6点半出发已经有点晚了，排队入园已经8点多了，导致玩第一个项目排队需要一个小时（ps:虽然已经很快了）如果想早点进入，这边建议您越早越好哈。<br>游玩路线</p><h2 id="上午："><a href="#上午：" class="headerlink" title="上午："></a>上午：</h2><p>飞跃地平线——&gt;加勒比海盗船——&gt;雷鸣山漂流——&gt;七个小矮人矿山车——&gt;旋转木马——&gt;维尼蜜疯罐</p><h2 id="吃饭"><a href="#吃饭" class="headerlink" title="吃饭"></a>吃饭</h2><p>迪士尼小镇。门票得保存好。</p><h2 id="下午："><a href="#下午：" class="headerlink" title="下午："></a>下午：</h2><p>雷鸣山漂流——&gt;杰克船长惊天特技大冒险(演出)——&gt;喷气背包飞行器——&gt;创极速光轮——&gt;漫威英雄总部——&gt;冰雪奇缘:欢唱盛典(演出)</p><p>迪士尼缤纷夏日巡游是在下午3:15，巡游路线在城堡周围，你可以在城堡周围的任意位置进行观看，受疫情影响现在不能向米奇，维尼要签名了，不过你可以跟跳跳虎击掌，2333！</p><ol start="2"><li>你可以在迪士尼的任意一个商店向收银台的店员要到贴纸留念，免费哦</li><li>你可以在游客服务中心要到纪念徽章，不像抖音营销说的那样什么第一次来，你只需要跟他说要纪念徽章就可以了，几个人就可以领到几个。（两个人可以领到4个，分两次去领），如果你刚好这个月是生日，还可以领到生日专属徽章</li><li>迪士尼里面的所有卫生间外面都有饮用水，可以自带水杯接水。矿泉水是10元/瓶，另外迪士尼的冰淇淋有两种，一种是米奇造型的巧克力雪糕（黑巧白巧）40元/支，一种是唐老鸭造型的冰沙雪糕 35元/支，还有火鸡腿超大，但我没买，要问我为什么，还不是因为穷嘛！</li><li>之前在某音看到说：如果路上遇到工作人员捡垃圾，你问他在捡什么，他会回答你捡梦想！真假未知，等你来答，哈哈！因为我怕挨揍（ps:迪士尼的任何一个工作人员都可以为你清楚的指路，不得不佩服迪士尼的培训技术和服务质量，你完全不必担心找不到游玩的场地和厕所）</li><li>要买纪念品的话建议您到迪士尼小镇，那边有一个最大的纪念品点，有迪士尼的所有周边产品供您选择。<br> 最后一点，迪士尼的灯光烟花秀开始时间是在晚上8点半，如果你想找到绝佳的观赏位置，建议您提早到城堡前就坐，我们是6：30左右到的城堡前，已经没什么特别好的位置了，据说5点就有人占好最佳观看位置了。结尾附上烟花秀照片，</li></ol>]]></content>
      
      
      <categories>
          
          <category> 游玩 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>出行注意事项</title>
      <link href="/2021/05/25/ckyyiqyiy0041f8ue4bxk62k6/"/>
      <url>/2021/05/25/ckyyiqyiy0041f8ue4bxk62k6/</url>
      
        <content type="html"><![CDATA[<h2 id="妈妈"><a href="#妈妈" class="headerlink" title="妈妈"></a>妈妈</h2><p>1、涉及坐车</p><p>​    晕车药：口服的必须提前半小时服用。是必须。</p><p>​    口罩：防风。</p><p>​    帽子：防风、防冷</p><span id="more"></span><h2 id="爸爸"><a href="#爸爸" class="headerlink" title="爸爸"></a>爸爸</h2><h2 id="妹妹"><a href="#妹妹" class="headerlink" title="妹妹"></a>妹妹</h2><h2 id="兰兰"><a href="#兰兰" class="headerlink" title="兰兰"></a>兰兰</h2><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p>​    晕车药：口服的必须提前半小时服用。是必须。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>再战</title>
      <link href="/2021/05/25/ckyyiqyir0039f8uedfj0fgei/"/>
      <url>/2021/05/25/ckyyiqyir0039f8uedfj0fgei/</url>
      
        <content type="html"><![CDATA[<p>妹妹的婚礼结束了，前后半个月时间。整个婚礼过程很圆满，很开心。</p><p>谁曾想，妈妈生病了。这一个月劳累的。</p><p>好好挣钱吧。回归到战场了。</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 日总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>革命人永远年轻+</title>
      <link href="/2021/05/15/ckyyiqyj3004nf8ue1lft7ae4/"/>
      <url>/2021/05/15/ckyyiqyj3004nf8ue1lft7ae4/</url>
      
        <content type="html"><![CDATA[<p>革命人永远是年轻，</p><p>他好比大松树冬夏常青，</p><p>他不怕风吹雨打 ，</p><p>他不怕天寒地冻，</p><p>他不摇也不动 ，<span id="more"></span></p><p>永远挺立在山巅。</p><p>革命人永远是年轻</p><p>他好比大松树冬夏常青 ，</p><p>他不怕风吹雨打 ，</p><p>他不怕天寒地冻</p><p>他不摇也不动 ，</p><p>永远挺立在山巅 。</p><p>他不摇也不动 ，</p><p>永远挺立在山巅 。</p><p>在山巅 。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>周总结5.10-5.15</title>
      <link href="/2021/05/15/ckyyiqyis003ff8uehz5d3s9s/"/>
      <url>/2021/05/15/ckyyiqyis003ff8uehz5d3s9s/</url>
      
        <content type="html"><![CDATA[<p>这是一个完整的一周交易。从多个方面总结一下：</p><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>这一周整体状态还可以，耐心上有一定漏洞但是整体没大错，零错误上有一些小漏洞。暴露出的小问题都是固定的，接下来重点解决。</p><span id="more"></span><p>本周交易五天，五天都是正的，不管利润大小，这个结果证明了可行性，心里还是很开心的。<br>感觉这一切都好难，走到今天这一步，实在是不容易。现在的手法本来三年前就会，这三年寻求走不少冤枉路。如果三年前有机缘能给点拨一二或许会少走很多冤枉路，只可惜过往已经过去了。常常会想起过往，感觉难受。</p><h3 id="问题-amp-amp-解决"><a href="#问题-amp-amp-解决" class="headerlink" title="问题&amp;&amp;解决"></a>问题&amp;&amp;解决</h3><p>这里的问题上周也总结出来就这些，不过能更细化一些。</p><ol><li><p>介入点管理</p><p> ​    介入点上最主要的是耐心。在盘前和盘后要分析好哪些位置是必要的介入点，做到心理有数。</p></li><li><p>预期管理</p></li></ol><p>​          预期是对指数和商品的综合判断，是一个要求较高的点。顺风是可持仓待看的。商品本身逆风是最可怕的，也是目前处理反应较为不好的地方，需要改进。</p>]]></content>
      
      
      <categories>
          
          <category> 周总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NO.14</title>
      <link href="/2021/05/14/ckyyiqyil002if8ue13nj1pz6/"/>
      <url>/2021/05/14/ckyyiqyil002if8ue13nj1pz6/</url>
      
        <content type="html"><![CDATA[<h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>状态：佳；<br>耐心：一般：<br>零错误：无；</p><span id="more"></span><h3 id="今日数据"><a href="#今日数据" class="headerlink" title="今日数据"></a>今日数据</h3><table><thead><tr><th>日期</th><th>平仓</th><th>手续费</th><th>惩罚</th><th>累计平仓</th><th>累计手续费</th><th>累计实际权益</th></tr></thead><tbody><tr><td>5月14日</td><td>950</td><td>140</td><td></td><td>4168</td><td>1508</td><td>3469</td></tr></tbody></table><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210514175603.png" alt="image-20210514175603196"></p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210514175718.png" alt="image-20210514175718573"></p><h3 id="后扎"><a href="#后扎" class="headerlink" title="后扎"></a>后扎</h3><p>实践中锤炼技能啊。</p><p>就目前我的打法来说，在行情稳定的时候能够稳定收入。另一方面，在快速行情里，处理方法类似但不雷同，敏感度要更高，处理速度要快，介入点要求要更高。</p>]]></content>
      
      
      <categories>
          
          <category> 日总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>愚公移山</title>
      <link href="/2021/05/13/ckyyiqyj1004df8ue76wjaqno/"/>
      <url>/2021/05/13/ckyyiqyj1004df8ue76wjaqno/</url>
      
        <content type="html"><![CDATA[<h1 id="《愚公移山》原文及赏析"><a href="#《愚公移山》原文及赏析" class="headerlink" title="《愚公移山》原文及赏析"></a><strong>《愚公移山》原文及赏析</strong></h1><p>　　<strong>【演讲词】</strong></p><p>　　我们开了一个很好的大会。我们做了三件事：第一，决定了党的路线，这就是放手发动群众，壮大人民力量，在我党的领导下，打败日本侵略者，解放全国人民，建立一个新民主主义的中国。第二，通过了新的党章。第三，选举了党的领导机关——中央委员会。今后的任务就是领导全党实现党的路线。我们开了一个胜利的大会，一个团结的大会。代表们对三个报告发表了很好的意见。许多同志作了自我批评，从团结的目标出发，经过自我批评，达到了团结。这次大会是团结的模范，是自我批评的模范，又是党内民主的模范。<span id="more"></span></p><p>　　大会闭幕以后，很多同志将要回到自己的工作岗位上去，将要分赴各个战场。同志们到各地去，要宣传大会的路线，并经过全党同志向人民作广泛的解释。</p><p>　　我们宣传大会的路线，就是要使全党和全国人民建立起一个信心，即革命一定要胜利。首先要使先锋队觉悟，下定决心，不怕牺牲，排除万难，去争取胜利。但这还不够，还必须使全国广大人民群众觉悟，甘心情愿和我们一起奋斗，去争取胜利。要使全国人民有这样的信心：中国是中国人民的，不是反动派的。中国古代有个寓言，叫做“愚公移山”。说的是古代有一位老人，住在华北，名叫北山愚公。他的家门南面有两座大山挡住他家的出路，一座叫做太行山，一座叫做王屋山。愚公下决心率领他的儿子们要用锄头挖去这两座大山。有个老头子名叫智叟的看了发笑，说是你们这样干未免太愚蠢了，你们父子数人要挖掉这样两座大山是完全不可能的。愚公回答说：我死了以后有我的儿子，儿子死了，又有孙子，子子孙孙是没有穷尽的。这两座山虽然很高，却是不会再增高了，挖一点就会少一点，为什么挖不平呢?愚公批驳了智叟的错误思想，毫不动摇，每天挖山不止。这件事感动了上帝，他就派了两个神仙下凡，把两座山背走了。现在也有两座压在中国人民头上的大山，一座叫做帝国主义，一座叫做封建主义。中国共产党早就下了决心，要挖掉这两座山。我们一定要坚持下去，一定要不断地工作，我们也会感动上帝的。这个上帝不是别人，就是全中国的人民大众。全国人民大众一齐起来和我们一道挖这两座山，有什么挖不平呢?</p><p>　　昨天有两个美国人要回美国去，我对他们讲了，美国政府要破坏我们，这是不允许的。我们反对美国政府扶蒋反共的政策。但是我们第一要把美国人民和他们的政府相区别，第二要把美国政府中决定政策的人们和下面的普通工作人员相区别。我对这两个美国人说：告诉你们美国政府中决定政策的人们，我们解放区禁止你们到那里去，因为你们的政策是扶蒋反共，我们不放心。假如你们是为了打日本，要到解放区是可以去的，但要订一个条约。倘若你们偷偷摸摸到处乱跑，那是不许可的。赫尔利已经公开宣言不同中国共产党合作，既然如此，为什么还要到我们解放区去乱跑呢?</p><p>　　美国政府的扶蒋反共政策，说明了美国反动派的猖狂。但是一切中外反动派的阻止中国人民胜利的企图，都是注定要失败的。现在的世界潮流，民主是主流，反民主的反动只是一股逆流。目前反动的逆流企图压倒民族独立和人民民主的主流，但反动的逆流终究不会变为主流。现在依然如斯大林很早就说过的一样，旧世界有三个大矛盾：第一个是帝国主义国家中的无产阶级和资产阶级的矛盾，第二个是帝国主义国家之间的矛盾，第三个是殖民地半殖民地国家和帝国主义宗主国之间的矛盾。这三种矛盾不但依然存在，而且发展得更尖锐了，更扩大了。由于这些矛盾的存在和发展，所以虽有反苏反共反民主的逆流存在，但是这种反动逆流总有一天会要被克服下去。</p><p>　　现在中国正在开着两个大会，一个是国民党的第六次代表大会，一个是共产党的第七次代表大会。两个大会有完全不同的目的：一个要消灭共产党和中国民主势力，把中国引向黑暗;一个要打倒日本帝国主义和它的走狗中国封建势力，建设一个新民主主义的中国，把中国引向光明。这两条路线在互相斗争着。我们坚决相信，中国人民将要在中国共产党领导之下，在中国共产党第七次大会的路线的领导之下，得到完全的胜利，而国民党的反革命路线必然要失败。</p><p>　　<strong>【鉴赏】</strong></p><p>　　《愚公移山》是毛泽东在中国共产党第七次全国代表大会上所作的闭幕词。</p><p>　　此时，正处于抗日战争胜利前夕，中国人民面临着两个前途、两种命运的决战。为团结全党和全国人民，争取光明的前途，彻底打败日本侵略者，建立独立、自由、民主、统一与富强的新中国，中国共产党于1945年4月23日至6月11日，在延安召开了第七次全国代表大会。会议提出了“放手发动群众，壮大人民力量，在我党的领导下，打败日本侵略者，解放全国人民，建立一个新民主主义的中国”的政治路线。会议的召开，标志着中国共产党在马克思列宁主义毛泽东思想的旗帜下，实现了思想上、政治上、组织上的空前团结和统一，对夺取全国抗日战争的最后胜利和民主革命在全国的胜利，具有决定性的意义。</p><p>　　在《愚公移山》中，毛泽东首先开宗明义，以明快的语调宣布，“我们开了一个很好的大会”，会议做了三件事以及代表们对三个报告发表了很好的意见，并运用排比的方法对会议作了归纳，“这是一个胜利的大会，一个团结的大会”;“这次大会是团结的模范，是自我批评的模范，是党内民主的模范”。显然，对会议的高度评价必将增强和激励全体与会代表的信念和信心。</p><p>　　紧接着，毛泽东以流畅的语言向代表们强调了会后的任务，希望同志们到各地去，要宣传大会的路线，并经过全党同志向人民作广泛的解释;其根本的目标就在于，要使全党和全国人民建立一个信心，即革命一定要胜利。“下定决心，不怕牺牲，排除万难，去争取胜利”的著名口号正是在此次会议上提出，以致流传至今，令人振奋。同时，毛泽东巧妙地运用了《列子·汤问》中“愚公移山”这一古老的寓言故事，以进一步说服与会同志，鼓舞大家的信心。毛泽东这一古为今用、借古喻今的成功之比，是恰到好处并十分鼓舞人心的，同时也充分表现了一位无产阶级革命家那独辟蹊径的思维方式。</p><p>　　在闭幕词中，毛泽东以明快的思绪和通俗的语言阐明了我们党对美国政府和美国人民的不同观点立场和政策区别，阐述了当今世界所存在的三大矛盾及世界民主潮流的大势所趋，特别分析了当时的形势即国民党的六大与我党的七大正在分别召开的状况，以此作为对比而明确指出“两条路线在互相斗争着”。正是通过以上的对国际国内形势的概括论述和简要剖析，毛泽东以高屋建瓴的昂然气概，明确宣布中国人民在中国共产党的领导下，必定能够“得到完全的胜利”。</p><p>　　这是一篇杰出的演讲词。从演讲技巧看，结构紧凑，气势不凡;言简意赅，活泼生动;言语通俗且论理深刻，节奏明快且耐人寻味;用典信手拈来而顺理成章，想象丰富奇特而别开生面，充分显示了毛泽东同志渊博的学识和高超的智慧。由此，“愚公移山”的典故便在神州大地家喻户晓，妇孺皆知，愚公移山的精神便深入人心而始终激励着人们为事业而作不懈的拼搏。</p>]]></content>
      
      
      <categories>
          
          <category> 毛选 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NO.13</title>
      <link href="/2021/05/13/ckyyiqyik002ef8uefrhg2sy2/"/>
      <url>/2021/05/13/ckyyiqyik002ef8uefrhg2sy2/</url>
      
        <content type="html"><![CDATA[<h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>状态：佳；<br>耐心：佳：<br>零错误：无；</p><span id="more"></span><h3 id="今日数据"><a href="#今日数据" class="headerlink" title="今日数据"></a>今日数据</h3><table><thead><tr><th>日期</th><th>平仓</th><th>手续费</th><th>惩罚</th><th>累计平仓</th><th>累计手续费</th><th>累计实际权益</th></tr></thead><tbody><tr><td>5月13日</td><td>350</td><td>36</td><td></td><td>3218</td><td>1368</td><td>2589</td></tr></tbody></table><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210513150025.png" alt="image-20210513145909392"></p><h3 id="后扎"><a href="#后扎" class="headerlink" title="后扎"></a>后扎</h3><p>今天做的好，各方面状态都还不错，状态调整好，没出现一笔错误。挺开心的。</p><p>严格落实现有框架，不乱打乱动，就能赢。</p>]]></content>
      
      
      <categories>
          
          <category> 日总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NO.12</title>
      <link href="/2021/05/12/ckyyiqyik002cf8ueagfa3fi5/"/>
      <url>/2021/05/12/ckyyiqyik002cf8ueagfa3fi5/</url>
      
        <content type="html"><![CDATA[<h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>状态：一般；<br>耐心：一般：<br>零错误：两处；</p><span id="more"></span><h3 id="今日数据"><a href="#今日数据" class="headerlink" title="今日数据"></a>今日数据</h3><table><thead><tr><th>日期</th><th>平仓</th><th>手续费</th><th>惩罚</th><th>累计平仓</th><th>累计手续费</th><th>累计实际权益</th></tr></thead><tbody><tr><td>5月12日</td><td>300</td><td>54</td><td></td><td>2868</td><td>1332</td><td>2257</td></tr></tbody></table><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210512150800.png" alt="image-20210512150800495"></p><h3 id="后扎"><a href="#后扎" class="headerlink" title="后扎"></a>后扎</h3><p>错误是啥呢？预期的合理管理。当介入后不处于顺风，及时处理手上的单子，等顺风再进也不迟，当然错过就错过了。心态放好，目前方法是没问题的。</p>]]></content>
      
      
      <categories>
          
          <category> 日总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NO.11</title>
      <link href="/2021/05/11/ckyyiqyij0029f8uebsme1m0l/"/>
      <url>/2021/05/11/ckyyiqyij0029f8uebsme1m0l/</url>
      
        <content type="html"><![CDATA[<h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>状态：正常；<br>耐心：一般：<br>零错误：四处；</p><span id="more"></span><h3 id="后扎"><a href="#后扎" class="headerlink" title="后扎"></a>后扎</h3><p>市场在日内普跌的时候，因为各个板块之间相互的影响会加大，波动幅度很大，关键点的卡位难度也会加大。这种情况下，敏感度要更大一些，介入点之后更敏感处理单子，以防秒杀亏个大的。</p><p>沪锌没有明确左侧参考点的情况下，除非板块有明确参考点，否则这种情况下不要去介入，这是一个基本认识点。</p><p>主要问题还是老问题，注意力要集中，反应速度要跟得上。</p><p>感觉好疲惫，说实在的身体大不如以前了。在上海的这几年，真是代价深重。</p>]]></content>
      
      
      <categories>
          
          <category> 日总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>N0.10</title>
      <link href="/2021/05/10/ckyyiqyii0026f8ue2f7w1tis/"/>
      <url>/2021/05/10/ckyyiqyii0026f8ue2f7w1tis/</url>
      
        <content type="html"><![CDATA[<h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>状态：正常；<br>耐心：正常：<br>零错误：两处；</p><span id="more"></span><h3 id="今日数据"><a href="#今日数据" class="headerlink" title="今日数据"></a>今日数据</h3><table><thead><tr><th>日期</th><th>平仓</th><th>手续费</th><th>惩罚</th><th>次数*10</th><th>累计平仓</th><th align="center">累计手续费</th><th>累计实际权益</th></tr></thead><tbody><tr><td>5月10日</td><td>775</td><td>162</td><td></td><td>540</td><td>2568</td><td align="center">1278</td><td>1984</td></tr></tbody></table><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>两处错误同。</p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210510150033.png" alt="image-20210510150033599" style="zoom:50%;" /><p>在介入点介入之后，如果有色和文华还在顺位，但是它自身盘口却显得很弱，这个时候要及时砍出来。当前很大可能是要在跌一波再回抽的，不是说有色表明的信息不准，而是这个时候它自身有一些想法。介入点介入当然是共同顺位最好了。</p><h3 id="后扎"><a href="#后扎" class="headerlink" title="后扎"></a>后扎</h3><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210510145807.png" alt="image-20210510145807310"></p><p>今天打的次数多了一些，周五夜盘一度打亏，后半场打回来了。只要做好止损和介入点的管理，一时的亏损时不怕的。</p><p>就这么做就好了，现在手续费相对也便宜，波动也还好。在该打的位置打就好了。</p>]]></content>
      
      
      <categories>
          
          <category> 日总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Travis自动部署hexo到github</title>
      <link href="/2021/05/09/ckyyiqyic001hf8uecl3049eh/"/>
      <url>/2021/05/09/ckyyiqyic001hf8uecl3049eh/</url>
      
        <content type="html"><![CDATA[<p>使用<code>hexo</code>而不使用<code>jekyll</code>在github上搭blog最大的问题就是，每次提交都需要先<code>hexo g</code>，然后再<code>push</code>生成的文件们，这样哪怕是改一个小的地方都需要重新编译全部blog，想想都蛋疼（虽然我还没有多少文章），所以决定使用<a href="https://travis-ci.org/">Travis</a>来自动持续集成提交到github以后的操作</p><p>网上一搜有很多的教程，看了好多然后东拼西凑才最终成功，遂决定记录下来最终成功的这个方法，以免忘记</p><span id="more"></span><p>本文中实现的最终效果是：</p><ul><li>写完blog后，直接<code>push</code>到github的<code>source</code>分支，其它的就可以不用管了</li><li>由于我的<code>.travis.yml</code>配置文件里设置监听的就是<code>source</code>分支，所以会触发<code>webhook</code></li><li><code>Travis</code>则会将该项目<code>clone</code>过去，然后按照<code>.travis.yml</code>的设置执行接下来的命令</li><li>执行完成后，再将编译好的文件们发送到自己的服务器，顺便<code>push</code>回<code>master</code>分支上来</li><li>这样就可以在<a href="http://blog.godi13.com/">blog.godi13.com</a>和<a href="http://godi13.github.io/">Godi13.github.io</a>上都访问blog了</li></ul><h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><p>首先，按规定名称<code>XXXXX.github.io</code>，其中<code>XXXXX</code>为你的用户名，如下图中的<code>Godi13.github.io</code>创建项目</p><p><img src="https://segmentfault.com/img/remote/1460000009054998?w=350&h=416" alt="创建github项目"></p><p>为了使<code>travis</code>能够将编译好的文件们<code>push</code>回咱们的github，我们需要生成<code>token</code>，步骤如下：</p><ol><li>点击右上方头像，然后点<code>setting</code></li></ol><p><img src="https://segmentfault.com/img/remote/1460000009054999?w=350&h=450" alt="img"></p><ol start="2"><li>点击<code>Personal access tokens</code></li></ol><p><img src="https://segmentfault.com/img/remote/1460000009055000?w=350&h=598" alt="img"></p><ol start="3"><li>点击<code>Generate new token</code></li></ol><p><img src="https://segmentfault.com/img/remote/1460000009055001?w=486&h=200" alt="img"></p><ol start="4"><li>为<code>token</code>起一个名字，勾选<code>repo</code>，然后点击生成</li></ol><p><img src="https://segmentfault.com/img/remote/1460000009055043?w=350&h=254" alt="img"></p><div class="tip">生成token以后，一定要复制好，因为只显示一次，如果丢失只能再次生成了</div><p><img src="https://segmentfault.com/img/remote/1460000009055003?w=1460&h=114" alt="img"></p><h1 id="Travis"><a href="#Travis" class="headerlink" title="Travis"></a>Travis</h1><ol><li>使用<code>github</code>帐号登录<a href="https://travis-ci.org/">Travis</a>，右上方按钮点击同步项目，下方打开需要集成的项目，最后点击齿轮进入项目配置页面</li></ol><p><img src="https://segmentfault.com/img/remote/1460000009055004?w=1376&h=1282" alt="在travis同步"></p><ol start="2"><li>打开<code>Build only if .travis.yml is present</code>，右下角的那个其实也可以关了，然后往下移动页面到环境变量</li></ol><p><img src="https://segmentfault.com/img/remote/1460000009055005?w=1452&h=290" alt="img"></p><ol start="3"><li>在这里我将变量名称名为<code>REPO_TOKEN</code>，放上<code>token</code>，点击<code>Add</code>按钮</li></ol><p><img src="https://segmentfault.com/img/remote/1460000009059851?w=1900&h=294" alt="img"></p><h1 id="Terminal"><a href="#Terminal" class="headerlink" title="Terminal"></a>Terminal</h1><p>回到终端，进入<code>blog</code>所在的文件夹下，新建<code>.travis.yml</code>文件，并添加以下内容</p><blockquote><p>为方便起见，这个文件直接在github的仓库里新建，并把下内容更新提交进去就好。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># 使用语言</span><br><span class="line">language: node_js</span><br><span class="line"># node版本</span><br><span class="line">node_js:  14.16.0</span><br><span class="line"># 设置只监听哪个分支</span><br><span class="line">branches: </span><br><span class="line">  only:</span><br><span class="line">  - master</span><br><span class="line"># 缓存，可以节省集成的时间，这里我用了yarn，如果不用可以删除</span><br><span class="line">cache:</span><br><span class="line">  directories:</span><br><span class="line">    - node_modules</span><br><span class="line"># 需要执行的脚本</span><br><span class="line">script:</span><br><span class="line">  - yarn build</span><br><span class="line">before_install:</span><br><span class="line">- git config --global user.name &quot;lanhuakai&quot;</span><br><span class="line">- git config --global user.email &quot;zhaozhou_1991@163.com&quot;</span><br><span class="line"># 由于使用了yarn，所以需要下载，如不用yarn这两行可以删除</span><br><span class="line">- curl -o- -L https://yarnpkg.com/install.sh | bash</span><br><span class="line">- export PATH=$HOME/.yarn/bin:$PATH</span><br><span class="line">- npm install -g hexo-cli</span><br><span class="line">install:</span><br><span class="line"># 不用yarn的话这里改成 npm i 即可</span><br><span class="line">- npm i</span><br><span class="line">script:</span><br><span class="line">- hexo clean</span><br><span class="line">- hexo generate</span><br><span class="line">after_success:</span><br><span class="line">- cd ./public</span><br><span class="line">- git init</span><br><span class="line">- git add --all .</span><br><span class="line">- git commit -m &quot;Travis CI Auto Builder&quot;</span><br><span class="line"># 这里的 REPO_TOKEN 即之前在 travis 项目的环境变量里添加的</span><br><span class="line">- git push --quiet --force https://$REPO_TOKEN@github.com/lanhuakai/lanhuakai.github.io.git</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><p>然后，准备<code>push</code>该项目到github，看下是否成功，如果是新项目可参照下面的git指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line"># 添加自己的项目</span><br><span class="line">git remote add origin git@github.com:Godi13/Godi13.github.io.git</span><br><span class="line"># 新建并切换分支</span><br><span class="line">git checkout --orphan source</span><br><span class="line">git add -A</span><br><span class="line">git commit -m &quot;Travis CI&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><blockquote><p>关于 <code>--orphan</code> 请参考 <a href="https://ihower.tw/blog/archives/5691">如何建立一個沒有 Parent 的獨立 Git branch</a></p></blockquote><p>如最终成功则会看到</p><p><img src="https://segmentfault.com/img/remote/1460000009055020?w=2558&h=1232" alt="img"></p><p>到这里关于hexo和github的事情就先吿一段落，接下来就是服务器与tarvis</p><h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><p>按照上面<code>.tarvis.yml</code>的设置，其实我只需要在<code>after_success</code>这个生命周期中，把<code>public</code>文件夹下的所有文件传送到服务器指定的路径即可，接下来就是解决如何让<code>tarvis</code>往我的服务器传东西的问题了</p><p>在此之前，你需要将本机生成的密钥传到服务器上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa # 然后一路回车即可</span><br><span class="line"># ssh-copy-id 可能需要另行安装</span><br><span class="line"># 如果ssh默认端口是22，则不需要 -p</span><br><span class="line">ssh-copy-id &lt;登录部署服务器用户名&gt;@&lt;部署服务器地址&gt; -p &lt;部署服务器ssh端口&gt;</span><br><span class="line">ssh &lt;登录部署服务器用户名&gt;@&lt;部署服务器地址&gt; -p &lt;部署服务器ssh端口&gt;</span><br></pre></td></tr></table></figure><p>如果登录服务器成功，接下来需要安装<code>travis</code>命令行工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 安装travis命令行工具，如无法使用gem指令须先安装ruby</span><br><span class="line">gem install travis</span><br><span class="line"># --auto自动登录github帐号</span><br><span class="line">travis login --auto</span><br><span class="line"># 此处的--add参数表示自动添加脚本到.travis.yml文件中</span><br><span class="line">travis encrypt-file ~/.ssh/id_rsa --add</span><br><span class="line"># 这个命令会自动把 id_rsa 加密传送到 .git 指定的仓库对应的 travis 中去</span><br></pre></td></tr></table></figure><p>执行完以后会发现在<code>travis</code>网站项目里面的环境变量里多了两个参数</p><p><img src="https://segmentfault.com/img/remote/1460000009055021?w=1808&h=382" alt="img"></p><p>并且在<code>.travis.yml</code>里的<code>before_install</code>周期中多了下面这2行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- openssl aes-256-cbc -K $encrypted_97d432d3ed20_key -iv $encrypted_97d432d3ed20_iv</span><br><span class="line">  -in id_rsa.enc -out ~\/.ssh/id_rsa -d</span><br></pre></td></tr></table></figure><p>默认生成的命令可能会在<code>/</code>前面带转义符<code>\</code>，我们不需要这些转义符，手动删掉所有的转义符，否则可能在后面引发莫名的错误</p><p>之后为了保证命令的顺利运行，我们还需要正确地设置权限和认证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">before_install</span><br><span class="line">- openssl aes-256-cbc -K $encrypted_97d432d3ed20_key -iv $encrypted_97d432d3ed20_iv</span><br><span class="line">  -in id_rsa.enc -out ~/.ssh/id_rsa -d</span><br><span class="line">- chmod 600 ~/.ssh/id_rsa</span><br><span class="line">- echo -e &quot;Host 主机IP地址\n\tStrictHostKeyChecking no\n&quot; &gt;&gt; ~/.ssh/config</span><br></pre></td></tr></table></figure><p>最后，就是在<code>after_success</code>周期中，添加上传服务器的指令即可，在这里要注意，如果没有<code>stricthostkeychecking=no</code>参数，将构建失败，详细原因请参考<a href="http://blog.csdn.net/qq8427003/article/details/64921238">通过travis部署代码到远程服务器</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 由于我修改了默认的port，所以在这里也进行了加密处理</span><br><span class="line">- scp -o stricthostkeychecking=no -P $PORT -r public/* 用户@域名:/路径</span><br></pre></td></tr></table></figure><p>但使用<code>scp</code>有很多问题，所以后来我决定改用<code>rsync</code>命令，缺点是端口号就不能用travis环境来加密了，如果哪个朋友有更好的方案希望能告诉我</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># public 后面加上/即可将该目录下的文件都传送到服务器了</span><br><span class="line">- rsync -rv --delete -e &#x27;ssh -o stricthostkeychecking=no -p 端口号&#x27; public/ 用户@域名:/路径</span><br></pre></td></tr></table></figure><p>最后在这里放上我最终的<a href="https://github.com/Godi13/Godi13.github.io/blob/source/.travis.yml">.travis.yml</a>配置参数，希望本文对大家能有所帮助，如果觉得不错记得点赞~ 如果能告诉我为什么觉得我写的还不错就更好了，我就知道该怎么再接再厉了，谢谢大家的支持~~~~</p><hr><p>参考</p><p><a href="https://www.bilibili.com/video/BV1c4411G7cg?p=12">视频</a></p><p><a href="http://mackxin.com/nav.html">连接诶</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>交易的进阶到底是靠“内求”还是“高手指点”？</title>
      <link href="/2021/05/09/ckyyiqyj60052f8ue38cy87zh/"/>
      <url>/2021/05/09/ckyyiqyj60052f8ue38cy87zh/</url>
      
        <content type="html"><![CDATA[<p>本文是收录的沪上十二少的文章</p><p>我收到一个圈子里的提问，这个问题我觉得很多交易员都会遇到。</p><span id="more"></span><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210509150735.png" alt="image-20210509150724778"></p><p>回复：</p><p>高频交易的资金容量极其有限，而且这种工作模式基本是吃青春饭，年纪稍微大一点就做不了，这是个不但要拼技术能力，还要拼身体体力、反应速度的职业，对于你来说，转型是势在必行的。</p><p>但你说转型做波段交易就必须要懂基本面，这倒是不需要，市场上有很多纯靠技术图表就能赚大钱的优秀交易者。能懂基本面当然最好，我也经常看一些研报，但我自己的体会是，任何一门技术都需要精通才能战胜绝大多数人，无论基本面还是技术分析都一样，关键是要“精通”。市场上半桶水的基本面研究员多如牛毛，但不是懂点基本面就能赚钱的。关于这一点，我自身的经历就是最好的证明:我并不懂基本面，纯靠图表分析也能稳定在这个市场获利。</p><p>其次，就是你现在所面临的困惑:要不要到上海来发展?</p><p>年轻人都觉得一线城市有更好的事业发展，当然毋庸置疑的是一线城市机会更多，能接触到更多的人，但是，生活成本也更大，生存压力更强这也是事实。</p><p>需不需要离开家乡到上海来发展，主要得看你所谓的“发展”指的是什么?</p><p>如果你想应聘一家金融公司做操盘手，或是从事相关的金融工作，那来上海发展当然是最好的选择。</p><p>如果你只是想从一个高频交易者转型为波段交易者，突破交易瓶颈，让自己的交易能力得到提高，成为一名以交易为生的职业交易者，那你大可不必跑到上海来，你要实现这个目标，在任何一个地方都可以。</p><p>投机交易就是一个很孤独的职业。利弗摩尔当年取得了巨大的成就，也是一个人，他没有团队，也不和人交流。现在互联网这么发达，你在任何一个地方都可以从网络上学习到很多的知识。</p><p>我们生活在上海的盘手精神上也是孤独的。交易中的每一个步骤，每一个流程，都可以自己独立完成。能成为优秀的独立操盘手，本身就是厌倦人际交往、人情世故的，所以，交流并不是职业盘手特别需要的东西。说实话，水平太菜的人听不懂你在说什么，跟你差不多水平的人也不需要和你交流。</p><p>你说:“我现在比较困惑的是交易要进步到底是内求的事情，还是外部有高手指点进步比较快，之前老师就跟我说过，要跟赚钱的人交流，不要跟亏钱的交流”。你老师说的话肯定没错。我们做学生的时候，家长也要求我们跟成绩好的学生玩，这是因为潜移默化，近朱者赤嘛。但是，“要跟赚钱的人交流”和“你到不到上海来”之间没有必然的关系。你来了上海也不一定就能遇上“赚钱的人”，遇上了人家也不一定愿意和你交流。你依然会觉得孤独同时，还要付出巨大的生活成本。</p><p>最后，“交易的进步到底是内求还是高手指点”，我个人觉得“内求”占大部分比例，“高手指点”则可以事半功倍。因为许多菜鸟的基础道路就走偏了，有高手指点可以少走许多弯路。说句大话，如果你在小红圈连我都教不好你，那一定是你本人“内求”的问题没有得到解决。</p><p>比我交易能力强的盘手很多，但要教会别人做交易仅仅靠自身交易能力强是不够的。这个行业的老师，需要德行人品好、交易水平牛、讲课水平高，很多交易做的好的人不一定能教，能教的也不一定愿意教。</p><p>总之，个人交易能力的进阶，归根到底是需要自身发生“质的改变”，这个改变可以在高手的指点下完成，也可以通过自己实盘中悟出来。我们那一代的操盘手基本都是自己悟，没有老师带，也没有高手指点，我的老师就是利弗莫尔和斯坦利克罗。</p><p>最终的选择权在你自己的手里，祝好运！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 沪上十二少 </tag>
            
            <tag> 波段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周总结5.1-5.9</title>
      <link href="/2021/05/09/ckyyiqyis003cf8ue670c1ffc/"/>
      <url>/2021/05/09/ckyyiqyis003cf8ue670c1ffc/</url>
      
        <content type="html"><![CDATA[<p>整个五一假日都在等着假日结束，我这种小交易员自然是没有什么玩额度兴致的。</p><p>这一周只有两天交易日。这两天的交易反应的问题比较集中：<span id="more"></span></p><ol><li>合理的预期管理。在有色和沪锌的介入点介入之后，如果有色有朝相反方向运动的苗头就要当下对价砍出来。这个时候是不能挂的，如果挂很大几率是被干的。切不能大亏，亏超三个点就是错误操作了。</li><li>严格的介入点管理。只在符合的介入点介入，其他时候看就行了。</li><li>手数的管理。目前手数不大，考虑这个可能有点多，先把之前的落实好。</li><li>盘中机会的切入机会是毫秒级别的，要第一时间切入，那盘中就要认真，注意力高度集中在盘面上的。盘中不要看手机，手机搁外边。</li></ol><p>现在的情况是，只要落实好这些细节，就是可以赚钱的。</p>]]></content>
      
      
      <categories>
          
          <category> 周总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>彻底解决使用matplotlib绘图的时候图标上的中文显示不正常</title>
      <link href="/2021/05/08/ckyyiqyi70010f8ue5yfaaspd/"/>
      <url>/2021/05/08/ckyyiqyi70010f8ue5yfaaspd/</url>
      
        <content type="html"><![CDATA[<p>本文解决在使用matplotlib绘图的时候图标上的中文显示不正常的情况，彻底解决的。</p><span id="more"></span><h1 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h1><p>在使用matplotlib绘图的时候图标上的中文显示不正常</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210324221647.png" alt="image-20210324221647496"></p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>没有给matplotlib指定一个它能知道的字体。matplotlib本身是支持中文的，只是都是以拼音标注的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 查询当前系统所有字体</span><br><span class="line">from matplotlib.font_manager import FontManager</span><br><span class="line">import subprocess</span><br><span class="line"></span><br><span class="line">mpl_fonts = set(f.name for f in FontManager().ttflist)</span><br><span class="line"></span><br><span class="line">print(&#x27;all font list get from matplotlib.font_manager:&#x27;)</span><br><span class="line">for f in sorted(mpl_fonts):</span><br><span class="line">    print(&#x27;\t&#x27; + f)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210324221904.png" alt="image-20210324221904874"></p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>在开头加入两行代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">from matplotlib import pyplot as plt</span><br><span class="line"># 新加入的两行代码</span><br><span class="line">import matplotlib</span><br><span class="line">matplotlib.rc(&quot;font&quot;,family=&#x27;youyuan&#x27;)</span><br></pre></td></tr></table></figure><p>再跑一遍：</p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210324222103.png" alt="image-20210324222103306" style="zoom:50%;" /><p>发现了新问题，前边的办法可以解决中文的显示问题，但是在axis存在负值的时候，负号显示不出来。</p><p>经过一番查询，目前较为好的解决办法是在文档前边加入这两句，同时解决这两个问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 中文和负号的正常显示</span><br><span class="line">plt.rcParams[&#x27;font.sans-serif&#x27;] = [u&#x27;SimHei&#x27;]</span><br><span class="line">plt.rcParams[&#x27;axes.unicode_minus&#x27;] = False</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> matplotlib </category>
          
      </categories>
      
      
        <tags>
            
            <tag> plt </tag>
            
            <tag> plt异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>细说Python的lambda函数</title>
      <link href="/2021/05/08/ckyyiqyi80012f8ue2sg93hrx/"/>
      <url>/2021/05/08/ckyyiqyi80012f8ue2sg93hrx/</url>
      
        <content type="html"><![CDATA[<p>本文详细说明了在python中使用lambda函数的原因极其便捷性和一定的限制性。</p><span id="more"></span><h2 id="Python的lambda函数"><a href="#Python的lambda函数" class="headerlink" title="Python的lambda函数"></a>Python的lambda函数</h2><h3 id="1-为什么要用lambda函数？"><a href="#1-为什么要用lambda函数？" class="headerlink" title="1.为什么要用lambda函数？"></a><strong>1.为什么要用lambda函数？</strong></h3><p>先举一个例子：将一个列表里的每个元素都平方。</p><p>先用def来定义函数，代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def sq(x):</span><br><span class="line">    return x*x</span><br><span class="line"></span><br><span class="line">map(sq,[y for y in range(10)])</span><br></pre></td></tr></table></figure><p>再用lambda函数来编写代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map(lambda x: x*x,[y for y in range(10)])</span><br></pre></td></tr></table></figure><p>从这个简单的例子，我们可以看出，用lambda函数首先减少了代码的冗余，其次，用lambda函数，不用费神地去命名一个函数的名字，可以快速的实现某项功能，最后，lambda函数使代码的可读性更强，程序看起来更加简洁。</p><p>从上面这个简单的例子，也可以看出来lambda函数的语法是唯一的，其形式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lambda argument_list:expersion</span><br></pre></td></tr></table></figure><p>语法中的argument_list是参数列表，它的结构与Python中函数(function)的参数列表是一样的，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a,b</span><br><span class="line">a=1,b=2</span><br><span class="line">*args</span><br><span class="line">**kwargs</span><br><span class="line">a,b=1,*args</span><br><span class="line">空</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>语法中的expression是一个关于参数的表达式，表达式中出现的参数需要在argument_list中有定义，并且表达式只能是单行的。比如以下的一些合法的表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">None</span><br><span class="line">a+b</span><br><span class="line">sum(a)</span><br><span class="line">1 if a &gt;10 else 0</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>除了上面提到的lambda函数的优点外，我看有的文章说用lambda函数会提高效率，那究竟是不是呢？我们写一段代码来验证一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 测试的Def函数</span><br><span class="line">def square1(n):</span><br><span class="line">    return n ** 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 测试的Lambda函数</span><br><span class="line">square2 = lambda n: n ** 2</span><br><span class="line"></span><br><span class="line">print(time.time())</span><br><span class="line"></span><br><span class="line"># 使用Def函数</span><br><span class="line">i = 0</span><br><span class="line">while i &lt; 1000000000:</span><br><span class="line">    square1(100)</span><br><span class="line">    i += 1</span><br><span class="line"></span><br><span class="line">print(time.time())</span><br><span class="line"></span><br><span class="line"># 使用lambda函数</span><br><span class="line">i = 0</span><br><span class="line">while i &lt; 1000000000:</span><br><span class="line">    square2(100)</span><br><span class="line">    i += 1</span><br><span class="line"></span><br><span class="line">print(time.time())</span><br><span class="line"></span><br><span class="line">1413272496.27</span><br><span class="line">1413272703.05 (Def   函数:207s)</span><br><span class="line">1413272904.49 (Lambda函数:201s)</span><br></pre></td></tr></table></figure><p>从上面可以看出，两种的所需的时间差不多，效率丝毫不受影响。</p><h3 id="2-lambad函数的用法上面也讲到了匿名函数的优点，那它到底有哪些用处呢？"><a href="#2-lambad函数的用法上面也讲到了匿名函数的优点，那它到底有哪些用处呢？" class="headerlink" title="2.lambad函数的用法上面也讲到了匿名函数的优点，那它到底有哪些用处呢？"></a>2.lambad函数的用法上面也讲到了匿名函数的优点，那它到底有哪些用处呢？</h3><p>（1）直接赋给一个变量，然后再像一般函数那样调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c=lambda x,y,z:x*y*z</span><br><span class="line">c(2,3,4)</span><br><span class="line"></span><br><span class="line">24</span><br></pre></td></tr></table></figure><p>当然，也可以在函数后面直接传递实参</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lambda x:x**2)(3)</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>（2）将lambda函数作为参数传递给其他函数比如说结合map、filter、sorted、reduce等一些Python内置函数使用，下面举例说明。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fliter(lambda x:x%3==0,[1,2,3,4,5,6])</span><br><span class="line"></span><br><span class="line">[3,6]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">squares = map(lambda x:x**2,range(5)</span><br><span class="line">print(lsit(squares))</span><br><span class="line">[0,1,4,9,16]</span><br></pre></td></tr></table></figure><p>与sorted函数结合使用，比如：创建由元组构成的列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=[(&#x27;b&#x27;,3),(&#x27;a&#x27;,2),(&#x27;d&#x27;,4),(&#x27;c&#x27;,1)]</span><br></pre></td></tr></table></figure><p>按照第一个元素排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sorted(a,key=lambda x:x[0])</span><br><span class="line">[(&#x27;a&#x27;,2),(&#x27;b&#x27;,3),(&#x27;c&#x27;,1),(&#x27;d&#x27;,4)]</span><br></pre></td></tr></table></figure><p>按照第二个元素排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sorted(a,key=lambda x:x[1])</span><br><span class="line">[(&#x27;c&#x27;,1),(&#x27;a&#x27;,2),(&#x27;b&#x27;,3),(&#x27;d&#x27;,4)]</span><br></pre></td></tr></table></figure><p>与reduce函数结合使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from functools import reduce</span><br><span class="line">print(reduce(lambda a,b:&#x27;&#123;&#125;,&#123;&#125;&#x27;.format(a,b),[1,2,3,4,5,6,7,8,9]))</span><br><span class="line"></span><br><span class="line">1,2,3,4,5,6,7,8,9</span><br></pre></td></tr></table></figure><p>（3）嵌套使用将lambda函数嵌套到普通函数中，lambda函数本身做为return的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def increment(n):</span><br><span class="line">    return lambda x:x+n</span><br><span class="line"></span><br><span class="line">f=increment(4)</span><br><span class="line">f(2)</span><br><span class="line">6</span><br></pre></td></tr></table></figure><p>（4）字符串联合，有默认值，也可以用x=(lambda…)这种格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x=(lambda x=&#x27;Boo&#x27;,y=&#x27;Too&#x27;,z=&#x27;Z00&#x27;：x+y+z)</span><br><span class="line">print(x(&#x27;Foo&#x27;))</span><br><span class="line"></span><br><span class="line">&#x27;FooTooZoo&#x27;</span><br></pre></td></tr></table></figure><p>（5）在tkinter中定义内联的callback函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from tkinter import Button,mainloop</span><br><span class="line"></span><br><span class="line">x=Button(text=&#x27;Press me&#x27;,command=(lambda :sys.stdout.write(&#x27;Hello,World\n&#x27;)))</span><br><span class="line">x.pack()</span><br><span class="line">x.mainloop()</span><br></pre></td></tr></table></figure><p>这段代码还是挺有意思的，希望小伙伴们可以复制粘贴运行一下哈。（6）判断字符串是否以某个字母开头有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Names = [&#x27;Anne&#x27;, &#x27;Amy&#x27;, &#x27;Bob&#x27;, &#x27;David&#x27;, &#x27;Carrie&#x27;, &#x27;Barbara&#x27;, &#x27;Zach&#x27;]</span><br><span class="line">B_Name= filter(lambda x: x.startswith(&#x27;B&#x27;),Names)</span><br><span class="line">print(B_Name)</span><br><span class="line"></span><br><span class="line">[&#x27;Bob&#x27;, &#x27;Barbara&#x27;]</span><br></pre></td></tr></table></figure><p>（7）求两个列表元素的和</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2,3,4]</span><br><span class="line">b = [5,6,7,8]</span><br><span class="line">print(list(map(lambda x,y:x+y, a,b)))</span><br><span class="line"></span><br><span class="line">[6,8,10,12]</span><br></pre></td></tr></table></figure><p>（8）求字符串每个单词的长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sentence = &quot;Welcome To Beijing!&quot;</span><br><span class="line">words = sentence.split()</span><br><span class="line">lengths  = map(lambda x:len(x),words)</span><br><span class="line">print(list(lengths))</span><br><span class="line">[7,2,8]</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><p>对于lambda函数的使用在Python社区一直存在争议，支持一方认为lambad函数的使用，使得Python代码更加紧凑，更加Pythonic；反对方则认为Python的lambda函数限制多多，最严重的当属于它只能由一条表达式组成，用多了以后反而使得程序看起来不那么清晰。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文华财经设置</title>
      <link href="/2021/04/27/ckyyiqyiv003pf8ue3kf3a3fv/"/>
      <url>/2021/04/27/ckyyiqyiv003pf8ue3kf3a3fv/</url>
      
        <content type="html"><![CDATA[<p>K线高低点的显示以及放量K线的变色显示</p><span id="more"></span><h2 id="显示K线高低点"><a href="#显示K线高低点" class="headerlink" title="显示K线高低点"></a>显示K线高低点</h2><p>DRAWCOLORKLINE(ISUP,COLORRED,M);//收盘价大于开盘价，绘制红色空心K线<br>DRAWCOLORKLINE(ISDOWN,COLORCYAN,N);//收盘价小于开盘价，绘制青色实心K线<br>DRAWCOLORKLINE(ISEQUAL,COLORWHITE,1);//收盘价等于开盘价，绘制白色十字线</p><p>//显示前一根K线的高低点<br>DRAWNUMBER(ISLASTBAR,H+6 * MINPRICE,REF(H,1),0,COLORRED),FONTSIZE20;<br>DRAWNUMBER(ISLASTBAR,L-9 *  MINPRICE,REF(L,1),0,COLORGREEN),FONTSIZE20;</p><blockquote><p>考虑到在极端行情里,高低点总是在屏幕外边,对参数做一点微调:</p><p>// 显示前一根 K 线的高低点<br>DRAWNUMBER(ISLASTBAR,H+1 * MINPRICE,REF(H,1),10,COLORWHITE),FONTSIZE20;<br>DRAWNUMBER(ISLASTBAR,L+0 * MINPRICE,REF(L,1),1,COLORWHITE),FONTSIZE20;</p></blockquote><p>//当根K线<br>DRAWNUMBER(ISLASTBAR,H+4<em>MINPRICE,REF(H,0),0,COLORMAGENTA),FONTSIZE20;<br>DRAWNUMBER(ISLASTBAR,L-7</em>MINPRICE,REF(L,0),0,COLORLIGHTGREEN),FONTSIZE20;</p><p>//DRAWNUMBER(ISLASTBAR,(C+O)/2,REF(H,1)-REF(L,1),0,COLORYELLOW),VALIGN2;</p><h2 id="放量K线变色"><a href="#放量K线变色" class="headerlink" title="放量K线变色"></a>放量K线变色</h2><p>DRAWCOLORKLINE(ISUP,COLORRED,M);//收盘价大于开盘价，绘制红色空心K线</p><p>DRAWCOLORKLINE(ISUP AND VOL&gt;MA(VOL,5)*2,COLORYELLOW,M);//阳线放量K线</p><p>DRAWCOLORKLINE(ISDOWN,COLORCYAN,0);//收盘价小于开盘价，绘制青色实心K线</p><p>DRAWCOLORKLINE(ISDOWN AND VOL&gt;MA(VOL,5)*2,COLORYELLOW,0);//</p><p>DRAWCOLORKLINE(ISEQUAL,COLORWHITE,1);//收盘价等于开盘价，绘制白色十字线</p><p>DRAWCOLORKLINE(ISEQUAL AND VOL&gt;MA(VOL,5)*2,COLORYELLOW,1);//</p>]]></content>
      
      
      
        <tags>
            
            <tag> 文华财经设置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【电影】神之一手--鬼手</title>
      <link href="/2021/04/19/ckyyiqyj4004vf8ue4vr0a39v/"/>
      <url>/2021/04/19/ckyyiqyj4004vf8ue4vr0a39v/</url>
      
        <content type="html"><![CDATA[<p>这部电影给我很大的触动。</p><p>电影讲述了一个天赋异禀的棋手男孩复仇的故事。<span id="more"></span></p><p>起初，在能力欠佳的时候，男孩遇到一个独臂男，独臂男对男孩进行了残酷的训练。5秒速记棋谱、更快得反应速度，每下一局在寺庙的院子里落一块石头，直到石头堆满院子，男孩胜独臂男。男孩的棋艺到位了。接着训无盘下法，一间木屋，男孩被关在里边。木屋门口是一个石刻的棋盘，独臂男在木屋外和男孩对弈。这训练的是专注和心志。一场接一场的对弈，在绝望的边缘，男孩最终没有放弃，他战胜了自己的心魔。最终，男孩胜了独臂男。现在，可以下山了。</p><p>凭借男孩的棋艺，独臂男靠作弊赌赢了一场又一场，赢了一袋又一袋的钱。赌，是没有好下场的。一个输给独臂男的人，带着手下在巷子里杀了独臂男，男孩凭借瘦小的身材在窄巷子里躲过一劫。</p><p>独臂男的死让男孩明白，身体的强大也很关键。他回到寺庙，倒挂自我对弈，每下一步，做一次倒挂仰卧起坐。时间一晃男孩长大了，块状腹肌，身体素质不同往日。</p><p>男孩开始了自己的复仇之路。。。。。</p><p>我最受触动的是男孩的自律。起初，他是被迫学习和训练。后来，是有目的的学习和训练。为了达成既往的目的，他战胜了身体和心志。而最后的最后，他达成了自己的目的。</p><p>知所能做，并做到；知所不足，并补足。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神之一手--鬼手 </tag>
            
            <tag> 自律 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NO.1</title>
      <link href="/2021/04/19/ckyyiqyif001tf8ue42jr7g5b/"/>
      <url>/2021/04/19/ckyyiqyif001tf8ue42jr7g5b/</url>
      
        <content type="html"><![CDATA[<p>今天数据</p><table><thead><tr><th>日期</th><th>平仓</th><th>手续费</th><th>惩罚</th><th>次数*10</th><th>累计平仓</th><th>累计手续费</th><th>累计权益</th></tr></thead><tbody><tr><td>2021年4月15日</td><td>10</td><td>264</td><td></td><td>19</td><td>10</td><td>264</td><td>-122</td></tr></tbody></table><p>状态：正常；</p><p>耐心：正常：</p><p>零错误：有1点<span id="more"></span></p><p>对于最开始这五天，在其他要求不变的情况下，重点要求零错误的实现。今天19笔交易，18笔是干净利索的，只有一笔V，需要考虑。当时的情况是：按错了键，4和1都按下去了，对这个键盘有点不熟悉。开进去之后有点蒙，这一单正常亏1跳。</p><p>对于今天的表现，我是能接受的。没有盈利是因为：今天行情最大的sa并不在体系内，按体系打了的行情都是唆唆哆哆的，前几天行情大，今天文华指数是调整的状态。在这种行情里，主要是熬，熬过这种行情，这种行情里只要做到尽量微亏或亏点手续费，大行情来的时候抓住就好了。切不能在这种行情里大亏，那是很忌讳的。</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210512175244.png" alt="image-20210512175244396"></p><p>2021年4月20日09:09:48：</p><p>在一个人想去真正做一个事的时候，他会莫名遇到很多问题。就像打坐的时候，脑子里杂念纷飞。是打坐带来的吗？并不是，只是打坐的时候才觉察到而已。同理，现在遇到的非技术性问题，正是需要一个一个去解决的。</p>]]></content>
      
      
      <categories>
          
          <category> 日总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>惊梦</title>
      <link href="/2021/04/01/ckyyiqyj00049f8uecbchcxj7/"/>
      <url>/2021/04/01/ckyyiqyj00049f8uecbchcxj7/</url>
      
        <content type="html"><![CDATA[<p>昨晚经历了四场梦，场场都是惊梦。</p><p>晚上间隔三次惊醒，顾不上去开灯，慌张得摸了摸身边的女友，再二确认是她，还在身边，并不是如梦里一样。</p><p>不想去回忆梦里具体的场景，让我夜半惊神的，都是一幕幕骇人。</p><p>只是庆幸的是，那只是一场梦，一场幻梦。</p><p>当我觉醒这一点的时候，有一种逃离生死线的感觉。</p><p>生活中，好好活着，珍惜身边的亲人。那种失去的感觉如梦里一样让人恸。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决国内gitclone慢的问题</title>
      <link href="/2021/03/29/ckyyiqyi80015f8ue4nki6k0a/"/>
      <url>/2021/03/29/ckyyiqyi80015f8ue4nki6k0a/</url>
      
        <content type="html"><![CDATA[<p>本文利用国内的克隆网站进行克隆加速</p><span id="more"></span><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>当我们在git bash里clone资源的时候往往很慢，只有十几K。</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210328134011.png" alt="image-20210328134011352"></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ul><li><p>第一步：打开<a href="http://www.gitclone.com/">www.gitclone.com</a></p></li><li><p>第二步：嵌入一段字符：</p><p>  比如：目标对象是：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>  嵌入字符：git clone https://<strong>gitclone.com</strong>/github.com/xxx 加速克隆</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitclone.com/github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>  <img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210328134205.png" alt="image-20210328134205284"></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> gitclone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用国内镜像源安装——升级pygame</title>
      <link href="/2021/03/29/ckyyiqyi7000zf8ue7knfcei8/"/>
      <url>/2021/03/29/ckyyiqyi7000zf8ue7knfcei8/</url>
      
        <content type="html"><![CDATA[<p>当下最快最便捷的安装方法：利用pip命令就可以直接安装。</p><ul><li><p>前提：首先确保你有pip。</p><ul><li>win+R 输入cmd，再输入 pip –version可查看pip版本，如果没有先安装pip，一般来说现在安装python的过程中可以选择连带安装pip并添加环境变量的。</li><li>输入 pip list ，可以查看当前所有的package。<span id="more"></span></li></ul></li><li><p>具体安装pygame的步骤：</p><ul><li><p>直接在命令行输入以下代码就可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pycharm -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><ul><li><p>说明：后面的网址就是国内的镜像源。类似的镜像源还有：</p><p>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><p>阿里云：<a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a></p><p>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></p><p>华中理工大学：<a href="http://pypi.hustunique.com/">http://pypi.hustunique.com/</a></p><p>山东理工大学：<a href="http://pypi.sdutlinux.org/">http://pypi.sdutlinux.org/</a></p><p>豆瓣：<a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></p></li></ul></li><li><p>升级：python -m pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> –upgrade pip</p></li><li><p>备注：打开cmd的方式也可用在文件目录下按住shift点击右键选择“在此处打开powershell窗口”进行操作。在powershell中可以允许 复制粘贴</p></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> gitclone </tag>
            
            <tag> 国内镜像 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pycharm主题配置</title>
      <link href="/2021/03/29/ckyyiqyi1000hf8ued5hadsbz/"/>
      <url>/2021/03/29/ckyyiqyi1000hf8ued5hadsbz/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210330215553.png" alt="image-20210330215553470"></p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210330215659.png" alt="image-20210330215659136"></p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210330215722.png" alt="image-20210330215722154"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pycharm快捷键</title>
      <link href="/2021/03/29/ckyyiqyi2000lf8ue9t27gfbq/"/>
      <url>/2021/03/29/ckyyiqyi2000lf8ue9t27gfbq/</url>
      
        <content type="html"><![CDATA[<p><strong>最重要的快捷键</strong></p><ol><li>ctrl+shift+A:万能命令行</li><li>shift两次:查看资源文件<span id="more"></span></li></ol><p>新建工程第一步操作</p><ol><li>module设置把空包分层去掉,compact empty middle package</li><li>设置当前的工程是utf-8,设置的Editor–&gt;File Encodings–&gt;全部改成utf-8,</li></ol><p>注释</p><ol><li>ctrl+/:单行注释</li></ol><p>光标操作</p><ol><li>ctrl+alt+enter:向上插入</li><li>shift+enter:向下插入</li><li>end:光标</li></ol><p>操作代码</p><ol><li>ctrl+d:复制粘贴一行</li><li>ctrl+y:删除一行</li><li>shift+F6:重命令</li><li>ctrl+O:复写代码</li></ol><p>格式代码及其他功能</p><ol><li>ctrl+alt+L:格式代码</li><li>在代码中使用alt+insert:Generate,可以get/set等操作</li><li>ctrl+alt+T:添加try/catch</li><li>ctrl+alt+M:抽取代码</li><li>ctrl+alt+F:变量抽取全局变量</li><li>还需要设置前缀:Editor–&gt;code style–&gt;java–&gt;code Genertion–&gt;设置Field的前缘为m添加</li><li>ctrl+alt+v:方法体内值抽取成变量</li><li>保存成模板:ctrl+shift+L,这个是自定义的(save as live Template)</li><li>选中内容:tab进行退格</li><li>shift+tab:反向退格</li><li>alt+shift+上下键:选中代码移动</li><li>ctrl+shift+上下键:可以移动当前方法体,如果移动一行代码只能在代码体内移动</li><li>ctrl+shift+U:代码大小写</li><li>ctrl+shift+enter:补全代码(一行尾添加分号,如果是if等添加括号)</li></ol><p>进入代码</p><ol><li>ctrl+鼠标:进入代码</li><li>ctrl+B:进入代码</li><li>ctrl+shift+12:最大化窗口</li></ol><p>替换查找</p><ol><li>ctrl+r:替换</li><li>ctrl+F:查找</li><li>ctrl+shift+F:全局查找</li><li>ctrl+shift+R:全局替换</li><li>ctrl+shift+i:快捷查看方法实现的内容</li><li>ctrl+p:查看参数</li><li>ctrl+Q:查看文档描述</li><li>shift+F1:查看api文档</li><li>ctrl+F12:查看类的方法</li><li>ctrl+H:查看类的继承关系</li><li>查看变量的赋值情况:</li><li>shift+ctrl+a:输入analyze data flow to Here</li><li>ctrl+alt+H:查看方法在那里被调用了</li><li>ctrl+{}:可以定位方法体的括号</li><li>F3:查看选中的内容</li><li>shift+F3:反向查看内容</li><li>ctrl+alt+B:查询那些类实现了光标所在的接口</li><li>ctrl+U:查看父类</li><li>ctrl+E:最近编辑的文件列表</li><li>ctrl+alt+home:查看布局与对应的类</li><li>ctrl+alt+H:查看当前方法在那里进行调用</li></ol><p>运行编译</p><ol><li>ctrl+F9:构建</li><li>shift+F10:运行</li></ol><p>工程目录操作</p><ol><li>新建文件及工程:选中要创建目录使用alt+insert</li><li>ctrl+shift+a:输入show in explorer–&gt;打开相应目录</li><li>ctrl+alt+s:打开软件设置</li><li>ctrl+alt+shift+s:打开module设置</li><li>alt+1:当前目录区</li><li>alt+7:当前类的方法列表查看</li><li>ctrl+tab:切换目录及视图</li><li>alt+shift+c:查看工程最近更改的地方</li><li>ctrl+J:livetemp模板查看</li></ol><p>代码快捷操作</p><ol><li>没有操作完成操作可以先写todo进行,就可以在todo的窗口进行查看</li><li>F11定义书签</li><li>shift+F11:查看书签</li><li>ctrl+J:快捷调出模板</li><li>alt+点击断点:禁用断点</li><li>调试状态下按下:alt查看变量能审查表达式的值</li></ol><p>组合快捷键</p><ol><li>F2:定位错误</li><li>alt+enter:修正错误</li><li>alt+鼠标:进入列编辑模式</li><li>ctrl+w:选中单词</li><li>或其他组合操作</li></ol><p>编辑的位置</p><p>ctrl+alt+左右键:这个是定位到编辑的位置<br>1.Pycharm中快捷键大全，遇到一个更新一个<br>撤销与反撤销：Ctrl + z，Ctrl + Shift + z<br>缩进、不缩进：Tab、Shift + tab<br>运行：Shift + F10<br>批量注释：Ctrl + /<br>快速查看文档：Ctrl + q<br>当光标在代码中间，如何回车到下一行：Shift + 回车<br>当鼠标在代码下一行非开头位置，如何跳转到上一行末尾：Ctrl + backspace（退格键）<br>当一行代码太长时，我们如何切换到下一行，但是格式不变：Ctrl + 回车<br>2.Pycharm中使用技巧<br>函数提示出错，如下图。其实函数是没有错误的，只是格式不对。只要空两格（就是如图3，4行空出来）就行；函数与函数之间也要空两格</p><hr><p>超级好用的快捷键——效率之王<br>批量注释：Ctrl + /<br>快速查看文档：Ctrl + q<br>进入列编辑模式：alt+鼠标<br>选中单词：ctrl+w<br>搜索：ctrl+f<br>全局搜索：ctrl+shift+f</p><p>快速修复或优化代码：ALT +回车</p><p>切换最近编辑的文件：ctr + E</p><p>查找错误：F2</p><p>任意位置换行　<code>Shfit + Enter</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora常用快捷键收集</title>
      <link href="/2021/03/29/ckyyiqyi3000rf8ue0x9mbuqr/"/>
      <url>/2021/03/29/ckyyiqyi3000rf8ue0x9mbuqr/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora常用的快捷键"><a href="#Typora常用的快捷键" class="headerlink" title="Typora常用的快捷键"></a>Typora常用的快捷键</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>您可以使用快捷键快速插入或修改样式或执行Typora支持的其他操作。</p><p>您可以在菜单栏的每个菜单项的右侧找到快捷键。<span id="more"></span></p><h2 id="经常使用的快捷键"><a href="#经常使用的快捷键" class="headerlink" title="经常使用的快捷键"></a>经常使用的快捷键</h2><h3 id="自动完成"><a href="#自动完成" class="headerlink" title="自动完成"></a>自动完成</h3><p>在macOS上，您可以<code>Esc</code>按键打开内嵌数学的内联预览，表情符号的自动完成等。</p><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><table><thead><tr><th align="left">功能</th><th align="left">热键（Windows / Linux）</th><th align="left">热键（macOS）</th></tr></thead><tbody><tr><td align="left">新</td><td align="left">Ctrl + N.</td><td align="left">Command + N.</td></tr><tr><td align="left">新窗户</td><td align="left">Ctrl + Shift + N.</td><td align="left">Command + Shift + N.</td></tr><tr><td align="left">新标签</td><td align="left"><em>（不支持）</em></td><td align="left">Command + T.</td></tr><tr><td align="left">打开</td><td align="left">Ctrl + O.</td><td align="left">Command + O.</td></tr><tr><td align="left">快速打开</td><td align="left">Ctrl + P.</td><td align="left">Command + Shift + O.</td></tr><tr><td align="left">重新打开已关闭的文件</td><td align="left">Ctrl + Shift + T.</td><td align="left">Command + Shift + T.</td></tr><tr><td align="left">保存</td><td align="left">Ctrl + S.</td><td align="left">Command + S.</td></tr><tr><td align="left">另存为/重复</td><td align="left">Ctrl + Shift + S.</td><td align="left">Command + Shift + S.</td></tr><tr><td align="left">偏爱</td><td align="left">Ctrl +，</td><td align="left">Command +，</td></tr><tr><td align="left">关</td><td align="left">Ctrl + W</td><td align="left">Command + W</td></tr></tbody></table><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><table><thead><tr><th align="left">功能</th><th align="left">热键（Windows / Linux）</th><th align="left">热键（macOS）</th></tr></thead><tbody><tr><td align="left">新段落</td><td align="left">输入</td><td align="left">输入</td></tr><tr><td align="left">新队</td><td align="left">Shift + Enter</td><td align="left">Shift + Enter</td></tr><tr><td align="left">切</td><td align="left">Ctrl + X.</td><td align="left">Command + X.</td></tr><tr><td align="left">复制</td><td align="left">Ctrl + C.</td><td align="left">Command + C.</td></tr><tr><td align="left">糊</td><td align="left">Ctrl + V.</td><td align="left">Command + V.</td></tr><tr><td align="left">复制为Markdown</td><td align="left">Ctrl + Shift + C.</td><td align="left">Command + Shift + C.</td></tr><tr><td align="left">粘贴为纯文本</td><td align="left">Ctrl + Shift + V.</td><td align="left">Command + Shift + V.</td></tr><tr><td align="left">全选</td><td align="left">Ctrl + A.</td><td align="left">Command + A.</td></tr><tr><td align="left">选择行/句子 选择行（在表格中）</td><td align="left">Ctrl + L.</td><td align="left">Command + L.</td></tr><tr><td align="left">删除行（在表中）</td><td align="left">Ctrl + Shift + Backspace</td><td align="left">Command + Shift + Backspace</td></tr><tr><td align="left">选择样式范围 选择单元格（在表格中）</td><td align="left">Ctrl + E.</td><td align="left">Command + E.</td></tr><tr><td align="left">选择Word</td><td align="left">Ctrl + D.</td><td align="left">Command + D.</td></tr><tr><td align="left">删除Word</td><td align="left">Ctrl + Shift + D.</td><td align="left">Command + Shift + D.</td></tr><tr><td align="left">跳到顶部</td><td align="left">Ctrl + Home</td><td align="left">Command +↑</td></tr><tr><td align="left">跳转到选择</td><td align="left">Ctrl + J</td><td align="left">Command + J</td></tr><tr><td align="left">跳到Buttom</td><td align="left">Ctrl + End</td><td align="left">Command +↓</td></tr><tr><td align="left">找</td><td align="left">Ctrl + F.</td><td align="left">Command + F.</td></tr><tr><td align="left">找下一个</td><td align="left">F3 /回车</td><td align="left">Command + G / Enter</td></tr><tr><td align="left">找到上一个</td><td align="left">Shift + F3 / Shift + Enter</td><td align="left">Command + Shift + G / Shift + Enter</td></tr><tr><td align="left">更换</td><td align="left">Ctrl + H.</td><td align="left">Command + H.</td></tr></tbody></table><h3 id="段"><a href="#段" class="headerlink" title="段"></a>段</h3><table><thead><tr><th align="left">功能</th><th align="left">热键（Windows / Linux）</th><th align="left">热键（macOS）</th></tr></thead><tbody><tr><td align="left">标题1到6</td><td align="left">Ctrl + 1/2/3/4/5/6</td><td align="left">Command + 1/2/3/4/5/6</td></tr><tr><td align="left">段</td><td align="left">Ctrl + 0</td><td align="left">命令+ 0</td></tr><tr><td align="left">提高标题级别</td><td align="left">Ctrl + =</td><td align="left">命令+ =</td></tr><tr><td align="left">降低标题级别</td><td align="left">Ctrl + -</td><td align="left">命令+ -</td></tr><tr><td align="left">表</td><td align="left">Ctrl + T.</td><td align="left">Command + Option + T.</td></tr><tr><td align="left">代码围栏</td><td align="left">Ctrl + Shift + K.</td><td align="left">Command + Option + C.</td></tr><tr><td align="left">数学块</td><td align="left">Ctrl + Shift + M.</td><td align="left">Command + Option + B.</td></tr><tr><td align="left">引用</td><td align="left">Ctrl + Shift + Q.</td><td align="left">Command + Option + Q.</td></tr><tr><td align="left">订购清单</td><td align="left">Ctrl + Shift + [</td><td align="left">Command + Option + O.</td></tr><tr><td align="left">无序列表</td><td align="left">Ctrl + Shift +]</td><td align="left">Command + Option + U.</td></tr><tr><td align="left">缩进</td><td align="left">Ctrl + [/ Tab</td><td align="left">Command + [/ Tab</td></tr><tr><td align="left">减少缩进</td><td align="left">Ctrl +] / Shift + Tab</td><td align="left">Command +] / Shift + Tab</td></tr></tbody></table><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><table><thead><tr><th align="left">功能</th><th align="left">热键（Windows / Linux）</th><th align="left">热键（macOS）</th></tr></thead><tbody><tr><td align="left">强大</td><td align="left">Ctrl + B.</td><td align="left">Command + B.</td></tr><tr><td align="left">重点</td><td align="left">Ctrl + I</td><td align="left">命令+我</td></tr><tr><td align="left">强调</td><td align="left">Ctrl + U.</td><td align="left">Command + U.</td></tr><tr><td align="left">码</td><td align="left">Ctrl + Shift +`</td><td align="left">Command + Shift +`</td></tr><tr><td align="left">罢工</td><td align="left">Alt + Shift + 5</td><td align="left">Control + Shift +`</td></tr><tr><td align="left">超链接</td><td align="left">Ctrl + K.</td><td align="left">Command + K.</td></tr><tr><td align="left">图片</td><td align="left">Ctrl + Shift + I</td><td align="left">Command + Control + I</td></tr><tr><td align="left">清除格式</td><td align="left">Ctrl + \</td><td align="left">命令+</td></tr></tbody></table><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><table><thead><tr><th align="left">功能</th><th align="left">热键（Windows / Linux）</th><th align="left">热键（macOS）</th></tr></thead><tbody><tr><td align="left">切换补充工具栏</td><td align="left">Ctrl + Shift + L.</td><td align="left">Command + Shift + L.</td></tr><tr><td align="left">大纲</td><td align="left">Ctrl + Shift + 1</td><td align="left">Command + Control + 1</td></tr><tr><td align="left">用品</td><td align="left">Ctrl + Shift + 2</td><td align="left">Command + Control + 2</td></tr><tr><td align="left">文件树</td><td align="left">Ctrl + Shift + 3</td><td align="left">Command + Control + 3</td></tr><tr><td align="left">源代码模式</td><td align="left">Ctrl + /</td><td align="left">命令+ /</td></tr><tr><td align="left">Fouus模式</td><td align="left">F8</td><td align="left">F8</td></tr><tr><td align="left">打字机模式</td><td align="left">F9</td><td align="left">F9</td></tr><tr><td align="left">Toggler全屏</td><td align="left">F11</td><td align="left">Command + Option + F.</td></tr><tr><td align="left">真实大小</td><td align="left">Ctrl + Shift + 0</td><td align="left"><em>（不支持）</em></td></tr><tr><td align="left">放大</td><td align="left">Ctrl + Shift + =</td><td align="left"><em>（不支持）</em></td></tr><tr><td align="left">缩小</td><td align="left">Ctrl + Shift + -</td><td align="left"><em>（不支持）</em></td></tr><tr><td align="left">在打开的Documnets之间切换</td><td align="left">Ctrl + Tab</td><td align="left">命令+`</td></tr><tr><td align="left">切换DevTools</td><td align="left">Ctrl + Shift + I</td><td align="left">-</td></tr></tbody></table><h2 id="更改快捷键"><a href="#更改快捷键" class="headerlink" title="更改快捷键"></a>更改快捷键</h2><p>用户可以在Typora的菜单栏中为命令设置或重新分配快捷键。本文将介绍如何自定义Typora的键绑定。</p><h3 id="苹果系统"><a href="#苹果系统" class="headerlink" title="苹果系统"></a>苹果系统</h3><p>我们使用macOS的系统功能来自定义Typora在macOS上的键绑定。</p><ol><li><p>打开<code>System Preference</code>→ <code>Keyboard</code>，选择选项卡<code>Shortcuts</code>。<code>App Shortcuts</code>在左侧面板中选择。</p><p><img src="http://support.typora.io/media/custom-key-binding/Snip20160814_1.png" alt="Snip20160814_1"></p></li><li><p>单击“+”按钮，将弹出一个对话框。从字段中选择“Typora.app” <code>Application</code>，然后输入要添加的菜单命令的确切名称，然后输入要分配的快捷键。</p><p>例如，假设您要添加/更改快捷键以固定Typora的窗口，您可以填写如下对话框：</p><p><img src="http://support.typora.io/media/custom-key-binding/Snip20160814_5.png" alt="Snip20160814_5"></p><p>然后<code>Command+Shift+P</code>将是菜单命令“always On Top”的快捷键</p></li></ol><h3 id="Windows-Linux"><a href="#Windows-Linux" class="headerlink" title="Windows / Linux"></a>Windows / Linux</h3><p><em>（需要Typora≥v0.9.16）</em></p><ol><li><p>在Typora中打开<code>Menu</code>→ <code>Preference</code>，然后单击“打开高级设置”。</p><p><img src="http://support.typora.io/media/custom-key-binding/sshot-1.png" alt="sshot-1"></p></li><li><p><code>conf.user.json</code>从打开的“文件浏览” 打开并编辑。如果没有这样的文件，请创建一个。</p></li><li><p>设置或添加表示键绑定的JSON对象，例如：</p><p><img src="http://support.typora.io/media/custom-key-binding/Snip20160814_7.png" alt="Snip20160814_7"></p></li><li><p>重新启动Typora，将应用新的键绑定。</p><p><img src="http://support.typora.io/media/custom-key-binding/sshot-2.png" alt="sshot-2"></p></li></ol><p>您可以在本机窗口样式的菜单栏中设置或更改菜单项的快捷键。</p><h4 id="问：快捷键在Ubuntu上不起作用"><a href="#问：快捷键在Ubuntu上不起作用" class="headerlink" title="问：快捷键在Ubuntu上不起作用"></a>问：快捷键在Ubuntu上不起作用</h4><p>解决方案：请查看<a href="https://help.ubuntu.com/community/KeyboardShortcuts%E5%92%8Chttps://askubuntu.com/questions/208310/ctrl-a-doesnt-work-in-browsers%E3%80%82">https://help.ubuntu.com/community/KeyboardShortcuts和https://askubuntu.com/questions/208310/ctrl-a-doesnt-work-in-browsers。</a></p><p>在<a href="https://github.com/typora/wiki-website">Github上</a>托管。</p><p><em>推荐一个Typora教程博客，<a href="https://blog.csdn.net/cris_zz/article/details/82919401">https://blog.csdn.net/cris_zz/article/details/82919401</a> ，讲的挺详细，不过有些图片加载有问题。</em></p><p>转载于:<a href="https://www.cnblogs.com/gxh195/p/10657200.html">https://www.cnblogs.com/gxh195/p/10657200.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python内置函数next()</title>
      <link href="/2021/03/29/ckyyiqyi4000uf8ue0knza2af/"/>
      <url>/2021/03/29/ckyyiqyi4000uf8ue0knza2af/</url>
      
        <content type="html"><![CDATA[<p>next（）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def next(iterator, default=None): # real signature unknown; restored from __doc__</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    next(iterator[, default])</span><br><span class="line">    </span><br><span class="line">    Return the next item from the iterator. If default is given and the iterator</span><br><span class="line">    is exhausted, it is returned instead of raising StopIteration.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>next（）函数接收的是一个迭代器，return的是该迭代器的next item。<span id="more"></span></p><blockquote><p><strong>next()函数自动调用文件第一行并返回下一行</strong>。这句话的意思是说第一次调用next（）函数会直接把第一行拿出来赋给左边，同时返回到下一行。第二次调用就把第二行拿出来，同时返回到下一行。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">filename = &#x27;sitka_weather_07-2014.csv&#x27;</span><br><span class="line">with open(filename) as f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    header_row = next(reader)</span><br><span class="line">    print(header_row)</span><br><span class="line">    a=next(reader)</span><br><span class="line">    print(a)</span><br><span class="line">    b=next(reader)</span><br><span class="line">    print(b)</span><br><span class="line">      </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210324213851.png" alt="image-20210324213851075"></p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210324213901.png" alt="image-20210324213901001"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python内置函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python内置函数enumerate</title>
      <link href="/2021/03/29/ckyyiqyi6000xf8uecoodgced/"/>
      <url>/2021/03/29/ckyyiqyi6000xf8uecoodgced/</url>
      
        <content type="html"><![CDATA[<p>enumerate()说明<br>enumerate()是python的内置函数<br>enumerate在字典上是枚举、列举的意思<br>对于一个可迭代的（iterable）/可遍历的对象（如列表、字符串），enumerate将其组成一个索引序列，利用<strong>它可以同时获得索引和值</strong><br>enumerate多用于在for循环中得到计数<span id="more"></span><br>例如对于一个seq，得到：</p><p>(0, seq[0]), (1, seq[1]), (2, seq[2])</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(0, seq[0]), (1, seq[1]), (2, seq[2])</span><br></pre></td></tr></table></figure><p>当尝试去打印enumerate(list)的时候，返回是一个enumerate对象</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210324215209.png" alt="image-20210324215209069"></p><p>enumerate()使用<br>如果对一个列表，既要遍历索引又要遍历元素时，首先可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [&quot;这&quot;, &quot;是&quot;, &quot;一个&quot;, &quot;测试&quot;]</span><br><span class="line">for i in range (len(list1)):</span><br><span class="line">    print i ,list1[i]</span><br></pre></td></tr></table></figure><p>上述方法有些累赘，利用enumerate()会更加直接和优美：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list1 = [&quot;这&quot;, &quot;是&quot;, &quot;一个&quot;, &quot;测试&quot;]</span><br><span class="line">for index, item in enumerate(list1):</span><br><span class="line">    print index, item</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">0 这</span><br><span class="line">1 是</span><br><span class="line">2 一个</span><br><span class="line">3 测试</span><br></pre></td></tr></table></figure><p>enumerate还可以接收第二个参数，用于指定结果中索引起始值，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">list1 = [&quot;这&quot;, &quot;是&quot;, &quot;一个&quot;, &quot;测试&quot;]</span><br><span class="line">for index, item in enumerate(list1, 5):</span><br><span class="line">    print(index,item)</span><br><span class="line">    </span><br><span class="line">    输出</span><br><span class="line">5 这</span><br><span class="line">6 是</span><br><span class="line">7 一个</span><br><span class="line">8 测试</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>count = len(open(filepath, ‘r’).readlines())<br>1<br>这种方法简单，但是可能比较慢，当文件比较大时甚至不能工作。</p><p>可以利用enumerate()：</p><p>count = 0<br>for index, line in enumerate(open(filepath,’r’))：<br>    count += 1<br>————————————————</p>]]></content>
      
      
      
        <tags>
            
            <tag> python内置函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora+PicGo+Github/Gitee搭建免费稳定的图床</title>
      <link href="/2021/03/29/ckyyiqyi90017f8uegubh8omi/"/>
      <url>/2021/03/29/ckyyiqyi90017f8uegubh8omi/</url>
      
        <content type="html"><![CDATA[<p>整个过程有点麻烦。参考这两个文章：</p><ul><li><a href="https://blog.csdn.net/m0_37903882/article/details/105417479">https://blog.csdn.net/m0_37903882/article/details/105417479</a></li><li><a href="https://blog.csdn.net/qq_40683225/article/details/105124810?utm_term=picgo%E9%85%8D%E7%BD%AEgitee&amp;utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-1-105124810&amp;spm=3001.4430">https://blog.csdn.net/qq_40683225/article/details/105124810?utm_term=picgo%E9%85%8D%E7%BD%AEgitee&amp;utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-1-105124810&amp;spm=3001.4430</a></li></ul><p>使用：</p><ul><li>用截图工具如<code>QQ</code>的<code>Ctrl+ALT+A</code>快捷键对需要的区域截图，存储到剪贴板中，然后按下刚才在<code>picgo</code>设置好的上传快捷键<code>Ctrl+Shift+P</code>组合键上传到<code>Gitee</code>，会返回图片的上传地址到剪贴板中，最后在<code>typora</code>中<code>ctrl+v</code>粘贴。</li><li>最简单的就是在设置好typora和pigo之后，直接截图往typora里甩就行了，本地直接拖就行了</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> typora </tag>
            
            <tag> picgo </tag>
            
            <tag> gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo常见报错</title>
      <link href="/2021/03/29/ckyyiqyi90018f8ueblvqbovn/"/>
      <url>/2021/03/29/ckyyiqyi90018f8ueblvqbovn/</url>
      
        <content type="html"><![CDATA[<p>本来想自己总结一下：结果发现大神总结的更全面，留存：</p><p><a href="https://www.dazhuanlan.com/2020/01/06/5e12e0294f848/">https://www.dazhuanlan.com/2020/01/06/5e12e0294f848/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决国内gitclone慢的问题</title>
      <link href="/2021/03/29/ckyyiqyia001bf8ue9xf656nl/"/>
      <url>/2021/03/29/ckyyiqyia001bf8ue9xf656nl/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo换主题乱码问题的解决"><a href="#hexo换主题乱码问题的解决" class="headerlink" title="hexo换主题乱码问题的解决"></a>hexo换主题乱码问题的解决</h1><h2 id="问题的表现"><a href="#问题的表现" class="headerlink" title="问题的表现"></a>问题的表现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;_layout.swig&#x27; %&#125; &#123;% import &#x27;_macro/post.swig&#x27; as post_template %&#125;....................</span><br></pre></td></tr></table></figure><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>原因是hexo在5.0之后把swig给删除了需要自己手动安装</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure><p>之后重新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean          </span><br><span class="line">hexo generate      </span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> gitclone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora+picgo错误：上传图片失败。错误信息：Failed to fetchxt</title>
      <link href="/2021/03/29/ckyyiqyib001df8uea4zd9csd/"/>
      <url>/2021/03/29/ckyyiqyib001df8uea4zd9csd/</url>
      
        <content type="html"><![CDATA[<p>错误提示如图：</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//image-20210323144749430.png" alt="image-20210323144749430"></p><p>经过几番上网查阅资料，原因确定为端口冲突导致。<span id="more"></span></p><p>tpyora的端口是36677，这个貌似不能改，那就只能该picgo</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//image-20210323144948450.png" alt="image-20210323144948450"></p><p>接着，查看picGo的端口，这个是我已经改好的，出问题之前端口是36681。包括这个监听地址，也要保持和typora一致就好。</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//image-20210323145050309.png" alt="image-20210323145050309"></p>]]></content>
      
      
      
        <tags>
            
            <tag> typora </tag>
            
            <tag> picgo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何修改hexo中主题的css</title>
      <link href="/2021/03/29/ckyyiqyic001jf8uegxz15751/"/>
      <url>/2021/03/29/ckyyiqyic001jf8uegxz15751/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>当我们需要对hexo的主题进行更深入的css和js修改的时候会发现一个优先级的问题，而且在浏览器中呈现的过程中这个优先级不好控制。本文解决这个问题</p></blockquote><p>最开始想到的解决办法是：</p><p>既然主题是通过main.css导入各个分支的。（这个导入过程在浏览器那边显示的可能每次不一样）。那我直接在main.css最后加入修改的代码就可以保证我的代码最后执行覆盖前边的。结果还是想的太好而已。</p><span id="more"></span><h2 id="最后的解决办法"><a href="#最后的解决办法" class="headerlink" title="最后的解决办法"></a><strong>最后的解决办法</strong></h2><p>在相应的分支处，我们修改post的btn这个类的显示效果：</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210329114021.png" alt="image-20210329114021231"></p><p>具体做法：利用full x-path 把css保证传递到位，同时用  !important  给代码最高的优先权以保证优先执行。这个做法可能笨了一些，但是是有用的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">body div main div div div section article div div div a &#123;</span><br><span class="line">  color: <span class="comment">#ff9a00 !important;</span></span><br><span class="line">  border-bottom: 2px solid <span class="comment">#ff9a00 !important;</span></span><br><span class="line">&#125;</span><br><span class="line">body div main div div div section article div div div &#123;</span><br><span class="line">  text-align: right !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后扎"><a href="#后扎" class="headerlink" title="后扎"></a>后扎</h2><p>通过在电脑上设置可以搜索文件内文字之后，找到了真正的main.css</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img//20210329144017.png" alt="image-20210329144017894"></p><p>也不对，前边那个是真的，这个是<code>hexo g</code>之后通过前边的形成的文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python中文指南</title>
      <link href="/2021/03/28/ckyyiqyhy000df8ue64km012r/"/>
      <url>/2021/03/28/ckyyiqyhy000df8ue64km012r/</url>
      
        <content type="html"><![CDATA[<h1 id="Python中文指南"><a href="#Python中文指南" class="headerlink" title="Python中文指南"></a>Python中文指南</h1><p><a href="http://python.iswbm.com/en/latest/">http://python.iswbm.com/en/latest/</a></p><h1 id="PyCharm-中文指南"><a href="#PyCharm-中文指南" class="headerlink" title="PyCharm 中文指南"></a>PyCharm 中文指南</h1><p><a href="http://pycharm.iswbm.com/zh_CN/latest/">http://pycharm.iswbm.com/zh_CN/latest/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python中文指南 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python中的序列</title>
      <link href="/2021/03/28/ckyyiqyi2000nf8uehfzv7vrs/"/>
      <url>/2021/03/28/ckyyiqyi2000nf8uehfzv7vrs/</url>
      
        <content type="html"><![CDATA[<h1 id="列表List"><a href="#列表List" class="headerlink" title="列表List"></a>列表List</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h3><p>可创建一个整数列表，一般用在 for 循环中。</p><p>返回：返回的是一个可迭代对象（类型是对象），而不是列表类型， 所以打印的时候不会打印列表，<span id="more"></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">range</span>(start, stop,[step])</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>start: 计数从 start 开始。默认是从 0 开始。例如range（5）等价于range（0， 5）;</li><li>top: 计数到 stop 结束，但不包括 stop。例如：range（0， 5） 是[0, 1, 2, 3, 4]没有5；</li><li>step：步长，默认为1。例如：range（0， 5） 等价于 range(0, 5, 1)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">big_num =[]</span><br><span class="line">for num in  range(1,11):</span><br><span class="line">    num = num**2</span><br><span class="line">    big_num.append(num)</span><br><span class="line">print(big_num)</span><br><span class="line"></span><br><span class="line">返回</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br><span class="line"></span><br><span class="line">这个例子可以用列表解析进行简化</span><br><span class="line">big_num =[num**2 for num in  range(1,11)]</span><br><span class="line">print(big_num)</span><br><span class="line">返回 同</span><br></pre></td></tr></table></figure><p><em>注意</em>：range()并不直接创建一个数字列表，需要用函数list()将range()的结果转换为列表。</p><h3 id="list"><a href="#list" class="headerlink" title="list()"></a>list()</h3><p>ist() 函数用于将元组转换为列表。</p><p>注：<strong>元组</strong>与列表是非常类似的，区别在于元组的元素值不能修改的、是不可变的，元组是放在括号中，列表是放于方括号中。一般来说，不可变的列表叫元组。元组可以像列表一样通过索引来访问。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list( tuple )</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>tuple – 要转换为列表的元组。</li></ul><p>返回：列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num  = list(range(5))</span><br><span class="line">print(num)</span><br><span class="line"></span><br><span class="line">返回</span><br><span class="line">[0, 1, 2, 3, 4]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num = list(&#x27;word&#x27;)</span><br><span class="line">print(num)</span><br><span class="line"></span><br><span class="line">返回</span><br><span class="line">[&#x27;w&#x27;, &#x27;o&#x27;, &#x27;r&#x27;, &#x27;d&#x27;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = list(&#x27;843613101&#x27;)</span><br><span class="line">print(list1)</span><br><span class="line">输出</span><br><span class="line">[&#x27;8&#x27;, &#x27;4&#x27;, &#x27;3&#x27;, &#x27;6&#x27;, &#x27;1&#x27;, &#x27;3&#x27;, &#x27;1&#x27;, &#x27;0&#x27;, &#x27;1&#x27;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tuple = (1,2,3,4,3,4,5,6)</span><br><span class="line">list1 = list(tuple)</span><br><span class="line">print(list1)</span><br><span class="line">输出</span><br><span class="line">[1, 2, 3, 4, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure><h3 id="min-max-sum"><a href="#min-max-sum" class="headerlink" title="min() max() sum()"></a>min() max() sum()</h3><p>对<strong>数字列表</strong>执行简单的统计计算</p><p>括号内是列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">big_num =[]</span><br><span class="line">for num in  range(1,1000001):</span><br><span class="line">    big_num.append(num)</span><br><span class="line"></span><br><span class="line">print(max(big_num))</span><br><span class="line">print(min(big_num))</span><br><span class="line">print(sum(big_num))</span><br><span class="line"></span><br><span class="line">返回</span><br><span class="line">1000000</span><br><span class="line">1</span><br><span class="line">500000500000</span><br></pre></td></tr></table></figure><h3 id="len"><a href="#len" class="headerlink" title="len()"></a>len()</h3><p>统计列表中元素的个数，括号内是列表或元组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">food =(&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;)</span><br><span class="line">print(len(food))</span><br><span class="line">或</span><br><span class="line">food =[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;]</span><br><span class="line">print(len(food))</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="dir"><a href="#dir" class="headerlink" title="dir()"></a>dir()</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1 = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;]</span><br><span class="line">print(dir(list1))</span><br><span class="line">输出</span><br><span class="line">[&#x27;__add__&#x27;, &#x27;__class__&#x27;, &#x27;__class_getitem__&#x27;, &#x27;__contains__&#x27;, &#x27;__delattr__&#x27;, &#x27;__delitem__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__getitem__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__iadd__&#x27;, &#x27;__imul__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__iter__&#x27;, &#x27;__le__&#x27;, &#x27;__len__&#x27;, &#x27;__lt__&#x27;, &#x27;__mul__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__reversed__&#x27;, &#x27;__rmul__&#x27;, &#x27;__setattr__&#x27;, &#x27;__setitem__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;append&#x27;, &#x27;clear&#x27;, &#x27;copy&#x27;, &#x27;count&#x27;, &#x27;extend&#x27;, &#x27;index&#x27;, &#x27;insert&#x27;, &#x27;pop&#x27;, &#x27;remove&#x27;, &#x27;reverse&#x27;, &#x27;sort&#x27;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate()"></a>enumerate()</h3><p>通过<code>enumerate</code>处理后的列表在循环遍历时会返回取到一个二元组，解包之后第一个值是索引，第二个值是元素，下面是一个简单的对比。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list1 = <span class="built_in">list</span>(<span class="string">&#x27;843613101&#x27;</span>)</span><br><span class="line">list2 = <span class="built_in">enumerate</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line">list3 = <span class="built_in">list</span>(<span class="built_in">enumerate</span>(list1))</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">&lt;<span class="built_in">enumerate</span> <span class="built_in">object</span> at <span class="number">0x000001EF1C6C8C80</span>&gt;</span><br><span class="line">[(<span class="number">0</span>, <span class="string">&#x27;8&#x27;</span>), (<span class="number">1</span>, <span class="string">&#x27;4&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;6&#x27;</span>), (<span class="number">4</span>, <span class="string">&#x27;1&#x27;</span>), (<span class="number">5</span>, <span class="string">&#x27;3&#x27;</span>), (<span class="number">6</span>, <span class="string">&#x27;1&#x27;</span>), (<span class="number">7</span>, <span class="string">&#x27;0&#x27;</span>), (<span class="number">8</span>, <span class="string">&#x27;1&#x27;</span>)]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">items = [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>, <span class="string">&#x27;Swift&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(items)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;index&#125;</span>: <span class="subst">&#123;items[index]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(items):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;index&#125;</span>: <span class="subst">&#123;item&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list1 = [1,23,4,5,6,7,8,9,0]</span><br><span class="line">list2 = [4,5,6,7,8,5]</span><br><span class="line">list3 = zip(list1,list2)</span><br><span class="line">print(list3)</span><br><span class="line">list4 = list(list3)</span><br><span class="line">print(list4)</span><br><span class="line">输出</span><br><span class="line">&lt;zip object at 0x0000013D9C478B40&gt;</span><br><span class="line">[(1, 4), (23, 5), (4, 6), (5, 7), (6, 8), (7, 5)]</span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="count"><a href="#count" class="headerlink" title=".count()"></a>.count()</h3><p>统计列表中某元素出现的次数，括号内是指定的某个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>, <span class="string">&#x27;Kotlin&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找元素出现的次数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>.count(<span class="string">&#x27;Python&#x27;</span>))    <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>.count(<span class="string">&#x27;Go&#x27;</span>))        <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>.count(<span class="string">&#x27;Swfit&#x27;</span>))     <span class="comment"># 0</span></span><br></pre></td></tr></table></figure><h3 id="append"><a href="#append" class="headerlink" title=".append()"></a>.append()</h3><p>.append(obj)末尾添加一个</p><p>往列表的最后一个位置插入操作，括号内是插入的元素,但是<strong>只能添加一个元素进去，加两个就得报错，加两个得用extend（）</strong></p><p>返回：无，会修改列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;school&quot;]</span><br><span class="line">num.append(&#x27;love&#x27;)</span><br><span class="line">print(num)</span><br></pre></td></tr></table></figure><h3 id="extend-或-相加"><a href="#extend-或-相加" class="headerlink" title=".extend()  或  +相加"></a>.extend()  或  +相加</h3><p>可以”+“号 来实现列表的相加。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num_1 = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br><span class="line">num_2 = [&#x27;teacher&#x27;,&quot;school&quot;]</span><br><span class="line">num = num_1 + num_2</span><br><span class="line">print(num)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;]</span><br></pre></td></tr></table></figure><p>.extend（）末尾添加一列</p><p>列表A.extend(列表B)链接两个列表，将列表B接到A的最后边，形成一个新的列表A，A列表已经变化。也就是说extend可以添加两个以上的元素进去。注意，添加的方法：多个元素要放在方括号里，即extend（）的参数是一个列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num_1 = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br><span class="line">num_2 = [&#x27;teacher&#x27;,&quot;school&quot;]</span><br><span class="line">num_1.extend(num_2)</span><br><span class="line"></span><br><span class="line">num = num_1[:]</span><br><span class="line">print(num)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [ &#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;]</span><br><span class="line">a.extend(&#x27;4&#x27;)</span><br><span class="line">a.extend([&#x27;5&#x27;,&#x27;6&#x27;])</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">[&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;]</span><br></pre></td></tr></table></figure><p><strong>注意</strong>  两个列表谨慎用 =  连接，一旦连接，两个列表作一个看。上边</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num = num_1[:]</span><br></pre></td></tr></table></figure><p>是把新的列表A复制一个副本给列表num。</p><h3 id="insert"><a href="#insert" class="headerlink" title=".insert()"></a>.insert()</h3><p>list.insert(index, obj),该方法用于将指定对象插入裂变的指定位置。</p><p>参数说明</p><ul><li>index 索引</li><li>obj 对象，该对象可以是一个数字或字符串，也可以是一个列表的某一个索引值。但是，OBJ如果是列表，只能是列表的某一个索引“列表[2]“，如果把一段切片如列表[0,2]，那么结果是把这一段切片带方括号插进指定位置了。说简单点，inset（）只能插入一个，这一个还必须得是数字或字符串，列表也能插，只是就成了嵌套的。再简单点，只能插入一个，给啥插啥。</li></ul><p>返回：无</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">num_1 = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;]</span><br><span class="line">num_1.insert(2,567)</span><br><span class="line">print(num_1)</span><br><span class="line">num_2 = [&#x27;i&#x27;,&#x27;love&#x27;,&#x27;U&#x27;]</span><br><span class="line">num_1.insert(2,num_2[0])</span><br><span class="line">print(num_1)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, 567, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;]</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;i&#x27;, 567, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [ &#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;]</span><br><span class="line">a.insert(1,[&#x27;5&#x27;,&#x27;6&#x27;])</span><br><span class="line">print(a)</span><br><span class="line">输出</span><br><span class="line">[&#x27;1&#x27;, [&#x27;5&#x27;, &#x27;6&#x27;], &#x27;2&#x27;, &#x27;3&#x27;]</span><br></pre></td></tr></table></figure><h3 id="pop"><a href="#pop" class="headerlink" title=".pop()"></a>.pop()</h3><p>.pop(index)</p><p><strong>弹出</strong>列表中指定索引的元素并返回删除的元素，原列表将失去该元素。不指明索引，默认弹出最后一位。</p><blockquote><p>在使用<code>pop</code>方法删除元素时，如果索引的值超出了范围，会引发<code>IndexError</code>异常，错误消息是：<code>pop index out of range</code>。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;]</span><br><span class="line">poped_num = num.pop()</span><br><span class="line">print(num)</span><br><span class="line">print(poped_num)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;teacher&#x27;]</span><br><span class="line">school</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;]</span><br><span class="line">poped_num = num.pop(3)</span><br><span class="line">print(num)</span><br><span class="line">print(poped_num)</span><br><span class="line">输出</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;school&#x27;]</span><br><span class="line">teacher</span><br></pre></td></tr></table></figure><h3 id="remove-obj"><a href="#remove-obj" class="headerlink" title=".remove(obj)"></a>.remove(obj)</h3><p>list.remove(obj)，移除列表中符合某个值得第一个匹配项</p><p>返回：无。没有返回值就不存在赋值。</p><blockquote><p>在使用<code>remove</code>方法删除元素时，如果要删除的元素并不在列表中，会引发<code>ValueError</code>异常，错误消息是：<code>list.remove(x): x not in list</code>。</p></blockquote><h3 id="del语句"><a href="#del语句" class="headerlink" title="del语句"></a>del语句</h3><p>del list[1]</p><blockquote><p>使用Python中的<code>del</code>关键字后面跟要删除的元素，这种做法跟使用<code>pop</code>方法指定索引删除元素没有实质性的区别，但后者会返回删除的元素，前者在性能上略优</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [ &#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;]</span><br><span class="line">del a[1]</span><br><span class="line">print(a)</span><br><span class="line">输出</span><br><span class="line">[&#x27;1&#x27;, &#x27;3&#x27;]</span><br></pre></td></tr></table></figure><p>del list 删除整个列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [ &#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;]</span><br><span class="line">del a</span><br><span class="line">print(a)</span><br><span class="line">输出</span><br><span class="line">NameError: name &#x27;a&#x27; is not defined</span><br></pre></td></tr></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title=".sort()"></a>.sort()</h3><p>**list.sort(cmp=None, key=None, reverse=False)**，默认升序</p><p>参数</p><p>cmp</p><p>key</p><p>reverse:翻转，reverse = True 降序， reverse = False升序（默认）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1 = list(&#x27;843613101&#x27;)</span><br><span class="line">list1.sort() #等同于list1.sort(reverse = False)</span><br><span class="line">print(list1)</span><br><span class="line">输出</span><br><span class="line">[&#x27;0&#x27;, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;3&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;6&#x27;, &#x27;8&#x27;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1 = list(&#x27;843613101&#x27;)</span><br><span class="line">list1.sort(reverse = True) #等同于list1.reverse</span><br><span class="line">print(list1)</span><br><span class="line">输出</span><br><span class="line">[&#x27;8&#x27;, &#x27;6&#x27;, &#x27;4&#x27;, &#x27;3&#x27;, &#x27;3&#x27;, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;0&#x27;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">list = [(2, 2), (3, 4), (4, 1), (1, 3)]</span><br><span class="line"># 获取列表的第二个元素</span><br><span class="line">def takeSecond(elem):</span><br><span class="line">    return elem[1]</span><br><span class="line"># 指定第二个元素排序</span><br><span class="line">list.sort(key=takeSecond)</span><br><span class="line">print(list)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">[(4, 1), (2, 2), (1, 3), (3, 4)]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list = [&#x27;a&#x27;,&#x27;bb&#x27;,&#x27;ccc&#x27;]</span><br><span class="line">list.sort(key = len)</span><br><span class="line">print(list)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">[&#x27;a&#x27;, &#x27;bb&#x27;, &#x27;ccc&#x27;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list = [&#x27;a&#x27;,&#x27;bb&#x27;,&#x27;ccc&#x27;]</span><br><span class="line">list.sort(key = len, reverse=True)</span><br><span class="line">print(list)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">[&#x27;ccc&#x27;, &#x27;bb&#x27;, &#x27;a&#x27;]</span><br></pre></td></tr></table></figure><p>2021年3月17日16:18:40</p><h3 id="reverse（）"><a href="#reverse（）" class="headerlink" title=".reverse（）"></a>.reverse（）</h3><p>翻转列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1 = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;]</span><br><span class="line">list1.reverse()</span><br><span class="line">print(list1)</span><br><span class="line">输出</span><br><span class="line">[&#x27;school&#x27;, &#x27;teacher&#x27;, &#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27;]</span><br></pre></td></tr></table></figure><h3 id="index（）"><a href="#index（）" class="headerlink" title=".index（）"></a>.index（）</h3><p><strong>list.index(object，起始索引，结束索引)</strong>:索引一下内容为object在列表中的位置，如果要确定在列表中某一个范围内的，需要指定范围。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;]</span><br><span class="line">print(list1.index(&#x27;school&#x27;))</span><br><span class="line">输出</span><br><span class="line">4</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;,&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;,&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;teacher&#x27;, &#x27;school&#x27;]</span><br><span class="line">print(list1.index(&#x27;school&#x27;,6,10))</span><br><span class="line">输出</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>2021年3月23日13:54:53</p><h2 id="列表的拷贝"><a href="#列表的拷贝" class="headerlink" title="列表的拷贝"></a>列表的拷贝</h2><blockquote><p><strong>注意</strong> 两个列表谨慎用 =  连接，一旦连接，两个列表作一个看。</p></blockquote><p>真确操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list2 = list1[:]</span><br></pre></td></tr></table></figure><p>是把列表1复制一个副本给列表2，同时并不影响列表1，修改列表2的同时列表1没变化。但是如果采用 <code>list2 = list1</code>   那就不一样了，视作同一个列表，修改列表2的同时列表1随之修改</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><blockquote><p>注意：由于列表是可变类型，所以通过索引操作既可以获取列表中的元素，也可以更新列表中的元素。对列表做索引操作一样要注意索引越界的问题，对于有<code>N</code>个元素的列表，正向索引的范围是<code>0</code>到<code>N-1</code>，负向索引的范围是<code>-1</code>到<code>-N</code>，如果超出这个范围，将引发<code>IndexError</code>异常，错误信息为：<code>list index out of range</code>。</p></blockquote><h2 id="列表的生成式"><a href="#列表的生成式" class="headerlink" title="列表的生成式"></a>列表的生成式</h2><p>在Python中，列表还可以通过一种特殊的字面量语法来创建，这种语法叫做生成式。我们给出两段代码，大家可以做一个对比，看看哪一种方式更加简单优雅。</p><p>通过<code>for</code>循环为空列表添加元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个由1到9的数字构成的列表</span></span><br><span class="line">list1 = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    list1.append(x)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个由&#x27;hello world&#x27;中除空格和元音字母外的字符构成的列表</span></span><br><span class="line">list2 = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;hello world&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27; aeiou&#x27;</span>:</span><br><span class="line">        list2.append(x)</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个由个两个字符串中字符的笛卡尔积构成的列表</span></span><br><span class="line">list3 = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="string">&#x27;12&#x27;</span>:</span><br><span class="line">        list3.append(x + y)</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br></pre></td></tr></table></figure><p>通过生成式创建列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个由1到9的数字构成的列表</span></span><br><span class="line">list1 = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(list1)    <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个由&#x27;hello world&#x27;中除空格和元音字母外的字符构成的列表</span></span><br><span class="line">list2 = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;hello world&#x27;</span> <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27; aeiou&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(list2)    <span class="comment"># [&#x27;h&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;w&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;d&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个由个两个字符串中字符的笛卡尔积构成的列表</span></span><br><span class="line">list3 = [x + y <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span> <span class="keyword">for</span> y <span class="keyword">in</span> <span class="string">&#x27;12&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(list3)    <span class="comment"># [&#x27;A1&#x27;, &#x27;A2&#x27;, &#x27;B1&#x27;, &#x27;B2&#x27;, &#x27;C1&#x27;, &#x27;C2&#x27;]</span></span><br></pre></td></tr></table></figure><p>下面这种方式不仅代码简单优雅，而且性能也优于上面使用<code>for</code>循环和<code>append</code>方法向空列表中追加元素的方式。可以简单跟大家交待下为什么生成式拥有更好的性能，那是因为Python解释器的字节码指令中有专门针对生成式的指令（<code>LIST_APPEND</code>指令）；而<code>for</code>循环是通过方法调用（<code>LOAD_METHOD</code>和<code>CALL_METHOD</code>指令）的方式为列表添加元素，方法调用本身就是一个相对耗时的操作。对这一点不理解也没有关系，记住“<strong>强烈建议用生成式语法来创建列表</strong>”这个结论就可以了。</p><h1 id="元组tuple"><a href="#元组tuple" class="headerlink" title="元组tuple"></a>元组tuple</h1><p>是一个不可改变的对象，这是它不同于列表的最大特殊之处，一旦创建就不可改变。可以说是戴上枷锁的列表。具有列表的基本操作方式。</p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/20210323141724.png"></p><p><img src="https://gitee.com/lanhuakai/pic_stock/raw/master/img/20210323142018.png"></p><blockquote><p><strong>注意</strong>一个元组中如果有两个元素，我们就称之为二元组；一个元组中如果五个元素，我们就称之为五元组。需要提醒大家注意的是，<code>()</code>表示空元组，但是如果元组中只有一个元素，需要加上一个逗号，否则<code>()</code>就不是代表元组的字面量语法，而是改变运算优先级的圆括号，所以<code>(&#39;hello&#39;, )</code>和<code>(100, )</code>才是一元组，而<code>(&#39;hello&#39;)</code>和<code>(100)</code>只是字符串和整数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 空元组</span></span><br><span class="line">a = ()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))    <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 不是元组</span></span><br><span class="line">b = (<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))    <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line">c = (<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(c))    <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 一元组</span></span><br><span class="line">d = (<span class="string">&#x27;hello&#x27;</span>, )</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(d))    <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line">e = (<span class="number">100</span>, )</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(e))    <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="元组的应用场景"><a href="#元组的应用场景" class="headerlink" title="元组的应用场景"></a>元组的应用场景</h3><p>讲到这里，相信大家一定迫切的想知道元组有哪些应用场景，我们给大家举几个例子。</p><h4 id="例子1：打包和解包操作。"><a href="#例子1：打包和解包操作。" class="headerlink" title="例子1：打包和解包操作。"></a>例子1：打包和解包操作。</h4><p>当我们把多个用逗号分隔的值赋给一个变量时，多个值会打包成一个元组类型；当我们把一个元组赋值给多个变量时，元组会解包成多个值然后分别赋给对应的变量，如下面的代码所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包</span></span><br><span class="line">a = <span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a), a)    <span class="comment"># &lt;class &#x27;tuple&#x27;&gt; (1, 10, 100)</span></span><br><span class="line"><span class="comment"># 解包</span></span><br><span class="line">i, j, k = a</span><br><span class="line"><span class="built_in">print</span>(i, j, k)       <span class="comment"># 1 10 100</span></span><br></pre></td></tr></table></figure><p>在解包时，如果解包出来的元素个数和变量个数不对应，会引发<code>ValueError</code>异常，错误信息为：<code>too many values to unpack</code>（解包的值太多）或<code>not enough values to unpack</code>（解包的值不足）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span></span><br><span class="line"><span class="comment"># i, j, k = a             # ValueError: too many values to unpack (expected 3)</span></span><br><span class="line"><span class="comment"># i, j, k, l, m, n = a    # ValueError: not enough values to unpack (expected 6, got 4)</span></span><br></pre></td></tr></table></figure><p>有一种解决变量个数少于元素的个数方法，就是使用星号表达式，我们之前讲函数的可变参数时使用过星号表达式。有了星号表达式，我们就可以让一个变量接收多个值，代码如下所示。需要注意的是，用星号表达式修饰的变量会变成一个列表，列表中有0个或多个元素。还有在解包语法中，星号表达式只能出现一次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span></span><br><span class="line">i, j, *k = a</span><br><span class="line"><span class="built_in">print</span>(i, j, k)          <span class="comment"># 1 10 [100, 1000]</span></span><br><span class="line">i, *j, k = a</span><br><span class="line"><span class="built_in">print</span>(i, j, k)          <span class="comment"># 1 [10, 100] 1000</span></span><br><span class="line">*i, j, k = a</span><br><span class="line"><span class="built_in">print</span>(i, j, k)          <span class="comment"># [1, 10] 100 1000</span></span><br><span class="line">*i, j = a</span><br><span class="line"><span class="built_in">print</span>(i, j)             <span class="comment"># [1, 10, 100] 1000</span></span><br><span class="line">i, *j = a</span><br><span class="line"><span class="built_in">print</span>(i, j)             <span class="comment"># 1 [10, 100, 1000]</span></span><br><span class="line">i, j, k, *l = a</span><br><span class="line"><span class="built_in">print</span>(i, j, k, l)       <span class="comment"># 1 10 100 [1000]</span></span><br><span class="line">i, j, k, l, *m = a</span><br><span class="line"><span class="built_in">print</span>(i, j, k, l, m)    <span class="comment"># 1 10 100 1000 []</span></span><br></pre></td></tr></table></figure><p>需要说明一点，解包语法对所有的序列都成立，这就意味着对字符串、列表以及我们之前讲到的<code>range</code>函数返回的范围序列都可以使用解包语法。大家可以尝试运行下面的代码，看看会出现怎样的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a, b, *c = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br><span class="line">a, b, c = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br><span class="line">a, *b, c = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br></pre></td></tr></table></figure><p>现在我们可以反过来思考一下函数的可变参数，可变参数其实就是将多个参数打包成了一个元组，可以通过下面的代码来证明这一点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(args), args)</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> args:</span><br><span class="line">        total += val</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">10</span>, <span class="number">20</span>)        <span class="comment"># &lt;class &#x27;tuple&#x27;&gt; (1, 10, 20)</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)    <span class="comment"># &lt;class &#x27;tuple&#x27;&gt; (1, 2, 3, 4, 5)</span></span><br></pre></td></tr></table></figure><h4 id="例子2：交换两个变量的值。"><a href="#例子2：交换两个变量的值。" class="headerlink" title="例子2：交换两个变量的值。"></a>例子2：交换两个变量的值。</h4><p>交换两个变量的值是编程语言中的一个经典案例，在很多编程语言中，交换两个变量的值都需要借助一个中间变量才能做到，如果不用中间变量就需要使用比较晦涩的位运算来实现。在Python中，交换两个变量<code>a</code>和<code>b</code>的值只需要使用如下所示的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure><p>同理，如果要将三个变量<code>a</code>、<code>b</code>、<code>c</code>的值互换，即<code>b</code>赋给<code>a</code>，<code>c</code>赋给<code>b</code>，<code>a</code>赋给<code>c</code>，也可以如法炮制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = b, c, a</span><br></pre></td></tr></table></figure><p>需要说明的是，上面并没有用到打包和解包语法，Python的字节码指令中有<code>ROT_TWO</code>和<code>ROT_THREE</code>这样的指令可以实现这个操作，效率是非常高的。但是如果有多于三个变量的值要依次互换，这个时候没有直接可用的字节码指令，执行的原理就是我们上面讲解的打包和解包操作。</p><h4 id="例子3：让函数返回多个值。"><a href="#例子3：让函数返回多个值。" class="headerlink" title="例子3：让函数返回多个值。"></a>例子3：让函数返回多个值。</h4><p>有的时候一个函数执行完成后可能需要返回多个值，这个时候元组类型应该是比较方便的选择。例如，编写一个找出列表中最大值和最小的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_max_and_min</span>(<span class="params">items</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;找出列表中最大和最小的元素</span></span><br><span class="line"><span class="string">    :param items: 列表</span></span><br><span class="line"><span class="string">    :return: 最大和最小元素构成的二元组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    max_one, min_one = items[<span class="number">0</span>], items[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">if</span> item &gt; max_one:</span><br><span class="line">            max_one = item</span><br><span class="line">        <span class="keyword">elif</span> item &lt; min_one:</span><br><span class="line">            min_one = item</span><br><span class="line">    <span class="keyword">return</span> max_one, min_one</span><br></pre></td></tr></table></figure><p>上面函数的<code>return</code>语句中有两个值，这两个值会组装成一个二元组然后返回。所以调用<code>find_max_and_min</code>函数会得到这个二元组，如果愿意也可以通过解包语法将二元组中的两个值分别赋给两个变量。</p><h2 id="元组和列表的比较"><a href="#元组和列表的比较" class="headerlink" title="元组和列表的比较"></a>元组和列表的比较</h2><p>这里还有一个非常值得探讨的问题，Python中已经有了列表类型，为什么还需要元组这样的类型呢？这个问题对于初学者来说似乎有点困难，不过没有关系，我们先抛出观点，大家可以一边学习一边慢慢体会。</p><ol><li><p>元组是不可变类型，<strong>不可变类型更适合多线程环境</strong>，因为它降低了并发访问变量的同步化开销。关于这一点，我们会在后面讲解多线程的时候为大家详细论述。</p></li><li><p>元组是不可变类型，通常<strong>不可变类型在创建时间和占用空间上面都优于对应的可变类型</strong>。我们可以使用<code>sys</code>模块的<code>getsizeof</code>函数来检查保存相同元素的元组和列表各自占用了多少内存空间。我们也可以使用<code>timeit</code>模块的<code>timeit</code>函数来看看创建保存相同元素的元组和列表各自花费的时间，代码如下所示。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">100000</span>))</span><br><span class="line">b = <span class="built_in">tuple</span>(<span class="built_in">range</span>(<span class="number">100000</span>))</span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(a), sys.getsizeof(b))    <span class="comment"># 900120 800056</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(timeit.timeit(<span class="string">&#x27;[1, 2, 3, 4, 5, 6, 7, 8, 9]&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(timeit.timeit(<span class="string">&#x27;(1, 2, 3, 4, 5, 6, 7, 8, 9)&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>Python中的元组和列表是可以相互转换的，我们可以通过下面的代码来做到。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将元组转换成列表</span></span><br><span class="line">info = (<span class="string">&#x27;骆昊&#x27;</span>, <span class="number">175</span>, <span class="literal">True</span>, <span class="string">&#x27;四川成都&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(info))       <span class="comment"># [&#x27;骆昊&#x27;, 175, True, &#x27;四川成都&#x27;]</span></span><br><span class="line"><span class="comment"># 将列表转换成元组</span></span><br><span class="line">fruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(fruits))    <span class="comment"># (&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;orange&#x27;)</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="列表和元祖的经典案例"><a href="#列表和元祖的经典案例" class="headerlink" title="列表和元祖的经典案例"></a>列表和元祖的经典案例</h1><h2 id="案例1：成绩表和平均分统计"><a href="#案例1：成绩表和平均分统计" class="headerlink" title="案例1：成绩表和平均分统计"></a>案例1：成绩表和平均分统计</h2><blockquote><p><strong>说明</strong>：录入5个学生3门课程的考试成绩，计算每个学生的平均分和每门课的平均分。</p></blockquote><p><strong>我写的解决办法是</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">录入5个学生3门课程的考试成绩</span></span><br><span class="line"><span class="string">计算每个学生的平均分和每门课的平均分</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># students_name = [&#x27;张三&#x27;,&#x27;李四&#x27;,&#x27;王五&#x27;,&#x27;赵钱&#x27;,&#x27;孙俪&#x27;]</span></span><br><span class="line"><span class="comment"># course = [&#x27;数学&#x27;,&#x27;语文&#x27;,&#x27;英语&#x27;]</span></span><br><span class="line"></span><br><span class="line">students_name = [<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>]</span><br><span class="line">course = [<span class="string">&#x27;数学&#x27;</span>,<span class="string">&#x27;语文&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建了一个储藏五个学生成绩的列表</span></span><br><span class="line">scores = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(students_name)):</span><br><span class="line">    scores.append([<span class="number">0</span>]*<span class="built_in">len</span>(course))</span><br><span class="line"><span class="comment">#收集数据</span></span><br><span class="line"><span class="keyword">for</span> i,x_name <span class="keyword">in</span> <span class="built_in">enumerate</span>(students_name) :</span><br><span class="line">    <span class="keyword">for</span> j,y_course <span class="keyword">in</span> <span class="built_in">enumerate</span>(course):</span><br><span class="line">        score = <span class="built_in">input</span>(<span class="string">f&#x27;请输入<span class="subst">&#123;x_name&#125;</span>的<span class="subst">&#123;y_course&#125;</span>的成绩：&#x27;</span>)</span><br><span class="line">        scores[i][j] = <span class="built_in">int</span>(score)</span><br><span class="line"><span class="built_in">print</span>(scores)</span><br><span class="line"><span class="comment">#计算每个学生的平均分</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(students_name)):</span><br><span class="line">    name_total_score = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(course)):</span><br><span class="line">        name_total_score += scores[i][j]</span><br><span class="line">    pjcj = name_total_score/(<span class="built_in">len</span>(course))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;students_name[i]&#125;</span>的平均成绩是：<span class="subst">&#123;pjcj&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算每门课的平均分</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(course)):</span><br><span class="line">    course_total_score = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(students_name)):</span><br><span class="line">        course_total_score += scores[i][j]</span><br><span class="line">    pjcj = course_total_score/(<span class="built_in">len</span>(students_name))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;course[i]&#125;</span>的平均成绩是：<span class="subst">&#123;pjcj&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>大佬的解决办法是</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">录入5个学生3门课程的考试成绩</span></span><br><span class="line"><span class="string">计算每个学生的平均分和每门课的平均分</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">names = [<span class="string">&#x27;关羽&#x27;</span>, <span class="string">&#x27;张飞&#x27;</span>, <span class="string">&#x27;赵云&#x27;</span>, <span class="string">&#x27;马超&#x27;</span>, <span class="string">&#x27;黄忠&#x27;</span>]</span><br><span class="line">courses = [<span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>]</span><br><span class="line"><span class="comment"># 用生成式创建嵌套的列表保存5个学生3门课程的成绩</span></span><br><span class="line">scores = [[<span class="number">0</span>] * <span class="built_in">len</span>(courses) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(names))]</span><br><span class="line"><span class="comment"># 录入数据</span></span><br><span class="line"><span class="keyword">for</span> i, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(names):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;请输入<span class="subst">&#123;name&#125;</span>的成绩 ===&gt;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> j, course <span class="keyword">in</span> <span class="built_in">enumerate</span>(courses):</span><br><span class="line">        scores[i][j] = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">f&#x27;<span class="subst">&#123;course&#125;</span>: &#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">5</span>, <span class="string">&#x27;学生平均成绩&#x27;</span>, <span class="string">&#x27;-&#x27;</span> * <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 计算每个人的平均成绩</span></span><br><span class="line"><span class="keyword">for</span> index, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(names):</span><br><span class="line">    avg_score = <span class="built_in">sum</span>(scores[index]) / <span class="built_in">len</span>(courses)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>的平均成绩为: <span class="subst">&#123;avg_score:<span class="number">.1</span>f&#125;</span>分&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">5</span>, <span class="string">&#x27;课程平均成绩&#x27;</span>, <span class="string">&#x27;-&#x27;</span> * <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 计算每门课的平均成绩</span></span><br><span class="line"><span class="keyword">for</span> index, course <span class="keyword">in</span> <span class="built_in">enumerate</span>(courses):</span><br><span class="line">    <span class="comment"># 用生成式从scores中取出指定的列创建新列表</span></span><br><span class="line">    curr_course_scores = [score[index] <span class="keyword">for</span> score <span class="keyword">in</span> scores]</span><br><span class="line">    avg_score = <span class="built_in">sum</span>(curr_course_scores) / <span class="built_in">len</span>(names)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;course&#125;</span>的平均成绩为：<span class="subst">&#123;avg_score:<span class="number">.1</span>f&#125;</span>分&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="案例2：设计一个函数返回指定日期是这一年的第几天。"><a href="#案例2：设计一个函数返回指定日期是这一年的第几天。" class="headerlink" title="案例2：设计一个函数返回指定日期是这一年的第几天。"></a>案例2：设计一个函数返回指定日期是这一年的第几天。</h2><blockquote><p><strong>说明</strong>：这个案例源于著名的<em>The C Programming Language</em>上的例子。</p></blockquote><p><strong>我写的办法是</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">设计一个函数返回指定日期是这一年的第几天。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">day_dic = &#123;</span><br><span class="line">        <span class="string">&#x27;1&#x27;</span>:<span class="number">31</span>,</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span>:<span class="number">29</span>,</span><br><span class="line">        <span class="string">&#x27;3&#x27;</span>:<span class="number">31</span>,</span><br><span class="line">        <span class="string">&#x27;4&#x27;</span>:<span class="number">30</span>,</span><br><span class="line">        <span class="string">&#x27;5&#x27;</span>:<span class="number">31</span>,</span><br><span class="line">        <span class="string">&#x27;6&#x27;</span>:<span class="number">30</span>,</span><br><span class="line">        <span class="string">&#x27;7&#x27;</span>:<span class="number">31</span>,</span><br><span class="line">        <span class="string">&#x27;8&#x27;</span>:<span class="number">31</span>,</span><br><span class="line">        <span class="string">&#x27;9&#x27;</span>:<span class="number">30</span>,</span><br><span class="line">        <span class="string">&#x27;10&#x27;</span>:<span class="number">31</span>,</span><br><span class="line">        <span class="string">&#x27;11&#x27;</span>:<span class="number">30</span>,</span><br><span class="line">        <span class="string">&#x27;12&#x27;</span>:<span class="number">31</span>,</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_function</span>():</span></span><br><span class="line">    year = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入您想确认的年份：&#x27;</span>))</span><br><span class="line">    month = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入您想确认的日期的月份：&#x27;</span>))</span><br><span class="line">    day = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">f&#x27;请输入您想确认的<span class="subst">&#123;month&#125;</span>月的几号：&#x27;</span>))</span><br><span class="line">    <span class="comment">#判断闰年</span></span><br><span class="line">    <span class="keyword">if</span> year/<span class="number">4</span> != <span class="number">0</span> <span class="keyword">and</span> year/<span class="number">400</span>!=<span class="number">0</span>:</span><br><span class="line">        day_dic[<span class="string">&#x27;2&#x27;</span>] = <span class="number">28</span></span><br><span class="line">    <span class="comment">#计算数据</span></span><br><span class="line">    which_day = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,month):</span><br><span class="line">        which_day += <span class="built_in">int</span>(day_dic[<span class="built_in">str</span>(x)])</span><br><span class="line">    which_day += day</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;year&#125;</span>年<span class="subst">&#123;month&#125;</span>月<span class="subst">&#123;day&#125;</span>号是一年当中的第<span class="subst">&#123;which_day&#125;</span>天&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    a_function()</span><br></pre></td></tr></table></figure><p><strong>大佬写的办法是</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_leap_year</span>(<span class="params">year</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;判断指定的年份是不是闰年，平年返回False，闰年返回True&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">which_day</span>(<span class="params">year, month, date</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算传入的日期是这一年的第几天</span></span><br><span class="line"><span class="string">    :param year: 年</span></span><br><span class="line"><span class="string">    :param month: 月</span></span><br><span class="line"><span class="string">    :param date: 日</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 用嵌套的列表保存平年和闰年每个月的天数</span></span><br><span class="line">    days_of_month = [</span><br><span class="line">        [<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">        [<span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>]</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment"># 布尔值False和True可以转换成整数0和1，因此</span></span><br><span class="line">    <span class="comment"># 平年会选中嵌套列表中的第一个列表(2月是28天)</span></span><br><span class="line">    <span class="comment"># 闰年会选中嵌套列表中的第二个列表(2月是29天)</span></span><br><span class="line">    days = days_of_month[is_leap_year(year)]</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(month - <span class="number">1</span>):</span><br><span class="line">        total += days[index]</span><br><span class="line">    <span class="keyword">return</span> total + date</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(which_day(<span class="number">1980</span>, <span class="number">11</span>, <span class="number">28</span>))    <span class="comment"># 333</span></span><br><span class="line"><span class="built_in">print</span>(which_day(<span class="number">1981</span>, <span class="number">12</span>, <span class="number">31</span>))    <span class="comment"># 365</span></span><br><span class="line"><span class="built_in">print</span>(which_day(<span class="number">2018</span>, <span class="number">1</span>, <span class="number">1</span>))      <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(which_day(<span class="number">2016</span>, <span class="number">3</span>, <span class="number">1</span>))      <span class="comment"># 61</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="案例3：实现双色球随机选号。"><a href="#案例3：实现双色球随机选号。" class="headerlink" title="案例3：实现双色球随机选号。"></a>案例3：实现双色球随机选号。</h2><blockquote><p><strong>说明</strong>：双色球属乐透型彩票范畴，由中国福利彩票发行管理中心统一组织发行，在全国范围内销售。红球号码范围为01～33，蓝球号码范围为01～16。双色球每期从33个红球中开出6个号码，从16个蓝球中开出1个号码作为中奖号码，双色球玩法即是竞猜开奖号码的6个红球号码和1个蓝球号码。</p></blockquote><p><strong>我的写法是</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">实现双色球随机选号。</span></span><br><span class="line"><span class="string">红球号码范围为01～33，蓝球号码范围为01～16。</span></span><br><span class="line"><span class="string">双色球每期从33个红球中开出6个号码，从16个蓝球中开出1个号码作为中奖号码，双色球玩法即是竞猜开奖号码的6个红球号码和1个蓝球号码。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">red_boll = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">34</span>)]</span><br><span class="line">blue_boll = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">17</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开红球</span></span><br><span class="line">red_choice = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    a = random.randint(<span class="number">1</span>,<span class="built_in">len</span>(red_boll))</span><br><span class="line">    red_choice.append(a)</span><br><span class="line">    red_boll.remove(a)</span><br><span class="line"><span class="built_in">print</span>(red_choice)</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line"><span class="comment"># a = random.randint(1,len(red_boll))</span></span><br><span class="line"><span class="comment"># print(a)</span></span><br><span class="line"><span class="comment"># red_choice.append(a)</span></span><br><span class="line"><span class="comment"># red_boll.remove(a)</span></span><br><span class="line"><span class="comment"># print(red_boll)</span></span><br><span class="line"><span class="comment"># print(red_choice)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#开蓝球</span></span><br><span class="line">blue_choice = []</span><br><span class="line">a = random.randint(<span class="number">1</span>,<span class="built_in">len</span>(blue_boll))</span><br><span class="line">blue_choice.append(a)</span><br><span class="line">blue_boll.remove(a)</span><br><span class="line"><span class="built_in">print</span>(blue_choice)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>大佬的写法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">双色球随机选号</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint, sample</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">balls</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;输出列表中的双色球号码&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> index, ball <span class="keyword">in</span> <span class="built_in">enumerate</span>(balls):</span><br><span class="line">        <span class="keyword">if</span> index == <span class="built_in">len</span>(balls) - <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;|&#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;ball:<span class="number">0</span>&gt;2d&#125;</span>&#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_select</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;随机选择一组号码&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 用生成式生成1到33号的红色球</span></span><br><span class="line">    red_balls = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">34</span>)]</span><br><span class="line">    <span class="comment"># 通过无放回随机抽样的方式选中6个红色球</span></span><br><span class="line">    selected_balls = sample(red_balls, <span class="number">6</span>)</span><br><span class="line">    <span class="comment"># 对红色球进行排序</span></span><br><span class="line">    selected_balls.sort()</span><br><span class="line">    <span class="comment"># 用1到16的随机数表示选中的蓝色球并追加到列表中</span></span><br><span class="line">    selected_balls.append(randint(<span class="number">1</span>, <span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> selected_balls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;机选几注: &#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    display(random_select())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 序列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
